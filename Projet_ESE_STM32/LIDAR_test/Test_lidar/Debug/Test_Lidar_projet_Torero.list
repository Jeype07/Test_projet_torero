
Test_Lidar_projet_Torero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007494  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007678  08007678  00008678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007798  08007798  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007798  08007798  00008798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077a0  080077a0  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077a0  080077a0  000087a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077a4  080077a4  000087a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080077a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba4  20000068  08007810  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c0c  08007810  00009c0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140e4  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000299b  00000000  00000000  0001d17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001fb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db9  00000000  00000000  00020cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6ab  00000000  00000000  00021a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c36  00000000  00000000  00041114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8cdb  00000000  00000000  00055d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ea25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c0  00000000  00000000  0011ea68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  00123f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800765c 	.word	0x0800765c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800765c 	.word	0x0800765c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b96a 	b.w	8000f48 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	460c      	mov	r4, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14e      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c98:	4694      	mov	ip, r2
 8000c9a:	458c      	cmp	ip, r1
 8000c9c:	4686      	mov	lr, r0
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	d962      	bls.n	8000d6a <__udivmoddi4+0xde>
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	4091      	lsls	r1, r2
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f f68c 	uxth.w	r6, ip
 8000cc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb07 1114 	mls	r1, r7, r4, r1
 8000cce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd2:	fb04 f106 	mul.w	r1, r4, r6
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ce2:	f080 8112 	bcs.w	8000f0a <__udivmoddi4+0x27e>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 810f 	bls.w	8000f0a <__udivmoddi4+0x27e>
 8000cec:	3c02      	subs	r4, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a59      	subs	r1, r3, r1
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb00 f606 	mul.w	r6, r0, r6
 8000d06:	429e      	cmp	r6, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x94>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d12:	f080 80fc 	bcs.w	8000f0e <__udivmoddi4+0x282>
 8000d16:	429e      	cmp	r6, r3
 8000d18:	f240 80f9 	bls.w	8000f0e <__udivmoddi4+0x282>
 8000d1c:	4463      	add	r3, ip
 8000d1e:	3802      	subs	r0, #2
 8000d20:	1b9b      	subs	r3, r3, r6
 8000d22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d26:	2100      	movs	r1, #0
 8000d28:	b11d      	cbz	r5, 8000d32 <__udivmoddi4+0xa6>
 8000d2a:	40d3      	lsrs	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d905      	bls.n	8000d46 <__udivmoddi4+0xba>
 8000d3a:	b10d      	cbz	r5, 8000d40 <__udivmoddi4+0xb4>
 8000d3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d40:	2100      	movs	r1, #0
 8000d42:	4608      	mov	r0, r1
 8000d44:	e7f5      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d46:	fab3 f183 	clz	r1, r3
 8000d4a:	2900      	cmp	r1, #0
 8000d4c:	d146      	bne.n	8000ddc <__udivmoddi4+0x150>
 8000d4e:	42a3      	cmp	r3, r4
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xcc>
 8000d52:	4290      	cmp	r0, r2
 8000d54:	f0c0 80f0 	bcc.w	8000f38 <__udivmoddi4+0x2ac>
 8000d58:	1a86      	subs	r6, r0, r2
 8000d5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d0e6      	beq.n	8000d32 <__udivmoddi4+0xa6>
 8000d64:	e9c5 6300 	strd	r6, r3, [r5]
 8000d68:	e7e3      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	f040 8090 	bne.w	8000e90 <__udivmoddi4+0x204>
 8000d70:	eba1 040c 	sub.w	r4, r1, ip
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa1f f78c 	uxth.w	r7, ip
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d86:	fb08 4416 	mls	r4, r8, r6, r4
 8000d8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8e:	fb07 f006 	mul.w	r0, r7, r6
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x11c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x11a>
 8000da0:	4298      	cmp	r0, r3
 8000da2:	f200 80cd 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000da6:	4626      	mov	r6, r4
 8000da8:	1a1c      	subs	r4, r3, r0
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000db2:	fb08 4410 	mls	r4, r8, r0, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb00 f707 	mul.w	r7, r0, r7
 8000dbe:	429f      	cmp	r7, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x148>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x146>
 8000dcc:	429f      	cmp	r7, r3
 8000dce:	f200 80b0 	bhi.w	8000f32 <__udivmoddi4+0x2a6>
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	1bdb      	subs	r3, r3, r7
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0x9c>
 8000ddc:	f1c1 0620 	rsb	r6, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa22 f706 	lsr.w	r7, r2, r6
 8000de6:	431f      	orrs	r7, r3
 8000de8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dec:	fa04 f301 	lsl.w	r3, r4, r1
 8000df0:	ea43 030c 	orr.w	r3, r3, ip
 8000df4:	40f4      	lsrs	r4, r6
 8000df6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dfa:	0c38      	lsrs	r0, r7, #16
 8000dfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e00:	fbb4 fef0 	udiv	lr, r4, r0
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	fb00 441e 	mls	r4, r0, lr, r4
 8000e0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e10:	fb0e f90c 	mul.w	r9, lr, ip
 8000e14:	45a1      	cmp	r9, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	d90a      	bls.n	8000e32 <__udivmoddi4+0x1a6>
 8000e1c:	193c      	adds	r4, r7, r4
 8000e1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e22:	f080 8084 	bcs.w	8000f2e <__udivmoddi4+0x2a2>
 8000e26:	45a1      	cmp	r9, r4
 8000e28:	f240 8081 	bls.w	8000f2e <__udivmoddi4+0x2a2>
 8000e2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e30:	443c      	add	r4, r7
 8000e32:	eba4 0409 	sub.w	r4, r4, r9
 8000e36:	fa1f f983 	uxth.w	r9, r3
 8000e3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e4a:	45a4      	cmp	ip, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x1d2>
 8000e4e:	193c      	adds	r4, r7, r4
 8000e50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e54:	d267      	bcs.n	8000f26 <__udivmoddi4+0x29a>
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d965      	bls.n	8000f26 <__udivmoddi4+0x29a>
 8000e5a:	3b02      	subs	r3, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e62:	fba0 9302 	umull	r9, r3, r0, r2
 8000e66:	eba4 040c 	sub.w	r4, r4, ip
 8000e6a:	429c      	cmp	r4, r3
 8000e6c:	46ce      	mov	lr, r9
 8000e6e:	469c      	mov	ip, r3
 8000e70:	d351      	bcc.n	8000f16 <__udivmoddi4+0x28a>
 8000e72:	d04e      	beq.n	8000f12 <__udivmoddi4+0x286>
 8000e74:	b155      	cbz	r5, 8000e8c <__udivmoddi4+0x200>
 8000e76:	ebb8 030e 	subs.w	r3, r8, lr
 8000e7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431e      	orrs	r6, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	e9c5 6400 	strd	r6, r4, [r5]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e750      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000e90:	f1c2 0320 	rsb	r3, r2, #32
 8000e94:	fa20 f103 	lsr.w	r1, r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ea0:	4094      	lsls	r4, r2
 8000ea2:	430c      	orrs	r4, r1
 8000ea4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eac:	fa1f f78c 	uxth.w	r7, ip
 8000eb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb8:	0c23      	lsrs	r3, r4, #16
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb00 f107 	mul.w	r1, r0, r7
 8000ec2:	4299      	cmp	r1, r3
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x24c>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ece:	d22c      	bcs.n	8000f2a <__udivmoddi4+0x29e>
 8000ed0:	4299      	cmp	r1, r3
 8000ed2:	d92a      	bls.n	8000f2a <__udivmoddi4+0x29e>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ee0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee8:	fb01 f307 	mul.w	r3, r1, r7
 8000eec:	42a3      	cmp	r3, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x276>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef8:	d213      	bcs.n	8000f22 <__udivmoddi4+0x296>
 8000efa:	42a3      	cmp	r3, r4
 8000efc:	d911      	bls.n	8000f22 <__udivmoddi4+0x296>
 8000efe:	3902      	subs	r1, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	1ae4      	subs	r4, r4, r3
 8000f04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f08:	e739      	b.n	8000d7e <__udivmoddi4+0xf2>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	e6f0      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e706      	b.n	8000d20 <__udivmoddi4+0x94>
 8000f12:	45c8      	cmp	r8, r9
 8000f14:	d2ae      	bcs.n	8000e74 <__udivmoddi4+0x1e8>
 8000f16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1e:	3801      	subs	r0, #1
 8000f20:	e7a8      	b.n	8000e74 <__udivmoddi4+0x1e8>
 8000f22:	4631      	mov	r1, r6
 8000f24:	e7ed      	b.n	8000f02 <__udivmoddi4+0x276>
 8000f26:	4603      	mov	r3, r0
 8000f28:	e799      	b.n	8000e5e <__udivmoddi4+0x1d2>
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	e7d4      	b.n	8000ed8 <__udivmoddi4+0x24c>
 8000f2e:	46d6      	mov	lr, sl
 8000f30:	e77f      	b.n	8000e32 <__udivmoddi4+0x1a6>
 8000f32:	4463      	add	r3, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e74d      	b.n	8000dd4 <__udivmoddi4+0x148>
 8000f38:	4606      	mov	r6, r0
 8000f3a:	4623      	mov	r3, r4
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e70f      	b.n	8000d60 <__udivmoddi4+0xd4>
 8000f40:	3e02      	subs	r6, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	e730      	b.n	8000da8 <__udivmoddi4+0x11c>
 8000f46:	bf00      	nop

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int chr){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000f54:	1d39      	adds	r1, r7, #4
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <__io_putchar+0x20>)
 8000f5e:	f003 fd91 	bl	8004a84 <HAL_UART_Transmit>
	return chr;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200000d0 	.word	0x200000d0

08000f70 <print_buffer>:

void print_buffer(const char * Name, uint8_t *pData, uint16_t Size, int N_lines){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	80fb      	strh	r3, [r7, #6]
	printf("%s\r\n", Name);
 8000f80:	68f9      	ldr	r1, [r7, #12]
 8000f82:	4819      	ldr	r0, [pc, #100]	@ (8000fe8 <print_buffer+0x78>)
 8000f84:	f005 fab6 	bl	80064f4 <iprintf>
	if(N_lines >= (int) Size){
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	db13      	blt.n	8000fb8 <print_buffer+0x48>
		for(int i = 0; i<Size; i++){
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e00b      	b.n	8000fae <print_buffer+0x3e>
			printf("%d : %d\r\n", i, pData[i]);
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	6979      	ldr	r1, [r7, #20]
 8000fa2:	4812      	ldr	r0, [pc, #72]	@ (8000fec <print_buffer+0x7c>)
 8000fa4:	f005 faa6 	bl	80064f4 <iprintf>
		for(int i = 0; i<Size; i++){
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	dbef      	blt.n	8000f96 <print_buffer+0x26>
	else{
		for(int i = 0; i<N_lines; i++){
			printf("%d : %d\r\n", i, pData[i]);
		}
	}
}
 8000fb6:	e012      	b.n	8000fde <print_buffer+0x6e>
		for(int i = 0; i<N_lines; i++){
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	e00b      	b.n	8000fd6 <print_buffer+0x66>
			printf("%d : %d\r\n", i, pData[i]);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	6939      	ldr	r1, [r7, #16]
 8000fca:	4808      	ldr	r0, [pc, #32]	@ (8000fec <print_buffer+0x7c>)
 8000fcc:	f005 fa92 	bl	80064f4 <iprintf>
		for(int i = 0; i<N_lines; i++){
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	dbef      	blt.n	8000fbe <print_buffer+0x4e>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	08007678 	.word	0x08007678
 8000fec:	08007680 	.word	0x08007680

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 ff3e 	bl	8001e76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 f83b 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 f9bd 	bl	800137c <MX_GPIO_Init>
  MX_DMA_Init();
 8001002:	f000 f991 	bl	8001328 <MX_DMA_Init>
  MX_TIM4_Init();
 8001006:	f000 f87f 	bl	8001108 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800100a:	f000 f941 	bl	8001290 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800100e:	f000 f8f3 	bl	80011f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  LIDAR_Init(&hlidar);
 8001012:	4813      	ldr	r0, [pc, #76]	@ (8001060 <main+0x70>)
 8001014:	f000 fc9c 	bl	8001950 <LIDAR_Init>
  printf("Init\r\n");
 8001018:	4812      	ldr	r0, [pc, #72]	@ (8001064 <main+0x74>)
 800101a:	f005 fad3 	bl	80065c4 <puts>
  HAL_Delay(2000);
 800101e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001022:	f000 ff99 	bl	8001f58 <HAL_Delay>
    LIDAR_Get_Health_Status(&hlidar);
    print_buffer("Health", hlidar.health_buff, HEALTH_BUFF_SIZE_LIDAR, HEALTH_BUFF_SIZE_LIDAR);
    HAL_Delay(1000);
    LIDAR_Get_Info(&hlidar);
    print_buffer("Info", hlidar.info_buff, INFO_BUFF_SIZE_LIDAR, INFO_BUFF_SIZE_LIDAR);*/
    HAL_StatusTypeDef status = LIDAR_Start(&hlidar);
 8001026:	480e      	ldr	r0, [pc, #56]	@ (8001060 <main+0x70>)
 8001028:	f000 fca2 	bl	8001970 <LIDAR_Start>
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
    printf("status = %d\r\n", status);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	@ (8001068 <main+0x78>)
 8001036:	f005 fa5d 	bl	80064f4 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  print_buffer("DATA", hlidar.data_buff, DATA_BUFF_SIZE_LIDAR, 15);
 800103a:	230f      	movs	r3, #15
 800103c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001040:	490a      	ldr	r1, [pc, #40]	@ (800106c <main+0x7c>)
 8001042:	480b      	ldr	r0, [pc, #44]	@ (8001070 <main+0x80>)
 8001044:	f7ff ff94 	bl	8000f70 <print_buffer>
	  LIDAR_get_point(&hlidar);
 8001048:	4805      	ldr	r0, [pc, #20]	@ (8001060 <main+0x70>)
 800104a:	f000 fe17 	bl	8001c7c <LIDAR_get_point>
	  LIDAR_process_frame(&hlidar);
 800104e:	4804      	ldr	r0, [pc, #16]	@ (8001060 <main+0x70>)
 8001050:	f000 fcba 	bl	80019c8 <LIDAR_process_frame>
	  //print_buffer("POINT", hlidar.process_frame.point_buff, POINT_BUFF_SIZE_LIDAR, 20);
	  //LIDAR_median_filter(&hlidar);
	  //print_buffer("FILTERED", hlidar.process_frame.filtered_buff, POINT_BUFF_SIZE_LIDAR, 20);
	  HAL_Delay(5);
 8001054:	2005      	movs	r0, #5
 8001056:	f000 ff7f 	bl	8001f58 <HAL_Delay>
	  print_buffer("DATA", hlidar.data_buff, DATA_BUFF_SIZE_LIDAR, 15);
 800105a:	bf00      	nop
 800105c:	e7ed      	b.n	800103a <main+0x4a>
 800105e:	bf00      	nop
 8001060:	20000258 	.word	0x20000258
 8001064:	0800768c 	.word	0x0800768c
 8001068:	08007694 	.word	0x08007694
 800106c:	20000281 	.word	0x20000281
 8001070:	080076a4 	.word	0x080076a4

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b094      	sub	sp, #80	@ 0x50
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0318 	add.w	r3, r7, #24
 800107e:	2238      	movs	r2, #56	@ 0x38
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f005 fb7e 	bl	8006784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001096:	2000      	movs	r0, #0
 8001098:	f001 fd5c 	bl	8002b54 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	2302      	movs	r3, #2
 80010a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010aa:	2303      	movs	r3, #3
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80010ae:	2306      	movs	r3, #6
 80010b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010b2:	2355      	movs	r3, #85	@ 0x55
 80010b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	f107 0318 	add.w	r3, r7, #24
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 fdf8 	bl	8002cbc <HAL_RCC_OscConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80010d2:	f000 f9d7 	bl	8001484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	230f      	movs	r3, #15
 80010d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	2303      	movs	r3, #3
 80010dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2104      	movs	r1, #4
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 f8f6 	bl	80032e0 <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80010fa:	f000 f9c3 	bl	8001484 <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3750      	adds	r7, #80	@ 0x50
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08e      	sub	sp, #56	@ 0x38
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
 8001136:	615a      	str	r2, [r3, #20]
 8001138:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800113a:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <MX_TIM4_Init+0xe8>)
 800113c:	4a2d      	ldr	r2, [pc, #180]	@ (80011f4 <MX_TIM4_Init+0xec>)
 800113e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001140:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <MX_TIM4_Init+0xe8>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <MX_TIM4_Init+0xe8>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800114c:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <MX_TIM4_Init+0xe8>)
 800114e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001152:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <MX_TIM4_Init+0xe8>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115a:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <MX_TIM4_Init+0xe8>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001160:	4823      	ldr	r0, [pc, #140]	@ (80011f0 <MX_TIM4_Init+0xe8>)
 8001162:	f002 fcc9 	bl	8003af8 <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800116c:	f000 f98a 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001174:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001176:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800117a:	4619      	mov	r1, r3
 800117c:	481c      	ldr	r0, [pc, #112]	@ (80011f0 <MX_TIM4_Init+0xe8>)
 800117e:	f002 fe87 	bl	8003e90 <HAL_TIM_ConfigClockSource>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001188:	f000 f97c 	bl	8001484 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800118c:	4818      	ldr	r0, [pc, #96]	@ (80011f0 <MX_TIM4_Init+0xe8>)
 800118e:	f002 fd0a 	bl	8003ba6 <HAL_TIM_PWM_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001198:	f000 f974 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4811      	ldr	r0, [pc, #68]	@ (80011f0 <MX_TIM4_Init+0xe8>)
 80011ac:	f003 fb98 	bl	80048e0 <HAL_TIMEx_MasterConfigSynchronization>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80011b6:	f000 f965 	bl	8001484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ba:	2360      	movs	r3, #96	@ 0x60
 80011bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011ca:	463b      	mov	r3, r7
 80011cc:	220c      	movs	r2, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	4807      	ldr	r0, [pc, #28]	@ (80011f0 <MX_TIM4_Init+0xe8>)
 80011d2:	f002 fd49 	bl	8003c68 <HAL_TIM_PWM_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80011dc:	f000 f952 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011e0:	4803      	ldr	r0, [pc, #12]	@ (80011f0 <MX_TIM4_Init+0xe8>)
 80011e2:	f000 f999 	bl	8001518 <HAL_TIM_MspPostInit>

}
 80011e6:	bf00      	nop
 80011e8:	3738      	adds	r7, #56	@ 0x38
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000084 	.word	0x20000084
 80011f4:	40000800 	.word	0x40000800

080011f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 80011fe:	4a23      	ldr	r2, [pc, #140]	@ (800128c <MX_USART2_UART_Init+0x94>)
 8001200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001202:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001216:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800123a:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001240:	4811      	ldr	r0, [pc, #68]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 8001242:	f003 fbcf 	bl	80049e4 <HAL_UART_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800124c:	f000 f91a 	bl	8001484 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001250:	2100      	movs	r1, #0
 8001252:	480d      	ldr	r0, [pc, #52]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 8001254:	f004 ffc2 	bl	80061dc <HAL_UARTEx_SetTxFifoThreshold>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800125e:	f000 f911 	bl	8001484 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001262:	2100      	movs	r1, #0
 8001264:	4808      	ldr	r0, [pc, #32]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 8001266:	f004 fff7 	bl	8006258 <HAL_UARTEx_SetRxFifoThreshold>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001270:	f000 f908 	bl	8001484 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001274:	4804      	ldr	r0, [pc, #16]	@ (8001288 <MX_USART2_UART_Init+0x90>)
 8001276:	f004 ff78 	bl	800616a <HAL_UARTEx_DisableFifoMode>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001280:	f000 f900 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200000d0 	.word	0x200000d0
 800128c:	40004400 	.word	0x40004400

08001290 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001294:	4b22      	ldr	r3, [pc, #136]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 8001296:	4a23      	ldr	r2, [pc, #140]	@ (8001324 <MX_USART3_UART_Init+0x94>)
 8001298:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 800129a:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 800129c:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 80012a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c6:	4b16      	ldr	r3, [pc, #88]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012cc:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d2:	4b13      	ldr	r3, [pc, #76]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012d8:	4811      	ldr	r0, [pc, #68]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 80012da:	f003 fb83 	bl	80049e4 <HAL_UART_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012e4:	f000 f8ce 	bl	8001484 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e8:	2100      	movs	r1, #0
 80012ea:	480d      	ldr	r0, [pc, #52]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 80012ec:	f004 ff76 	bl	80061dc <HAL_UARTEx_SetTxFifoThreshold>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012f6:	f000 f8c5 	bl	8001484 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fa:	2100      	movs	r1, #0
 80012fc:	4808      	ldr	r0, [pc, #32]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 80012fe:	f004 ffab 	bl	8006258 <HAL_UARTEx_SetRxFifoThreshold>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001308:	f000 f8bc 	bl	8001484 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800130c:	4804      	ldr	r0, [pc, #16]	@ (8001320 <MX_USART3_UART_Init+0x90>)
 800130e:	f004 ff2c 	bl	800616a <HAL_UARTEx_DisableFifoMode>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001318:	f000 f8b4 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000164 	.word	0x20000164
 8001324:	40004800 	.word	0x40004800

08001328 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800132e:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <MX_DMA_Init+0x50>)
 8001330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001332:	4a11      	ldr	r2, [pc, #68]	@ (8001378 <MX_DMA_Init+0x50>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6493      	str	r3, [r2, #72]	@ 0x48
 800133a:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <MX_DMA_Init+0x50>)
 800133c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <MX_DMA_Init+0x50>)
 8001348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800134a:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <MX_DMA_Init+0x50>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6493      	str	r3, [r2, #72]	@ 0x48
 8001352:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <MX_DMA_Init+0x50>)
 8001354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	200b      	movs	r0, #11
 8001364:	f000 fef5 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001368:	200b      	movs	r0, #11
 800136a:	f000 ff0c 	bl	8002186 <HAL_NVIC_EnableIRQ>

}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	4b39      	ldr	r3, [pc, #228]	@ (8001478 <MX_GPIO_Init+0xfc>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	4a38      	ldr	r2, [pc, #224]	@ (8001478 <MX_GPIO_Init+0xfc>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139e:	4b36      	ldr	r3, [pc, #216]	@ (8001478 <MX_GPIO_Init+0xfc>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013aa:	4b33      	ldr	r3, [pc, #204]	@ (8001478 <MX_GPIO_Init+0xfc>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	4a32      	ldr	r2, [pc, #200]	@ (8001478 <MX_GPIO_Init+0xfc>)
 80013b0:	f043 0320 	orr.w	r3, r3, #32
 80013b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b6:	4b30      	ldr	r3, [pc, #192]	@ (8001478 <MX_GPIO_Init+0xfc>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	f003 0320 	and.w	r3, r3, #32
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001478 <MX_GPIO_Init+0xfc>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001478 <MX_GPIO_Init+0xfc>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001478 <MX_GPIO_Init+0xfc>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	4b27      	ldr	r3, [pc, #156]	@ (8001478 <MX_GPIO_Init+0xfc>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	4a26      	ldr	r2, [pc, #152]	@ (8001478 <MX_GPIO_Init+0xfc>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e6:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <MX_GPIO_Init+0xfc>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2120      	movs	r1, #32
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013fa:	f001 fb93 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	2104      	movs	r1, #4
 8001402:	481e      	ldr	r0, [pc, #120]	@ (800147c <MX_GPIO_Init+0x100>)
 8001404:	f001 fb8e 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEV_EN_LIDAR_GPIO_Port, DEV_EN_LIDAR_Pin, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800140e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001412:	f001 fb87 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001416:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800141c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4814      	ldr	r0, [pc, #80]	@ (8001480 <MX_GPIO_Init+0x104>)
 800142e:	f001 f9f7 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DEV_EN_LIDAR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DEV_EN_LIDAR_Pin;
 8001432:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144e:	f001 f9e7 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : M_EN_LIDAR_Pin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin;
 8001452:	2304      	movs	r3, #4
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EN_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4804      	ldr	r0, [pc, #16]	@ (800147c <MX_GPIO_Init+0x100>)
 800146a:	f001 f9d9 	bl	8002820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	@ 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	48000400 	.word	0x48000400
 8001480:	48000800 	.word	0x48000800

08001484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001488:	b672      	cpsid	i
}
 800148a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <Error_Handler+0x8>

08001490 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <HAL_MspInit+0x44>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800149a:	4a0e      	ldr	r2, [pc, #56]	@ (80014d4 <HAL_MspInit+0x44>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014a2:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <HAL_MspInit+0x44>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_MspInit+0x44>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b2:	4a08      	ldr	r2, [pc, #32]	@ (80014d4 <HAL_MspInit+0x44>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_MspInit+0x44>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014c6:	f001 fbe9 	bl	8002c9c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000

080014d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <HAL_TIM_Base_MspInit+0x38>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d10b      	bne.n	8001502 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <HAL_TIM_Base_MspInit+0x3c>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	4a09      	ldr	r2, [pc, #36]	@ (8001514 <HAL_TIM_Base_MspInit+0x3c>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f6:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <HAL_TIM_Base_MspInit+0x3c>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40000800 	.word	0x40000800
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a11      	ldr	r2, [pc, #68]	@ (800157c <HAL_TIM_MspPostInit+0x64>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d11c      	bne.n	8001574 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <HAL_TIM_MspPostInit+0x68>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	4a10      	ldr	r2, [pc, #64]	@ (8001580 <HAL_TIM_MspPostInit+0x68>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <HAL_TIM_MspPostInit+0x68>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 8001552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001556:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001564:	2302      	movs	r3, #2
 8001566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <HAL_TIM_MspPostInit+0x6c>)
 8001570:	f001 f956 	bl	8002820 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40000800 	.word	0x40000800
 8001580:	40021000 	.word	0x40021000
 8001584:	48000400 	.word	0x48000400

08001588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b09e      	sub	sp, #120	@ 0x78
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	2244      	movs	r2, #68	@ 0x44
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f005 f8eb 	bl	8006784 <memset>
  if(huart->Instance==USART2)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a64      	ldr	r2, [pc, #400]	@ (8001744 <HAL_UART_MspInit+0x1bc>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d153      	bne.n	8001660 <HAL_UART_MspInit+0xd8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 f8a7 	bl	8003718 <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015d0:	f7ff ff58 	bl	8001484 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d8:	4a5b      	ldr	r2, [pc, #364]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 80015da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015de:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e0:	4b59      	ldr	r3, [pc, #356]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	4b56      	ldr	r3, [pc, #344]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f0:	4a55      	ldr	r2, [pc, #340]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f8:	4b53      	ldr	r3, [pc, #332]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001604:	4b50      	ldr	r3, [pc, #320]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001608:	4a4f      	ldr	r2, [pc, #316]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001610:	4b4d      	ldr	r3, [pc, #308]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800161c:	2304      	movs	r3, #4
 800161e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800162c:	2307      	movs	r3, #7
 800162e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800163a:	f001 f8f1 	bl	8002820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800163e:	2310      	movs	r3, #16
 8001640:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800164e:	2307      	movs	r3, #7
 8001650:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001656:	4619      	mov	r1, r3
 8001658:	483c      	ldr	r0, [pc, #240]	@ (800174c <HAL_UART_MspInit+0x1c4>)
 800165a:	f001 f8e1 	bl	8002820 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800165e:	e06d      	b.n	800173c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a3a      	ldr	r2, [pc, #232]	@ (8001750 <HAL_UART_MspInit+0x1c8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d168      	bne.n	800173c <HAL_UART_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800166a:	2304      	movs	r3, #4
 800166c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	4618      	mov	r0, r3
 8001678:	f002 f84e 	bl	8003718 <HAL_RCCEx_PeriphCLKConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8001682:	f7ff feff 	bl	8001484 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001686:	4b30      	ldr	r3, [pc, #192]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168a:	4a2f      	ldr	r2, [pc, #188]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001690:	6593      	str	r3, [r2, #88]	@ 0x58
 8001692:	4b2d      	ldr	r3, [pc, #180]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b2a      	ldr	r3, [pc, #168]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	4a29      	ldr	r2, [pc, #164]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016aa:	4b27      	ldr	r3, [pc, #156]	@ (8001748 <HAL_UART_MspInit+0x1c0>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 80016b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016ba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016c8:	2307      	movs	r3, #7
 80016ca:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016d0:	4619      	mov	r1, r3
 80016d2:	481e      	ldr	r0, [pc, #120]	@ (800174c <HAL_UART_MspInit+0x1c4>)
 80016d4:	f001 f8a4 	bl	8002820 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <HAL_UART_MspInit+0x1cc>)
 80016da:	4a1f      	ldr	r2, [pc, #124]	@ (8001758 <HAL_UART_MspInit+0x1d0>)
 80016dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80016de:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <HAL_UART_MspInit+0x1cc>)
 80016e0:	221c      	movs	r2, #28
 80016e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <HAL_UART_MspInit+0x1cc>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <HAL_UART_MspInit+0x1cc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016f0:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <HAL_UART_MspInit+0x1cc>)
 80016f2:	2280      	movs	r2, #128	@ 0x80
 80016f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <HAL_UART_MspInit+0x1cc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <HAL_UART_MspInit+0x1cc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001702:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <HAL_UART_MspInit+0x1cc>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HAL_UART_MspInit+0x1cc>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800170e:	4811      	ldr	r0, [pc, #68]	@ (8001754 <HAL_UART_MspInit+0x1cc>)
 8001710:	f000 fd54 	bl	80021bc <HAL_DMA_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_UART_MspInit+0x196>
      Error_Handler();
 800171a:	f7ff feb3 	bl	8001484 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a0c      	ldr	r2, [pc, #48]	@ (8001754 <HAL_UART_MspInit+0x1cc>)
 8001722:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001726:	4a0b      	ldr	r2, [pc, #44]	@ (8001754 <HAL_UART_MspInit+0x1cc>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2100      	movs	r1, #0
 8001730:	2027      	movs	r0, #39	@ 0x27
 8001732:	f000 fd0e 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001736:	2027      	movs	r0, #39	@ 0x27
 8001738:	f000 fd25 	bl	8002186 <HAL_NVIC_EnableIRQ>
}
 800173c:	bf00      	nop
 800173e:	3778      	adds	r7, #120	@ 0x78
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40004400 	.word	0x40004400
 8001748:	40021000 	.word	0x40021000
 800174c:	48000400 	.word	0x48000400
 8001750:	40004800 	.word	0x40004800
 8001754:	200001f8 	.word	0x200001f8
 8001758:	40020008 	.word	0x40020008

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <NMI_Handler+0x4>

08001764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <MemManage_Handler+0x4>

08001774 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <UsageFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b2:	f000 fbb3 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <DMA1_Channel1_IRQHandler+0x10>)
 80017c2:	f000 fede 	bl	8002582 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200001f8 	.word	0x200001f8

080017d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <USART3_IRQHandler+0x10>)
 80017d6:	f003 fa2f 	bl	8004c38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000164 	.word	0x20000164

080017e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	e00a      	b.n	800180c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017f6:	f3af 8000 	nop.w
 80017fa:	4601      	mov	r1, r0
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	60ba      	str	r2, [r7, #8]
 8001802:	b2ca      	uxtb	r2, r1
 8001804:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3301      	adds	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	429a      	cmp	r2, r3
 8001812:	dbf0      	blt.n	80017f6 <_read+0x12>
  }

  return len;
 8001814:	687b      	ldr	r3, [r7, #4]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	e009      	b.n	8001844 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	60ba      	str	r2, [r7, #8]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fb87 	bl	8000f4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	dbf1      	blt.n	8001830 <_write+0x12>
  }
  return len;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_close>:

int _close(int file)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800187e:	605a      	str	r2, [r3, #4]
  return 0;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <_isatty>:

int _isatty(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c8:	4a14      	ldr	r2, [pc, #80]	@ (800191c <_sbrk+0x5c>)
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <_sbrk+0x60>)
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d4:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <_sbrk+0x64>)
 80018de:	4a12      	ldr	r2, [pc, #72]	@ (8001928 <_sbrk+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d207      	bcs.n	8001900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f0:	f004 ff96 	bl	8006820 <__errno>
 80018f4:	4603      	mov	r3, r0
 80018f6:	220c      	movs	r2, #12
 80018f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	e009      	b.n	8001914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001906:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	4a05      	ldr	r2, [pc, #20]	@ (8001924 <_sbrk+0x64>)
 8001910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20008000 	.word	0x20008000
 8001920:	00000400 	.word	0x00000400
 8001924:	20001ab8 	.word	0x20001ab8
 8001928:	20001c10 	.word	0x20001c10

0800192c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <SystemInit+0x20>)
 8001932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001936:	4a05      	ldr	r2, [pc, #20]	@ (800194c <SystemInit+0x20>)
 8001938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800193c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <LIDAR_Init>:
uint16_t frame_start = 0, frame_end = 0;
/*
 * @brief Initialization of the lidar
 * @param
 */
void LIDAR_Init(LIDAR_HandleTypeDef_t * hlidar){
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	hlidar->huart = &huart3;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a04      	ldr	r2, [pc, #16]	@ (800196c <LIDAR_Init+0x1c>)
 800195c:	601a      	str	r2, [r3, #0]
	/*
	HAL_GPIO_WritePin(GPIOA, DEV_EN_LIDAR_Pin, GPIO_PIN_SET);
	// Enable M_EN lidar
	HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_SET);*/

}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000164 	.word	0x20000164

08001970 <LIDAR_Start>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Start(LIDAR_HandleTypeDef_t * hlidar){
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	uint8_t lidar_command[2] = {START_CMD_LIDAR, SCAN_CMD_LIDAR};
 8001978:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 800197c:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	f107 010c 	add.w	r1, r7, #12
 8001986:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800198a:	2202      	movs	r2, #2
 800198c:	f003 f87a 	bl	8004a84 <HAL_UART_Transmit>
 8001990:	4603      	mov	r3, r0
 8001992:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10d      	bne.n	80019b6 <LIDAR_Start+0x46>
		HAL_UART_Receive_DMA(hlidar->huart, hlidar->data_buff, DATA_BUFF_SIZE_LIDAR);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3329      	adds	r3, #41	@ 0x29
 80019a2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80019a6:	4619      	mov	r1, r3
 80019a8:	f003 f8fa 	bl	8004ba0 <HAL_UART_Receive_DMA>
		printf("Receive OK\r\n");
 80019ac:	4804      	ldr	r0, [pc, #16]	@ (80019c0 <LIDAR_Start+0x50>)
 80019ae:	f004 fe09 	bl	80065c4 <puts>
		return status;
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	e000      	b.n	80019b8 <LIDAR_Start+0x48>
	}
	else{
		return status;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	080076ac 	.word	0x080076ac
 80019c4:	00000000 	.word	0x00000000

080019c8 <LIDAR_process_frame>:
        }
    }
}
*/

void LIDAR_process_frame(LIDAR_HandleTypeDef_t *hlidar) {
 80019c8:	b5b0      	push	{r4, r5, r7, lr}
 80019ca:	b08c      	sub	sp, #48	@ 0x30
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    uint16_t Si;
    float Di, Ai;
    float AngleFSA = ((float)(hlidar->process_frame.FSA >> 1)) / 64.0; // Angle de départ
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80019d6:	085b      	lsrs	r3, r3, #1
 80019d8:	b29b      	uxth	r3, r3
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e2:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8001c68 <LIDAR_process_frame+0x2a0>
 80019e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ea:	edc7 7a07 	vstr	s15, [r7, #28]
    float AngleLSA = ((float)(hlidar->process_frame.LSA >> 1)) / 64.0; // Angle de fin
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	@ 0x802
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a00:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8001c68 <LIDAR_process_frame+0x2a0>
 8001a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a08:	edc7 7a06 	vstr	s15, [r7, #24]
    float diffAngle = AngleLSA - AngleFSA;
 8001a0c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a10:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a18:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    if (diffAngle < 0) {
 8001a1c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	d507      	bpl.n	8001a3a <LIDAR_process_frame+0x72>
        diffAngle += 360.0; // Gérer le dépassement des 360°
 8001a2a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a2e:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8001c6c <LIDAR_process_frame+0x2a4>
 8001a32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a36:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }

    int LSN = hlidar->process_frame.LSN; // Nombre d'échantillons
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 37ff 	ldrb.w	r3, [r3, #2047]	@ 0x7ff
 8001a40:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < LSN; i++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a46:	e0f8      	b.n	8001c3a <LIDAR_process_frame+0x272>
        // Extraire les données de distance
        Si = hlidar->process_frame.frame_buff[2 * i] | (hlidar->process_frame.frame_buff[2 * i + 1] << 8);
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f893 3807 	ldrb.w	r3, [r3, #2055]	@ 0x807
 8001a54:	b21a      	sxth	r2, r3
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	440b      	add	r3, r1
 8001a60:	f893 3807 	ldrb.w	r3, [r3, #2055]	@ 0x807
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	827b      	strh	r3, [r7, #18]
        Di = Si / 4.0; // Conversion en mm
 8001a6e:	8a7b      	ldrh	r3, [r7, #18]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd77 	bl	8000564 <__aeabi_i2d>
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	4b7d      	ldr	r3, [pc, #500]	@ (8001c70 <LIDAR_process_frame+0x2a8>)
 8001a7c:	f7fe ff06 	bl	800088c <__aeabi_ddiv>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff f898 	bl	8000bbc <__aeabi_d2f>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60fb      	str	r3, [r7, #12]

        // Calcul de l'angle sans correction
        Ai = (diffAngle / (LSN - 1)) * i + AngleFSA;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a9c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001aa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aba:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        if (Ai > 360.0) {
 8001abe:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ac2:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001c6c <LIDAR_process_frame+0x2a4>
 8001ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ace:	dd07      	ble.n	8001ae0 <LIDAR_process_frame+0x118>
            Ai -= 360.0; // Normaliser l'angle à 0-360°
 8001ad0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ad4:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8001c6c <LIDAR_process_frame+0x2a4>
 8001ad8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001adc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Correction de l'angle
        float AngCorrect = 0.0;
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
        if (Di != 0) {
 8001ae6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	d03d      	beq.n	8001b70 <LIDAR_process_frame+0x1a8>
            AngCorrect = atan(21.8 * (155.3 - Di) / (155.3 * Di)) * (180.0 / 3.141592653589793);
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7fe fd47 	bl	8000588 <__aeabi_f2d>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	a154      	add	r1, pc, #336	@ (adr r1, 8001c50 <LIDAR_process_frame+0x288>)
 8001b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b04:	f7fe fbe0 	bl	80002c8 <__aeabi_dsub>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	a351      	add	r3, pc, #324	@ (adr r3, 8001c58 <LIDAR_process_frame+0x290>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fd8f 	bl	8000638 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4614      	mov	r4, r2
 8001b20:	461d      	mov	r5, r3
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f7fe fd30 	bl	8000588 <__aeabi_f2d>
 8001b28:	a349      	add	r3, pc, #292	@ (adr r3, 8001c50 <LIDAR_process_frame+0x288>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fd83 	bl	8000638 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4620      	mov	r0, r4
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f7fe fea7 	bl	800088c <__aeabi_ddiv>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	ec43 2b17 	vmov	d7, r2, r3
 8001b46:	eeb0 0a47 	vmov.f32	s0, s14
 8001b4a:	eef0 0a67 	vmov.f32	s1, s15
 8001b4e:	f005 fb9f 	bl	8007290 <atan>
 8001b52:	ec51 0b10 	vmov	r0, r1, d0
 8001b56:	a342      	add	r3, pc, #264	@ (adr r3, 8001c60 <LIDAR_process_frame+0x298>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fd6c 	bl	8000638 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7ff f828 	bl	8000bbc <__aeabi_d2f>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	623b      	str	r3, [r7, #32]
        }
        Ai += AngCorrect;
 8001b70:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001b74:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        if (Ai < 0) {
 8001b80:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	d508      	bpl.n	8001ba0 <LIDAR_process_frame+0x1d8>
            Ai += 360.0;
 8001b8e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b92:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001c6c <LIDAR_process_frame+0x2a4>
 8001b96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b9a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8001b9e:	e010      	b.n	8001bc2 <LIDAR_process_frame+0x1fa>
        } else if (Ai >= 360.0) {
 8001ba0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ba4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001c6c <LIDAR_process_frame+0x2a4>
 8001ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb0:	db07      	blt.n	8001bc2 <LIDAR_process_frame+0x1fa>
            Ai -= 360.0;
 8001bb2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bb6:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001c6c <LIDAR_process_frame+0x2a4>
 8001bba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bbe:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Index dans le buffer circulaire
        int index = (int)round(Ai);
 8001bc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001bc4:	f7fe fce0 	bl	8000588 <__aeabi_f2d>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	ec43 2b10 	vmov	d0, r2, r3
 8001bd0:	f005 fcfe 	bl	80075d0 <round>
 8001bd4:	ec53 2b10 	vmov	r2, r3, d0
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f7fe ffc6 	bl	8000b6c <__aeabi_d2iz>
 8001be0:	4603      	mov	r3, r0
 8001be2:	60bb      	str	r3, [r7, #8]

        // Filtrage des distances
        if (Di > 1000 || Di < 40) {
 8001be4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001be8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001c74 <LIDAR_process_frame+0x2ac>
 8001bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	dc08      	bgt.n	8001c08 <LIDAR_process_frame+0x240>
 8001bf6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bfa:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001c78 <LIDAR_process_frame+0x2b0>
 8001bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c06:	d508      	bpl.n	8001c1a <LIDAR_process_frame+0x252>
            hlidar->process_frame.point_buff[index] = 0;
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f203 231a 	addw	r3, r3, #538	@ 0x21a
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	2200      	movs	r2, #0
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	e00c      	b.n	8001c34 <LIDAR_process_frame+0x26c>
        } else {
            hlidar->process_frame.point_buff[index] = (int)Di;
 8001c1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c22:	ee17 1a90 	vmov	r1, s15
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f203 231a 	addw	r3, r3, #538	@ 0x21a
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	6059      	str	r1, [r3, #4]
    for (int i = 0; i < LSN; i++) {
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	3301      	adds	r3, #1
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	f6ff af02 	blt.w	8001a48 <LIDAR_process_frame+0x80>
        }
    }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3730      	adds	r7, #48	@ 0x30
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	9999999a 	.word	0x9999999a
 8001c54:	40636999 	.word	0x40636999
 8001c58:	cccccccd 	.word	0xcccccccd
 8001c5c:	4035cccc 	.word	0x4035cccc
 8001c60:	1a63c1f8 	.word	0x1a63c1f8
 8001c64:	404ca5dc 	.word	0x404ca5dc
 8001c68:	42800000 	.word	0x42800000
 8001c6c:	43b40000 	.word	0x43b40000
 8001c70:	40100000 	.word	0x40100000
 8001c74:	447a0000 	.word	0x447a0000
 8001c78:	42200000 	.word	0x42200000

08001c7c <LIDAR_get_point>:

void LIDAR_get_point(LIDAR_HandleTypeDef_t *hlidar) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
    while (i < DATA_BUFF_SIZE_LIDAR) {
 8001c88:	e0c2      	b.n	8001e10 <LIDAR_get_point+0x194>
        if (hlidar->data_buff[i] == 0xA5 && hlidar->data_buff[i + 1] == 0x5A) {
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	4413      	add	r3, r2
 8001c90:	3329      	adds	r3, #41	@ 0x29
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2ba5      	cmp	r3, #165	@ 0xa5
 8001c96:	f040 80b8 	bne.w	8001e0a <LIDAR_get_point+0x18e>
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001ca6:	2b5a      	cmp	r3, #90	@ 0x5a
 8001ca8:	f040 80af 	bne.w	8001e0a <LIDAR_get_point+0x18e>
            // Début de la trame détecté
            hlidar->process_frame.PH = (hlidar->data_buff[i + 1] << 8) | hlidar->data_buff[i];
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3329      	adds	r3, #41	@ 0x29
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8a3 27fc 	strh.w	r2, [r3, #2044]	@ 0x7fc
            hlidar->process_frame.CT = hlidar->data_buff[i + 2];
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f883 27fe 	strb.w	r2, [r3, #2046]	@ 0x7fe
            hlidar->process_frame.LSN = hlidar->data_buff[i + 3];
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3303      	adds	r3, #3
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f883 27ff 	strb.w	r2, [r3, #2047]	@ 0x7ff
            hlidar->process_frame.FSA = (hlidar->data_buff[i + 5] << 8) | hlidar->data_buff[i + 4];
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	3305      	adds	r3, #5
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	440b      	add	r3, r1
 8001d10:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
            hlidar->process_frame.LSA = (hlidar->data_buff[i + 7] << 8) | hlidar->data_buff[i + 6];
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3307      	adds	r3, #7
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3306      	adds	r3, #6
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	440b      	add	r3, r1
 8001d3a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f8a3 2802 	strh.w	r2, [r3, #2050]	@ 0x802
            hlidar->process_frame.CS = (hlidar->data_buff[i + 9] << 8) | hlidar->data_buff[i + 8];
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3309      	adds	r3, #9
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3308      	adds	r3, #8
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	440b      	add	r3, r1
 8001d64:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f8a3 2804 	strh.w	r2, [r3, #2052]	@ 0x804

            // Vérification du checksum
            uint16_t checksum = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	827b      	strh	r3, [r7, #18]
            for (int j = 0; j < (10 + 2 * hlidar->process_frame.LSN); j++) {
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	e00d      	b.n	8001d9c <LIDAR_get_point+0x120>
                checksum ^= hlidar->data_buff[i + j];
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4413      	add	r3, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001d8e:	461a      	mov	r2, r3
 8001d90:	8a7b      	ldrh	r3, [r7, #18]
 8001d92:	4053      	eors	r3, r2
 8001d94:	827b      	strh	r3, [r7, #18]
            for (int j = 0; j < (10 + 2 * hlidar->process_frame.LSN); j++) {
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 37ff 	ldrb.w	r3, [r3, #2047]	@ 0x7ff
 8001da2:	3305      	adds	r3, #5
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	dbe9      	blt.n	8001d80 <LIDAR_get_point+0x104>
            }

            if (checksum == hlidar->process_frame.CS) {
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	@ 0x804
 8001db2:	8a7a      	ldrh	r2, [r7, #18]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d11f      	bne.n	8001df8 <LIDAR_get_point+0x17c>
                // Copie des données de l'échantillon
                for (int k = 0; k < 2 * hlidar->process_frame.LSN; k++) {
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	e012      	b.n	8001de4 <LIDAR_get_point+0x168>
                    hlidar->process_frame.frame_buff[k] = hlidar->data_buff[i + 10 + k];
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f103 020a 	add.w	r2, r3, #10
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f893 1029 	ldrb.w	r1, [r3, #41]	@ 0x29
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f603 0307 	addw	r3, r3, #2055	@ 0x807
 8001dda:	460a      	mov	r2, r1
 8001ddc:	701a      	strb	r2, [r3, #0]
                for (int k = 0; k < 2 * hlidar->process_frame.LSN; k++) {
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3301      	adds	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 37ff 	ldrb.w	r3, [r3, #2047]	@ 0x7ff
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	dbe5      	blt.n	8001dbe <LIDAR_get_point+0x142>
                }

                // Traiter la trame
                LIDAR_process_frame(hlidar);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fde8 	bl	80019c8 <LIDAR_process_frame>
            }

            // Avancer l'index après la trame
            i += 10 + 2 * hlidar->process_frame.LSN;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 37ff 	ldrb.w	r3, [r3, #2047]	@ 0x7ff
 8001dfe:	3305      	adds	r3, #5
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4413      	add	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
        if (hlidar->data_buff[i] == 0xA5 && hlidar->data_buff[i + 1] == 0x5A) {
 8001e08:	e002      	b.n	8001e10 <LIDAR_get_point+0x194>
        } else {
            i++;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
    while (i < DATA_BUFF_SIZE_LIDAR) {
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001e16:	f6ff af38 	blt.w	8001c8a <LIDAR_get_point+0xe>
        }
    }
}
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e24:	480d      	ldr	r0, [pc, #52]	@ (8001e5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e26:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e28:	f7ff fd80 	bl	800192c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e2c:	480c      	ldr	r0, [pc, #48]	@ (8001e60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e2e:	490d      	ldr	r1, [pc, #52]	@ (8001e64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e30:	4a0d      	ldr	r2, [pc, #52]	@ (8001e68 <LoopForever+0xe>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e44:	4c0a      	ldr	r4, [pc, #40]	@ (8001e70 <LoopForever+0x16>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f004 fceb 	bl	800682c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e56:	f7ff f8cb 	bl	8000ff0 <main>

08001e5a <LoopForever>:

LoopForever:
    b LoopForever
 8001e5a:	e7fe      	b.n	8001e5a <LoopForever>
  ldr   r0, =_estack
 8001e5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001e68:	080077a8 	.word	0x080077a8
  ldr r2, =_sbss
 8001e6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001e70:	20001c0c 	.word	0x20001c0c

08001e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC1_2_IRQHandler>

08001e76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 f95b 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 f80e 	bl	8001ea8 <HAL_InitTick>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	71fb      	strb	r3, [r7, #7]
 8001e96:	e001      	b.n	8001e9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e98:	f7ff fafa 	bl	8001490 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e9c:	79fb      	ldrb	r3, [r7, #7]

}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001eb4:	4b16      	ldr	r3, [pc, #88]	@ (8001f10 <HAL_InitTick+0x68>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d022      	beq.n	8001f02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ebc:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_InitTick+0x6c>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <HAL_InitTick+0x68>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 f966 	bl	80021a2 <HAL_SYSTICK_Config>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10f      	bne.n	8001efc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	d809      	bhi.n	8001ef6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eea:	f000 f932 	bl	8002152 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eee:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <HAL_InitTick+0x70>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e007      	b.n	8001f06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	e004      	b.n	8001f06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e001      	b.n	8001f06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000008 	.word	0x20000008
 8001f14:	20000000 	.word	0x20000000
 8001f18:	20000004 	.word	0x20000004

08001f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <HAL_IncTick+0x1c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <HAL_IncTick+0x20>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a03      	ldr	r2, [pc, #12]	@ (8001f38 <HAL_IncTick+0x1c>)
 8001f2c:	6013      	str	r3, [r2, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	20001abc 	.word	0x20001abc
 8001f3c:	20000008 	.word	0x20000008

08001f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	@ (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20001abc 	.word	0x20001abc

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d004      	beq.n	8001f7c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <HAL_Delay+0x40>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7c:	bf00      	nop
 8001f7e:	f7ff ffdf 	bl	8001f40 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d8f7      	bhi.n	8001f7e <HAL_Delay+0x26>
  {
  }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000008 	.word	0x20000008

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	@ (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	@ (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	@ (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	@ 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff8e 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff29 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002160:	f7ff ff40 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002164:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff90 	bl	8002090 <NVIC_EncodePriority>
 8002170:	4602      	mov	r2, r0
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff5f 	bl	800203c <__NVIC_SetPriority>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff33 	bl	8002000 <__NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffa4 	bl	80020f8 <SysTick_Config>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e08d      	b.n	80022ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b47      	ldr	r3, [pc, #284]	@ (80022f4 <HAL_DMA_Init+0x138>)
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d80f      	bhi.n	80021fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	4b45      	ldr	r3, [pc, #276]	@ (80022f8 <HAL_DMA_Init+0x13c>)
 80021e2:	4413      	add	r3, r2
 80021e4:	4a45      	ldr	r2, [pc, #276]	@ (80022fc <HAL_DMA_Init+0x140>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	009a      	lsls	r2, r3, #2
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a42      	ldr	r2, [pc, #264]	@ (8002300 <HAL_DMA_Init+0x144>)
 80021f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80021f8:	e00e      	b.n	8002218 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	4b40      	ldr	r3, [pc, #256]	@ (8002304 <HAL_DMA_Init+0x148>)
 8002202:	4413      	add	r3, r2
 8002204:	4a3d      	ldr	r2, [pc, #244]	@ (80022fc <HAL_DMA_Init+0x140>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	009a      	lsls	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a3c      	ldr	r2, [pc, #240]	@ (8002308 <HAL_DMA_Init+0x14c>)
 8002216:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800222e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002232:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800223c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002248:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002254:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fa76 	bl	800275c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002278:	d102      	bne.n	8002280 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002294:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d010      	beq.n	80022c0 <HAL_DMA_Init+0x104>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d80c      	bhi.n	80022c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fa96 	bl	80027d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	e008      	b.n	80022d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40020407 	.word	0x40020407
 80022f8:	bffdfff8 	.word	0xbffdfff8
 80022fc:	cccccccd 	.word	0xcccccccd
 8002300:	40020000 	.word	0x40020000
 8002304:	bffdfbf8 	.word	0xbffdfbf8
 8002308:	40020400 	.word	0x40020400

0800230c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_DMA_Start_IT+0x20>
 8002328:	2302      	movs	r3, #2
 800232a:	e066      	b.n	80023fa <HAL_DMA_Start_IT+0xee>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d155      	bne.n	80023ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0201 	bic.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f9bb 	bl	80026e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 020e 	orr.w	r2, r2, #14
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e00f      	b.n	80023a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0204 	bic.w	r2, r2, #4
 8002392:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 020a 	orr.w	r2, r2, #10
 80023a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0201 	orr.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e005      	b.n	80023f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80023f4:	2302      	movs	r3, #2
 80023f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d005      	beq.n	8002426 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2204      	movs	r2, #4
 800241e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	e037      	b.n	8002496 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 020e 	bic.w	r2, r2, #14
 8002434:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002440:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002444:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0201 	bic.w	r2, r2, #1
 8002454:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245a:	f003 021f 	and.w	r2, r3, #31
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	2101      	movs	r1, #1
 8002464:	fa01 f202 	lsl.w	r2, r1, r2
 8002468:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002472:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00c      	beq.n	8002496 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002486:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800248a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002494:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d00d      	beq.n	80024e8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2204      	movs	r2, #4
 80024d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	e047      	b.n	8002578 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 020e 	bic.w	r2, r2, #14
 80024f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002512:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002516:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f202 	lsl.w	r2, r1, r2
 800252a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002534:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00c      	beq.n	8002558 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002548:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800254c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002556:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
    }
  }
  return status;
 8002578:	7bfb      	ldrb	r3, [r7, #15]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2204      	movs	r2, #4
 80025a4:	409a      	lsls	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d026      	beq.n	80025fc <HAL_DMA_IRQHandler+0x7a>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d021      	beq.n	80025fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d107      	bne.n	80025d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0204 	bic.w	r2, r2, #4
 80025d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	f003 021f 	and.w	r2, r3, #31
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	2104      	movs	r1, #4
 80025e4:	fa01 f202 	lsl.w	r2, r1, r2
 80025e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d071      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80025fa:	e06c      	b.n	80026d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	2202      	movs	r2, #2
 8002606:	409a      	lsls	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d02e      	beq.n	800266e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d029      	beq.n	800266e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10b      	bne.n	8002640 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 020a 	bic.w	r2, r2, #10
 8002636:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	2102      	movs	r1, #2
 800264e:	fa01 f202 	lsl.w	r2, r1, r2
 8002652:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	2b00      	cmp	r3, #0
 8002662:	d038      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800266c:	e033      	b.n	80026d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	2208      	movs	r2, #8
 8002678:	409a      	lsls	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d02a      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d025      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 020e 	bic.w	r2, r2, #14
 800269a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a0:	f003 021f 	and.w	r2, r3, #31
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f202 	lsl.w	r2, r1, r2
 80026ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d004      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026d6:	bf00      	nop
 80026d8:	bf00      	nop
}
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002708:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	f003 021f 	and.w	r2, r3, #31
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	2101      	movs	r1, #1
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b10      	cmp	r3, #16
 800272c:	d108      	bne.n	8002740 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800273e:	e007      	b.n	8002750 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	60da      	str	r2, [r3, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800276c:	429a      	cmp	r2, r3
 800276e:	d802      	bhi.n	8002776 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002770:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	e001      	b.n	800277a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002776:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002778:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3b08      	subs	r3, #8
 8002786:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	009a      	lsls	r2, r3, #2
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	461a      	mov	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a0b      	ldr	r2, [pc, #44]	@ (80027d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80027a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	2201      	movs	r2, #1
 80027b0:	409a      	lsls	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40020407 	.word	0x40020407
 80027c8:	40020800 	.word	0x40020800
 80027cc:	40020820 	.word	0x40020820
 80027d0:	cccccccd 	.word	0xcccccccd
 80027d4:	40020880 	.word	0x40020880

080027d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	461a      	mov	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a08      	ldr	r2, [pc, #32]	@ (800281c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80027fa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	3b01      	subs	r3, #1
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	2201      	movs	r2, #1
 8002806:	409a      	lsls	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	1000823f 	.word	0x1000823f
 800281c:	40020940 	.word	0x40020940

08002820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800282e:	e15a      	b.n	8002ae6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2101      	movs	r1, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	4013      	ands	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 814c 	beq.w	8002ae0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d005      	beq.n	8002860 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800285c:	2b02      	cmp	r3, #2
 800285e:	d130      	bne.n	80028c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002896:	2201      	movs	r2, #1
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f003 0201 	and.w	r2, r3, #1
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d017      	beq.n	80028fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	2203      	movs	r2, #3
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d123      	bne.n	8002952 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	08da      	lsrs	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3208      	adds	r2, #8
 8002912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	220f      	movs	r2, #15
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	08da      	lsrs	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3208      	adds	r2, #8
 800294c:	6939      	ldr	r1, [r7, #16]
 800294e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	2203      	movs	r2, #3
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0203 	and.w	r2, r3, #3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80a6 	beq.w	8002ae0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002994:	4b5b      	ldr	r3, [pc, #364]	@ (8002b04 <HAL_GPIO_Init+0x2e4>)
 8002996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002998:	4a5a      	ldr	r2, [pc, #360]	@ (8002b04 <HAL_GPIO_Init+0x2e4>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6613      	str	r3, [r2, #96]	@ 0x60
 80029a0:	4b58      	ldr	r3, [pc, #352]	@ (8002b04 <HAL_GPIO_Init+0x2e4>)
 80029a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ac:	4a56      	ldr	r2, [pc, #344]	@ (8002b08 <HAL_GPIO_Init+0x2e8>)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	220f      	movs	r2, #15
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029d6:	d01f      	beq.n	8002a18 <HAL_GPIO_Init+0x1f8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a4c      	ldr	r2, [pc, #304]	@ (8002b0c <HAL_GPIO_Init+0x2ec>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d019      	beq.n	8002a14 <HAL_GPIO_Init+0x1f4>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a4b      	ldr	r2, [pc, #300]	@ (8002b10 <HAL_GPIO_Init+0x2f0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d013      	beq.n	8002a10 <HAL_GPIO_Init+0x1f0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002b14 <HAL_GPIO_Init+0x2f4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00d      	beq.n	8002a0c <HAL_GPIO_Init+0x1ec>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a49      	ldr	r2, [pc, #292]	@ (8002b18 <HAL_GPIO_Init+0x2f8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d007      	beq.n	8002a08 <HAL_GPIO_Init+0x1e8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a48      	ldr	r2, [pc, #288]	@ (8002b1c <HAL_GPIO_Init+0x2fc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d101      	bne.n	8002a04 <HAL_GPIO_Init+0x1e4>
 8002a00:	2305      	movs	r3, #5
 8002a02:	e00a      	b.n	8002a1a <HAL_GPIO_Init+0x1fa>
 8002a04:	2306      	movs	r3, #6
 8002a06:	e008      	b.n	8002a1a <HAL_GPIO_Init+0x1fa>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	e006      	b.n	8002a1a <HAL_GPIO_Init+0x1fa>
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e004      	b.n	8002a1a <HAL_GPIO_Init+0x1fa>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e002      	b.n	8002a1a <HAL_GPIO_Init+0x1fa>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_GPIO_Init+0x1fa>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	f002 0203 	and.w	r2, r2, #3
 8002a20:	0092      	lsls	r2, r2, #2
 8002a22:	4093      	lsls	r3, r2
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a2a:	4937      	ldr	r1, [pc, #220]	@ (8002b08 <HAL_GPIO_Init+0x2e8>)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	3302      	adds	r3, #2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a38:	4b39      	ldr	r3, [pc, #228]	@ (8002b20 <HAL_GPIO_Init+0x300>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a5c:	4a30      	ldr	r2, [pc, #192]	@ (8002b20 <HAL_GPIO_Init+0x300>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a62:	4b2f      	ldr	r3, [pc, #188]	@ (8002b20 <HAL_GPIO_Init+0x300>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a86:	4a26      	ldr	r2, [pc, #152]	@ (8002b20 <HAL_GPIO_Init+0x300>)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a8c:	4b24      	ldr	r3, [pc, #144]	@ (8002b20 <HAL_GPIO_Init+0x300>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <HAL_GPIO_Init+0x300>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <HAL_GPIO_Init+0x300>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ada:	4a11      	ldr	r2, [pc, #68]	@ (8002b20 <HAL_GPIO_Init+0x300>)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f47f ae9d 	bne.w	8002830 <HAL_GPIO_Init+0x10>
  }
}
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	48000400 	.word	0x48000400
 8002b10:	48000800 	.word	0x48000800
 8002b14:	48000c00 	.word	0x48000c00
 8002b18:	48001000 	.word	0x48001000
 8002b1c:	48001400 	.word	0x48001400
 8002b20:	40010400 	.word	0x40010400

08002b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
 8002b30:	4613      	mov	r3, r2
 8002b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b34:	787b      	ldrb	r3, [r7, #1]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b40:	e002      	b.n	8002b48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d141      	bne.n	8002be6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b62:	4b4b      	ldr	r3, [pc, #300]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b6e:	d131      	bne.n	8002bd4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b70:	4b47      	ldr	r3, [pc, #284]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b76:	4a46      	ldr	r2, [pc, #280]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b80:	4b43      	ldr	r3, [pc, #268]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b88:	4a41      	ldr	r2, [pc, #260]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b90:	4b40      	ldr	r3, [pc, #256]	@ (8002c94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2232      	movs	r2, #50	@ 0x32
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	0c9b      	lsrs	r3, r3, #18
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ba6:	e002      	b.n	8002bae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bae:	4b38      	ldr	r3, [pc, #224]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bba:	d102      	bne.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f2      	bne.n	8002ba8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bc2:	4b33      	ldr	r3, [pc, #204]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bce:	d158      	bne.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e057      	b.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bda:	4a2d      	ldr	r2, [pc, #180]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002be0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002be4:	e04d      	b.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bec:	d141      	bne.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bee:	4b28      	ldr	r3, [pc, #160]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfa:	d131      	bne.n	8002c60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bfc:	4b24      	ldr	r3, [pc, #144]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c02:	4a23      	ldr	r2, [pc, #140]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c0c:	4b20      	ldr	r3, [pc, #128]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c14:	4a1e      	ldr	r2, [pc, #120]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2232      	movs	r2, #50	@ 0x32
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	4a1c      	ldr	r2, [pc, #112]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	0c9b      	lsrs	r3, r3, #18
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c32:	e002      	b.n	8002c3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3a:	4b15      	ldr	r3, [pc, #84]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c46:	d102      	bne.n	8002c4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f2      	bne.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c4e:	4b10      	ldr	r3, [pc, #64]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c5a:	d112      	bne.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e011      	b.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c60:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c70:	e007      	b.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c72:	4b07      	ldr	r3, [pc, #28]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c7a:	4a05      	ldr	r2, [pc, #20]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c80:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40007000 	.word	0x40007000
 8002c94:	20000000 	.word	0x20000000
 8002c98:	431bde83 	.word	0x431bde83

08002c9c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ca0:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a04      	ldr	r2, [pc, #16]	@ (8002cb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ca6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002caa:	6093      	str	r3, [r2, #8]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40007000 	.word	0x40007000

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e2fe      	b.n	80032cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d075      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cda:	4b97      	ldr	r3, [pc, #604]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ce4:	4b94      	ldr	r3, [pc, #592]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	d102      	bne.n	8002cfa <HAL_RCC_OscConfig+0x3e>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_OscConfig+0x44>
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	4b8d      	ldr	r3, [pc, #564]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05b      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x108>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d157      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e2d9      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x74>
 8002d22:	4b85      	ldr	r3, [pc, #532]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a84      	ldr	r2, [pc, #528]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e01d      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b7c      	ldr	r3, [pc, #496]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7b      	ldr	r2, [pc, #492]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d54:	4b78      	ldr	r3, [pc, #480]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a77      	ldr	r2, [pc, #476]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b75      	ldr	r3, [pc, #468]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a74      	ldr	r2, [pc, #464]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7ff f8e4 	bl	8001f40 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7ff f8e0 	bl	8001f40 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	@ 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e29e      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0xc0>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7ff f8d0 	bl	8001f40 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da4:	f7ff f8cc 	bl	8001f40 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	@ 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e28a      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002db6:	4b60      	ldr	r3, [pc, #384]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0xe8>
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d075      	beq.n	8002ebe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd2:	4b59      	ldr	r3, [pc, #356]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ddc:	4b56      	ldr	r3, [pc, #344]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b0c      	cmp	r3, #12
 8002dea:	d102      	bne.n	8002df2 <HAL_RCC_OscConfig+0x136>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d002      	beq.n	8002df8 <HAL_RCC_OscConfig+0x13c>
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d11f      	bne.n	8002e38 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002df8:	4b4f      	ldr	r3, [pc, #316]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_OscConfig+0x154>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e25d      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e10:	4b49      	ldr	r3, [pc, #292]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	061b      	lsls	r3, r3, #24
 8002e1e:	4946      	ldr	r1, [pc, #280]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e24:	4b45      	ldr	r3, [pc, #276]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff f83d 	bl	8001ea8 <HAL_InitTick>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d043      	beq.n	8002ebc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e249      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d023      	beq.n	8002e88 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e40:	4b3d      	ldr	r3, [pc, #244]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a3c      	ldr	r2, [pc, #240]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7ff f878 	bl	8001f40 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e54:	f7ff f874 	bl	8001f40 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e232      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e66:	4b34      	ldr	r3, [pc, #208]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e72:	4b31      	ldr	r3, [pc, #196]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	061b      	lsls	r3, r3, #24
 8002e80:	492d      	ldr	r1, [pc, #180]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]
 8002e86:	e01a      	b.n	8002ebe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e88:	4b2b      	ldr	r3, [pc, #172]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a2a      	ldr	r2, [pc, #168]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7ff f854 	bl	8001f40 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e9c:	f7ff f850 	bl	8001f40 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e20e      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eae:	4b22      	ldr	r3, [pc, #136]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x1e0>
 8002eba:	e000      	b.n	8002ebe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ebc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d041      	beq.n	8002f4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01c      	beq.n	8002f0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed2:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ed8:	4a17      	ldr	r2, [pc, #92]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee2:	f7ff f82d 	bl	8001f40 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eea:	f7ff f829 	bl	8001f40 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e1e7      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002efc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0ef      	beq.n	8002eea <HAL_RCC_OscConfig+0x22e>
 8002f0a:	e020      	b.n	8002f4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f12:	4a09      	ldr	r2, [pc, #36]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7ff f810 	bl	8001f40 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f22:	e00d      	b.n	8002f40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f24:	f7ff f80c 	bl	8001f40 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d906      	bls.n	8002f40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e1ca      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f40:	4b8c      	ldr	r3, [pc, #560]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1ea      	bne.n	8002f24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80a6 	beq.w	80030a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f60:	4b84      	ldr	r3, [pc, #528]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_OscConfig+0x2b4>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x2b6>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	4b7f      	ldr	r3, [pc, #508]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7a:	4a7e      	ldr	r2, [pc, #504]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f82:	4b7c      	ldr	r3, [pc, #496]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f92:	4b79      	ldr	r3, [pc, #484]	@ (8003178 <HAL_RCC_OscConfig+0x4bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f9e:	4b76      	ldr	r3, [pc, #472]	@ (8003178 <HAL_RCC_OscConfig+0x4bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a75      	ldr	r2, [pc, #468]	@ (8003178 <HAL_RCC_OscConfig+0x4bc>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7fe ffc9 	bl	8001f40 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fe ffc5 	bl	8001f40 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e183      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc4:	4b6c      	ldr	r3, [pc, #432]	@ (8003178 <HAL_RCC_OscConfig+0x4bc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d108      	bne.n	8002fea <HAL_RCC_OscConfig+0x32e>
 8002fd8:	4b66      	ldr	r3, [pc, #408]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fde:	4a65      	ldr	r2, [pc, #404]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fe8:	e024      	b.n	8003034 <HAL_RCC_OscConfig+0x378>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d110      	bne.n	8003014 <HAL_RCC_OscConfig+0x358>
 8002ff2:	4b60      	ldr	r3, [pc, #384]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff8:	4a5e      	ldr	r2, [pc, #376]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002ffa:	f043 0304 	orr.w	r3, r3, #4
 8002ffe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003002:	4b5c      	ldr	r3, [pc, #368]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003008:	4a5a      	ldr	r2, [pc, #360]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003012:	e00f      	b.n	8003034 <HAL_RCC_OscConfig+0x378>
 8003014:	4b57      	ldr	r3, [pc, #348]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301a:	4a56      	ldr	r2, [pc, #344]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003024:	4b53      	ldr	r3, [pc, #332]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302a:	4a52      	ldr	r2, [pc, #328]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d016      	beq.n	800306a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fe ff80 	bl	8001f40 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003044:	f7fe ff7c 	bl	8001f40 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e138      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305a:	4b46      	ldr	r3, [pc, #280]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ed      	beq.n	8003044 <HAL_RCC_OscConfig+0x388>
 8003068:	e015      	b.n	8003096 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306a:	f7fe ff69 	bl	8001f40 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7fe ff65 	bl	8001f40 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e121      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003088:	4b3a      	ldr	r3, [pc, #232]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1ed      	bne.n	8003072 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003096:	7ffb      	ldrb	r3, [r7, #31]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d105      	bne.n	80030a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309c:	4b35      	ldr	r3, [pc, #212]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 800309e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a0:	4a34      	ldr	r2, [pc, #208]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 80030a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d03c      	beq.n	800312e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d01c      	beq.n	80030f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 80030be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030cc:	f7fe ff38 	bl	8001f40 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030d4:	f7fe ff34 	bl	8001f40 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0f2      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030e6:	4b23      	ldr	r3, [pc, #140]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 80030e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ef      	beq.n	80030d4 <HAL_RCC_OscConfig+0x418>
 80030f4:	e01b      	b.n	800312e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 80030f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 80030fe:	f023 0301 	bic.w	r3, r3, #1
 8003102:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fe ff1b 	bl	8001f40 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800310e:	f7fe ff17 	bl	8001f40 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e0d5      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003120:	4b14      	ldr	r3, [pc, #80]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8003122:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1ef      	bne.n	800310e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80c9 	beq.w	80032ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003138:	4b0e      	ldr	r3, [pc, #56]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b0c      	cmp	r3, #12
 8003142:	f000 8083 	beq.w	800324c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d15e      	bne.n	800320c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314e:	4b09      	ldr	r3, [pc, #36]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a08      	ldr	r2, [pc, #32]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8003154:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7fe fef1 	bl	8001f40 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003160:	e00c      	b.n	800317c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003162:	f7fe feed 	bl	8001f40 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d905      	bls.n	800317c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e0ab      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
 8003174:	40021000 	.word	0x40021000
 8003178:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800317c:	4b55      	ldr	r3, [pc, #340]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1ec      	bne.n	8003162 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003188:	4b52      	ldr	r3, [pc, #328]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	4b52      	ldr	r3, [pc, #328]	@ (80032d8 <HAL_RCC_OscConfig+0x61c>)
 800318e:	4013      	ands	r3, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6a11      	ldr	r1, [r2, #32]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003198:	3a01      	subs	r2, #1
 800319a:	0112      	lsls	r2, r2, #4
 800319c:	4311      	orrs	r1, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80031a2:	0212      	lsls	r2, r2, #8
 80031a4:	4311      	orrs	r1, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80031aa:	0852      	lsrs	r2, r2, #1
 80031ac:	3a01      	subs	r2, #1
 80031ae:	0552      	lsls	r2, r2, #21
 80031b0:	4311      	orrs	r1, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031b6:	0852      	lsrs	r2, r2, #1
 80031b8:	3a01      	subs	r2, #1
 80031ba:	0652      	lsls	r2, r2, #25
 80031bc:	4311      	orrs	r1, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80031c2:	06d2      	lsls	r2, r2, #27
 80031c4:	430a      	orrs	r2, r1
 80031c6:	4943      	ldr	r1, [pc, #268]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031cc:	4b41      	ldr	r3, [pc, #260]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a40      	ldr	r2, [pc, #256]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 80031d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031d8:	4b3e      	ldr	r3, [pc, #248]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a3d      	ldr	r2, [pc, #244]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 80031de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe feac 	bl	8001f40 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fe fea8 	bl	8001f40 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e066      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fe:	4b35      	ldr	r3, [pc, #212]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x530>
 800320a:	e05e      	b.n	80032ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320c:	4b31      	ldr	r3, [pc, #196]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a30      	ldr	r2, [pc, #192]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 8003212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe fe92 	bl	8001f40 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003220:	f7fe fe8e 	bl	8001f40 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e04c      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003232:	4b28      	ldr	r3, [pc, #160]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800323e:	4b25      	ldr	r3, [pc, #148]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	4924      	ldr	r1, [pc, #144]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 8003244:	4b25      	ldr	r3, [pc, #148]	@ (80032dc <HAL_RCC_OscConfig+0x620>)
 8003246:	4013      	ands	r3, r2
 8003248:	60cb      	str	r3, [r1, #12]
 800324a:	e03e      	b.n	80032ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e039      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003258:	4b1e      	ldr	r3, [pc, #120]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0203 	and.w	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	429a      	cmp	r2, r3
 800326a:	d12c      	bne.n	80032c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	3b01      	subs	r3, #1
 8003278:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d123      	bne.n	80032c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800328a:	429a      	cmp	r2, r3
 800328c:	d11b      	bne.n	80032c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800329a:	429a      	cmp	r2, r3
 800329c:	d113      	bne.n	80032c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	3b01      	subs	r3, #1
 80032ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d109      	bne.n	80032c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	3b01      	subs	r3, #1
 80032c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40021000 	.word	0x40021000
 80032d8:	019f800c 	.word	0x019f800c
 80032dc:	feeefffc 	.word	0xfeeefffc

080032e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e11e      	b.n	8003536 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032f8:	4b91      	ldr	r3, [pc, #580]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d910      	bls.n	8003328 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b8e      	ldr	r3, [pc, #568]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 020f 	bic.w	r2, r3, #15
 800330e:	498c      	ldr	r1, [pc, #560]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b8a      	ldr	r3, [pc, #552]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e106      	b.n	8003536 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d073      	beq.n	800341c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d129      	bne.n	8003390 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800333c:	4b81      	ldr	r3, [pc, #516]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0f4      	b.n	8003536 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800334c:	f000 f99e 	bl	800368c <RCC_GetSysClockFreqFromPLLSource>
 8003350:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4a7c      	ldr	r2, [pc, #496]	@ (8003548 <HAL_RCC_ClockConfig+0x268>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d93f      	bls.n	80033da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800335a:	4b7a      	ldr	r3, [pc, #488]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800336e:	2b00      	cmp	r3, #0
 8003370:	d033      	beq.n	80033da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003376:	2b00      	cmp	r3, #0
 8003378:	d12f      	bne.n	80033da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800337a:	4b72      	ldr	r3, [pc, #456]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003382:	4a70      	ldr	r2, [pc, #448]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 8003384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003388:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800338a:	2380      	movs	r3, #128	@ 0x80
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	e024      	b.n	80033da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003398:	4b6a      	ldr	r3, [pc, #424]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0c6      	b.n	8003536 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a8:	4b66      	ldr	r3, [pc, #408]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0be      	b.n	8003536 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033b8:	f000 f8ce 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4a61      	ldr	r2, [pc, #388]	@ (8003548 <HAL_RCC_ClockConfig+0x268>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d909      	bls.n	80033da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033ce:	4a5d      	ldr	r2, [pc, #372]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80033d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033d6:	2380      	movs	r3, #128	@ 0x80
 80033d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033da:	4b5a      	ldr	r3, [pc, #360]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f023 0203 	bic.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4957      	ldr	r1, [pc, #348]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ec:	f7fe fda8 	bl	8001f40 <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	e00a      	b.n	800340a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f4:	f7fe fda4 	bl	8001f40 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e095      	b.n	8003536 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	4b4e      	ldr	r3, [pc, #312]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 020c 	and.w	r2, r3, #12
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	429a      	cmp	r2, r3
 800341a:	d1eb      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d023      	beq.n	8003470 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003434:	4b43      	ldr	r3, [pc, #268]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a42      	ldr	r2, [pc, #264]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800343a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800343e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800344c:	4b3d      	ldr	r3, [pc, #244]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003454:	4a3b      	ldr	r2, [pc, #236]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 8003456:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800345a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800345c:	4b39      	ldr	r3, [pc, #228]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4936      	ldr	r1, [pc, #216]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800346a:	4313      	orrs	r3, r2
 800346c:	608b      	str	r3, [r1, #8]
 800346e:	e008      	b.n	8003482 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b80      	cmp	r3, #128	@ 0x80
 8003474:	d105      	bne.n	8003482 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003476:	4b33      	ldr	r3, [pc, #204]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	4a32      	ldr	r2, [pc, #200]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800347c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003480:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003482:	4b2f      	ldr	r3, [pc, #188]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d21d      	bcs.n	80034cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003490:	4b2b      	ldr	r3, [pc, #172]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 020f 	bic.w	r2, r3, #15
 8003498:	4929      	ldr	r1, [pc, #164]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	4313      	orrs	r3, r2
 800349e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034a0:	f7fe fd4e 	bl	8001f40 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a8:	f7fe fd4a 	bl	8001f40 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e03b      	b.n	8003536 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b20      	ldr	r3, [pc, #128]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d1ed      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4917      	ldr	r1, [pc, #92]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f6:	4b13      	ldr	r3, [pc, #76]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	490f      	ldr	r1, [pc, #60]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800350a:	f000 f825 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 800350e:	4602      	mov	r2, r0
 8003510:	4b0c      	ldr	r3, [pc, #48]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	490c      	ldr	r1, [pc, #48]	@ (800354c <HAL_RCC_ClockConfig+0x26c>)
 800351c:	5ccb      	ldrb	r3, [r1, r3]
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	fa22 f303 	lsr.w	r3, r2, r3
 8003526:	4a0a      	ldr	r2, [pc, #40]	@ (8003550 <HAL_RCC_ClockConfig+0x270>)
 8003528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800352a:	4b0a      	ldr	r3, [pc, #40]	@ (8003554 <HAL_RCC_ClockConfig+0x274>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe fcba 	bl	8001ea8 <HAL_InitTick>
 8003534:	4603      	mov	r3, r0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40022000 	.word	0x40022000
 8003544:	40021000 	.word	0x40021000
 8003548:	04c4b400 	.word	0x04c4b400
 800354c:	080076e4 	.word	0x080076e4
 8003550:	20000000 	.word	0x20000000
 8003554:	20000004 	.word	0x20000004

08003558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800355e:	4b2c      	ldr	r3, [pc, #176]	@ (8003610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b04      	cmp	r3, #4
 8003568:	d102      	bne.n	8003570 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800356a:	4b2a      	ldr	r3, [pc, #168]	@ (8003614 <HAL_RCC_GetSysClockFreq+0xbc>)
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	e047      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003570:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b08      	cmp	r3, #8
 800357a:	d102      	bne.n	8003582 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800357c:	4b26      	ldr	r3, [pc, #152]	@ (8003618 <HAL_RCC_GetSysClockFreq+0xc0>)
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	e03e      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003582:	4b23      	ldr	r3, [pc, #140]	@ (8003610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b0c      	cmp	r3, #12
 800358c:	d136      	bne.n	80035fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800358e:	4b20      	ldr	r3, [pc, #128]	@ (8003610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003598:	4b1d      	ldr	r3, [pc, #116]	@ (8003610 <HAL_RCC_GetSysClockFreq+0xb8>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	3301      	adds	r3, #1
 80035a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d10c      	bne.n	80035c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003618 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	4a16      	ldr	r2, [pc, #88]	@ (8003610 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b6:	68d2      	ldr	r2, [r2, #12]
 80035b8:	0a12      	lsrs	r2, r2, #8
 80035ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	617b      	str	r3, [r7, #20]
      break;
 80035c4:	e00c      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035c6:	4a13      	ldr	r2, [pc, #76]	@ (8003614 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ce:	4a10      	ldr	r2, [pc, #64]	@ (8003610 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d0:	68d2      	ldr	r2, [r2, #12]
 80035d2:	0a12      	lsrs	r2, r2, #8
 80035d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035d8:	fb02 f303 	mul.w	r3, r2, r3
 80035dc:	617b      	str	r3, [r7, #20]
      break;
 80035de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	0e5b      	lsrs	r3, r3, #25
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	3301      	adds	r3, #1
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	e001      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003600:	693b      	ldr	r3, [r7, #16]
}
 8003602:	4618      	mov	r0, r3
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
 8003614:	00f42400 	.word	0x00f42400
 8003618:	016e3600 	.word	0x016e3600

0800361c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003620:	4b03      	ldr	r3, [pc, #12]	@ (8003630 <HAL_RCC_GetHCLKFreq+0x14>)
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000000 	.word	0x20000000

08003634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003638:	f7ff fff0 	bl	800361c <HAL_RCC_GetHCLKFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	4904      	ldr	r1, [pc, #16]	@ (800365c <HAL_RCC_GetPCLK1Freq+0x28>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40021000 	.word	0x40021000
 800365c:	080076f4 	.word	0x080076f4

08003660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003664:	f7ff ffda 	bl	800361c <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <HAL_RCC_GetPCLK2Freq+0x24>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	0adb      	lsrs	r3, r3, #11
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4904      	ldr	r1, [pc, #16]	@ (8003688 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	080076f4 	.word	0x080076f4

0800368c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003692:	4b1e      	ldr	r3, [pc, #120]	@ (800370c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800369c:	4b1b      	ldr	r3, [pc, #108]	@ (800370c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	3301      	adds	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d10c      	bne.n	80036ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036b0:	4a17      	ldr	r2, [pc, #92]	@ (8003710 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b8:	4a14      	ldr	r2, [pc, #80]	@ (800370c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ba:	68d2      	ldr	r2, [r2, #12]
 80036bc:	0a12      	lsrs	r2, r2, #8
 80036be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	617b      	str	r3, [r7, #20]
    break;
 80036c8:	e00c      	b.n	80036e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036ca:	4a12      	ldr	r2, [pc, #72]	@ (8003714 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	4a0e      	ldr	r2, [pc, #56]	@ (800370c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036d4:	68d2      	ldr	r2, [r2, #12]
 80036d6:	0a12      	lsrs	r2, r2, #8
 80036d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036dc:	fb02 f303 	mul.w	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
    break;
 80036e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036e4:	4b09      	ldr	r3, [pc, #36]	@ (800370c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	0e5b      	lsrs	r3, r3, #25
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	3301      	adds	r3, #1
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80036fe:	687b      	ldr	r3, [r7, #4]
}
 8003700:	4618      	mov	r0, r3
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	40021000 	.word	0x40021000
 8003710:	016e3600 	.word	0x016e3600
 8003714:	00f42400 	.word	0x00f42400

08003718 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003720:	2300      	movs	r3, #0
 8003722:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003724:	2300      	movs	r3, #0
 8003726:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 8098 	beq.w	8003866 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003736:	2300      	movs	r3, #0
 8003738:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373a:	4b43      	ldr	r3, [pc, #268]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800373c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10d      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003746:	4b40      	ldr	r3, [pc, #256]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	4a3f      	ldr	r2, [pc, #252]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003750:	6593      	str	r3, [r2, #88]	@ 0x58
 8003752:	4b3d      	ldr	r3, [pc, #244]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375e:	2301      	movs	r3, #1
 8003760:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003762:	4b3a      	ldr	r3, [pc, #232]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a39      	ldr	r2, [pc, #228]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800376e:	f7fe fbe7 	bl	8001f40 <HAL_GetTick>
 8003772:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003774:	e009      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003776:	f7fe fbe3 	bl	8001f40 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d902      	bls.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	74fb      	strb	r3, [r7, #19]
        break;
 8003788:	e005      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800378a:	4b30      	ldr	r3, [pc, #192]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0ef      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003796:	7cfb      	ldrb	r3, [r7, #19]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d159      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800379c:	4b2a      	ldr	r3, [pc, #168]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01e      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d019      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037b8:	4b23      	ldr	r3, [pc, #140]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037c4:	4b20      	ldr	r3, [pc, #128]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037da:	4a1b      	ldr	r2, [pc, #108]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037e4:	4a18      	ldr	r2, [pc, #96]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d016      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f6:	f7fe fba3 	bl	8001f40 <HAL_GetTick>
 80037fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037fc:	e00b      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fe fb9f 	bl	8001f40 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d902      	bls.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	74fb      	strb	r3, [r7, #19]
            break;
 8003814:	e006      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003816:	4b0c      	ldr	r3, [pc, #48]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ec      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10b      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800382a:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003830:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003838:	4903      	ldr	r1, [pc, #12]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003840:	e008      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003842:	7cfb      	ldrb	r3, [r7, #19]
 8003844:	74bb      	strb	r3, [r7, #18]
 8003846:	e005      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003848:	40021000 	.word	0x40021000
 800384c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003854:	7c7b      	ldrb	r3, [r7, #17]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d105      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385a:	4ba6      	ldr	r3, [pc, #664]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800385c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385e:	4aa5      	ldr	r2, [pc, #660]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003860:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003864:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003872:	4ba0      	ldr	r3, [pc, #640]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003878:	f023 0203 	bic.w	r2, r3, #3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	499c      	ldr	r1, [pc, #624]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003894:	4b97      	ldr	r3, [pc, #604]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389a:	f023 020c 	bic.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	4994      	ldr	r1, [pc, #592]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038b6:	4b8f      	ldr	r3, [pc, #572]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	498b      	ldr	r1, [pc, #556]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038d8:	4b86      	ldr	r3, [pc, #536]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	4983      	ldr	r1, [pc, #524]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038fa:	4b7e      	ldr	r3, [pc, #504]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003900:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	497a      	ldr	r1, [pc, #488]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800391c:	4b75      	ldr	r3, [pc, #468]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003922:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	4972      	ldr	r1, [pc, #456]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800393e:	4b6d      	ldr	r3, [pc, #436]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003944:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4969      	ldr	r1, [pc, #420]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003960:	4b64      	ldr	r3, [pc, #400]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003966:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	4961      	ldr	r1, [pc, #388]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003982:	4b5c      	ldr	r3, [pc, #368]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003988:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	4958      	ldr	r1, [pc, #352]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d015      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039a4:	4b53      	ldr	r3, [pc, #332]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b2:	4950      	ldr	r1, [pc, #320]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039c2:	d105      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c4:	4b4b      	ldr	r3, [pc, #300]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a4a      	ldr	r2, [pc, #296]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d015      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039dc:	4b45      	ldr	r3, [pc, #276]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	4942      	ldr	r1, [pc, #264]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039fa:	d105      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039fc:	4b3d      	ldr	r3, [pc, #244]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a3c      	ldr	r2, [pc, #240]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a06:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a14:	4b37      	ldr	r3, [pc, #220]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	4934      	ldr	r1, [pc, #208]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a32:	d105      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a34:	4b2f      	ldr	r3, [pc, #188]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a2e      	ldr	r2, [pc, #184]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d015      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a4c:	4b29      	ldr	r3, [pc, #164]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5a:	4926      	ldr	r1, [pc, #152]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a6a:	d105      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a6c:	4b21      	ldr	r3, [pc, #132]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a20      	ldr	r2, [pc, #128]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d015      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a84:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a92:	4918      	ldr	r1, [pc, #96]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aa2:	d105      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aa4:	4b13      	ldr	r3, [pc, #76]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4a12      	ldr	r2, [pc, #72]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d015      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003abc:	4b0d      	ldr	r3, [pc, #52]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aca:	490a      	ldr	r1, [pc, #40]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ada:	d105      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003adc:	4b05      	ldr	r3, [pc, #20]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4a04      	ldr	r2, [pc, #16]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ae8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000

08003af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e049      	b.n	8003b9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd fcda 	bl	80014d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f000 faa4 	bl	8004084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e049      	b.n	8003c4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f841 	bl	8003c54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4619      	mov	r1, r3
 8003be4:	4610      	mov	r0, r2
 8003be6:	f000 fa4d 	bl	8004084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e0ff      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b14      	cmp	r3, #20
 8003c92:	f200 80f0 	bhi.w	8003e76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c96:	a201      	add	r2, pc, #4	@ (adr r2, 8003c9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cf1 	.word	0x08003cf1
 8003ca0:	08003e77 	.word	0x08003e77
 8003ca4:	08003e77 	.word	0x08003e77
 8003ca8:	08003e77 	.word	0x08003e77
 8003cac:	08003d31 	.word	0x08003d31
 8003cb0:	08003e77 	.word	0x08003e77
 8003cb4:	08003e77 	.word	0x08003e77
 8003cb8:	08003e77 	.word	0x08003e77
 8003cbc:	08003d73 	.word	0x08003d73
 8003cc0:	08003e77 	.word	0x08003e77
 8003cc4:	08003e77 	.word	0x08003e77
 8003cc8:	08003e77 	.word	0x08003e77
 8003ccc:	08003db3 	.word	0x08003db3
 8003cd0:	08003e77 	.word	0x08003e77
 8003cd4:	08003e77 	.word	0x08003e77
 8003cd8:	08003e77 	.word	0x08003e77
 8003cdc:	08003df5 	.word	0x08003df5
 8003ce0:	08003e77 	.word	0x08003e77
 8003ce4:	08003e77 	.word	0x08003e77
 8003ce8:	08003e77 	.word	0x08003e77
 8003cec:	08003e35 	.word	0x08003e35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fa60 	bl	80041bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0208 	orr.w	r2, r2, #8
 8003d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0204 	bic.w	r2, r2, #4
 8003d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6999      	ldr	r1, [r3, #24]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	619a      	str	r2, [r3, #24]
      break;
 8003d2e:	e0a5      	b.n	8003e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fad0 	bl	80042dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	021a      	lsls	r2, r3, #8
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	619a      	str	r2, [r3, #24]
      break;
 8003d70:	e084      	b.n	8003e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fb39 	bl	80043f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0208 	orr.w	r2, r2, #8
 8003d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0204 	bic.w	r2, r2, #4
 8003d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69d9      	ldr	r1, [r3, #28]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	61da      	str	r2, [r3, #28]
      break;
 8003db0:	e064      	b.n	8003e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fba1 	bl	8004500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	021a      	lsls	r2, r3, #8
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	61da      	str	r2, [r3, #28]
      break;
 8003df2:	e043      	b.n	8003e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fc0a 	bl	8004614 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0208 	orr.w	r2, r2, #8
 8003e0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0204 	bic.w	r2, r2, #4
 8003e1e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e32:	e023      	b.n	8003e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fc4e 	bl	80046dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e5e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	021a      	lsls	r2, r3, #8
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e74:	e002      	b.n	8003e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	75fb      	strb	r3, [r7, #23]
      break;
 8003e7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop

08003e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_TIM_ConfigClockSource+0x1c>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e0de      	b.n	800406a <HAL_TIM_ConfigClockSource+0x1da>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003eca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a63      	ldr	r2, [pc, #396]	@ (8004074 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	f000 80a9 	beq.w	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003eec:	4a61      	ldr	r2, [pc, #388]	@ (8004074 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	f200 80ae 	bhi.w	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ef4:	4a60      	ldr	r2, [pc, #384]	@ (8004078 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	f000 80a1 	beq.w	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003efc:	4a5e      	ldr	r2, [pc, #376]	@ (8004078 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	f200 80a6 	bhi.w	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f04:	4a5d      	ldr	r2, [pc, #372]	@ (800407c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	f000 8099 	beq.w	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f0c:	4a5b      	ldr	r2, [pc, #364]	@ (800407c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	f200 809e 	bhi.w	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f14:	4a5a      	ldr	r2, [pc, #360]	@ (8004080 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	f000 8091 	beq.w	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f1c:	4a58      	ldr	r2, [pc, #352]	@ (8004080 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	f200 8096 	bhi.w	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f28:	f000 8089 	beq.w	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f2c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f30:	f200 808e 	bhi.w	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f38:	d03e      	beq.n	8003fb8 <HAL_TIM_ConfigClockSource+0x128>
 8003f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f3e:	f200 8087 	bhi.w	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f46:	f000 8086 	beq.w	8004056 <HAL_TIM_ConfigClockSource+0x1c6>
 8003f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f4e:	d87f      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f50:	2b70      	cmp	r3, #112	@ 0x70
 8003f52:	d01a      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0xfa>
 8003f54:	2b70      	cmp	r3, #112	@ 0x70
 8003f56:	d87b      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f58:	2b60      	cmp	r3, #96	@ 0x60
 8003f5a:	d050      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x16e>
 8003f5c:	2b60      	cmp	r3, #96	@ 0x60
 8003f5e:	d877      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f60:	2b50      	cmp	r3, #80	@ 0x50
 8003f62:	d03c      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x14e>
 8003f64:	2b50      	cmp	r3, #80	@ 0x50
 8003f66:	d873      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f68:	2b40      	cmp	r3, #64	@ 0x40
 8003f6a:	d058      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x18e>
 8003f6c:	2b40      	cmp	r3, #64	@ 0x40
 8003f6e:	d86f      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f70:	2b30      	cmp	r3, #48	@ 0x30
 8003f72:	d064      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f74:	2b30      	cmp	r3, #48	@ 0x30
 8003f76:	d86b      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d060      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d867      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d05c      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f84:	2b10      	cmp	r3, #16
 8003f86:	d05a      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f88:	e062      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f9a:	f000 fc81 	bl	80048a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	609a      	str	r2, [r3, #8]
      break;
 8003fb6:	e04f      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fc8:	f000 fc6a 	bl	80048a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fda:	609a      	str	r2, [r3, #8]
      break;
 8003fdc:	e03c      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 fbdc 	bl	80047a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2150      	movs	r1, #80	@ 0x50
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fc35 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e02c      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800400a:	461a      	mov	r2, r3
 800400c:	f000 fbfb 	bl	8004806 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2160      	movs	r1, #96	@ 0x60
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fc25 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 800401c:	e01c      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800402a:	461a      	mov	r2, r3
 800402c:	f000 fbbc 	bl	80047a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2140      	movs	r1, #64	@ 0x40
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fc15 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 800403c:	e00c      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4619      	mov	r1, r3
 8004048:	4610      	mov	r0, r2
 800404a:	f000 fc0c 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 800404e:	e003      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
      break;
 8004054:	e000      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004056:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	00100070 	.word	0x00100070
 8004078:	00100040 	.word	0x00100040
 800407c:	00100030 	.word	0x00100030
 8004080:	00100020 	.word	0x00100020

08004084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a42      	ldr	r2, [pc, #264]	@ (80041a0 <TIM_Base_SetConfig+0x11c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00f      	beq.n	80040bc <TIM_Base_SetConfig+0x38>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a2:	d00b      	beq.n	80040bc <TIM_Base_SetConfig+0x38>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a3f      	ldr	r2, [pc, #252]	@ (80041a4 <TIM_Base_SetConfig+0x120>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d007      	beq.n	80040bc <TIM_Base_SetConfig+0x38>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a3e      	ldr	r2, [pc, #248]	@ (80041a8 <TIM_Base_SetConfig+0x124>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_Base_SetConfig+0x38>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a3d      	ldr	r2, [pc, #244]	@ (80041ac <TIM_Base_SetConfig+0x128>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d108      	bne.n	80040ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a33      	ldr	r2, [pc, #204]	@ (80041a0 <TIM_Base_SetConfig+0x11c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d01b      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040dc:	d017      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a30      	ldr	r2, [pc, #192]	@ (80041a4 <TIM_Base_SetConfig+0x120>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a2f      	ldr	r2, [pc, #188]	@ (80041a8 <TIM_Base_SetConfig+0x124>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00f      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a2e      	ldr	r2, [pc, #184]	@ (80041ac <TIM_Base_SetConfig+0x128>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00b      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a2d      	ldr	r2, [pc, #180]	@ (80041b0 <TIM_Base_SetConfig+0x12c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a2c      	ldr	r2, [pc, #176]	@ (80041b4 <TIM_Base_SetConfig+0x130>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a2b      	ldr	r2, [pc, #172]	@ (80041b8 <TIM_Base_SetConfig+0x134>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d108      	bne.n	8004120 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a16      	ldr	r2, [pc, #88]	@ (80041a0 <TIM_Base_SetConfig+0x11c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00f      	beq.n	800416c <TIM_Base_SetConfig+0xe8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a17      	ldr	r2, [pc, #92]	@ (80041ac <TIM_Base_SetConfig+0x128>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00b      	beq.n	800416c <TIM_Base_SetConfig+0xe8>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a16      	ldr	r2, [pc, #88]	@ (80041b0 <TIM_Base_SetConfig+0x12c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <TIM_Base_SetConfig+0xe8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a15      	ldr	r2, [pc, #84]	@ (80041b4 <TIM_Base_SetConfig+0x130>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0xe8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a14      	ldr	r2, [pc, #80]	@ (80041b8 <TIM_Base_SetConfig+0x134>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d103      	bne.n	8004174 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b01      	cmp	r3, #1
 8004184:	d105      	bne.n	8004192 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f023 0201 	bic.w	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	611a      	str	r2, [r3, #16]
  }
}
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40000800 	.word	0x40000800
 80041ac:	40013400 	.word	0x40013400
 80041b0:	40014000 	.word	0x40014000
 80041b4:	40014400 	.word	0x40014400
 80041b8:	40014800 	.word	0x40014800

080041bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f023 0201 	bic.w	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f023 0302 	bic.w	r3, r3, #2
 8004208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a2c      	ldr	r2, [pc, #176]	@ (80042c8 <TIM_OC1_SetConfig+0x10c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00f      	beq.n	800423c <TIM_OC1_SetConfig+0x80>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a2b      	ldr	r2, [pc, #172]	@ (80042cc <TIM_OC1_SetConfig+0x110>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00b      	beq.n	800423c <TIM_OC1_SetConfig+0x80>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a2a      	ldr	r2, [pc, #168]	@ (80042d0 <TIM_OC1_SetConfig+0x114>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d007      	beq.n	800423c <TIM_OC1_SetConfig+0x80>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a29      	ldr	r2, [pc, #164]	@ (80042d4 <TIM_OC1_SetConfig+0x118>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_OC1_SetConfig+0x80>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a28      	ldr	r2, [pc, #160]	@ (80042d8 <TIM_OC1_SetConfig+0x11c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d10c      	bne.n	8004256 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0308 	bic.w	r3, r3, #8
 8004242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 0304 	bic.w	r3, r3, #4
 8004254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1b      	ldr	r2, [pc, #108]	@ (80042c8 <TIM_OC1_SetConfig+0x10c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00f      	beq.n	800427e <TIM_OC1_SetConfig+0xc2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a1a      	ldr	r2, [pc, #104]	@ (80042cc <TIM_OC1_SetConfig+0x110>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00b      	beq.n	800427e <TIM_OC1_SetConfig+0xc2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a19      	ldr	r2, [pc, #100]	@ (80042d0 <TIM_OC1_SetConfig+0x114>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d007      	beq.n	800427e <TIM_OC1_SetConfig+0xc2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a18      	ldr	r2, [pc, #96]	@ (80042d4 <TIM_OC1_SetConfig+0x118>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d003      	beq.n	800427e <TIM_OC1_SetConfig+0xc2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a17      	ldr	r2, [pc, #92]	@ (80042d8 <TIM_OC1_SetConfig+0x11c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d111      	bne.n	80042a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800428c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	621a      	str	r2, [r3, #32]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40013400 	.word	0x40013400
 80042d0:	40014000 	.word	0x40014000
 80042d4:	40014400 	.word	0x40014400
 80042d8:	40014800 	.word	0x40014800

080042dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f023 0210 	bic.w	r2, r3, #16
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800430a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800430e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f023 0320 	bic.w	r3, r3, #32
 800432a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a28      	ldr	r2, [pc, #160]	@ (80043dc <TIM_OC2_SetConfig+0x100>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_OC2_SetConfig+0x6c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a27      	ldr	r2, [pc, #156]	@ (80043e0 <TIM_OC2_SetConfig+0x104>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d10d      	bne.n	8004364 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800434e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004362:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a1d      	ldr	r2, [pc, #116]	@ (80043dc <TIM_OC2_SetConfig+0x100>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00f      	beq.n	800438c <TIM_OC2_SetConfig+0xb0>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a1c      	ldr	r2, [pc, #112]	@ (80043e0 <TIM_OC2_SetConfig+0x104>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00b      	beq.n	800438c <TIM_OC2_SetConfig+0xb0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a1b      	ldr	r2, [pc, #108]	@ (80043e4 <TIM_OC2_SetConfig+0x108>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d007      	beq.n	800438c <TIM_OC2_SetConfig+0xb0>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a1a      	ldr	r2, [pc, #104]	@ (80043e8 <TIM_OC2_SetConfig+0x10c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_OC2_SetConfig+0xb0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a19      	ldr	r2, [pc, #100]	@ (80043ec <TIM_OC2_SetConfig+0x110>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d113      	bne.n	80043b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800439a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	621a      	str	r2, [r3, #32]
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40013400 	.word	0x40013400
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40014400 	.word	0x40014400
 80043ec:	40014800 	.word	0x40014800

080043f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800441e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0303 	bic.w	r3, r3, #3
 800442a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800443c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a27      	ldr	r2, [pc, #156]	@ (80044ec <TIM_OC3_SetConfig+0xfc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_OC3_SetConfig+0x6a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a26      	ldr	r2, [pc, #152]	@ (80044f0 <TIM_OC3_SetConfig+0x100>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d10d      	bne.n	8004476 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a1c      	ldr	r2, [pc, #112]	@ (80044ec <TIM_OC3_SetConfig+0xfc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00f      	beq.n	800449e <TIM_OC3_SetConfig+0xae>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1b      	ldr	r2, [pc, #108]	@ (80044f0 <TIM_OC3_SetConfig+0x100>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00b      	beq.n	800449e <TIM_OC3_SetConfig+0xae>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a1a      	ldr	r2, [pc, #104]	@ (80044f4 <TIM_OC3_SetConfig+0x104>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <TIM_OC3_SetConfig+0xae>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a19      	ldr	r2, [pc, #100]	@ (80044f8 <TIM_OC3_SetConfig+0x108>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d003      	beq.n	800449e <TIM_OC3_SetConfig+0xae>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a18      	ldr	r2, [pc, #96]	@ (80044fc <TIM_OC3_SetConfig+0x10c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d113      	bne.n	80044c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	621a      	str	r2, [r3, #32]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	40013400 	.word	0x40013400
 80044f4:	40014000 	.word	0x40014000
 80044f8:	40014400 	.word	0x40014400
 80044fc:	40014800 	.word	0x40014800

08004500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800452e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800454e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	031b      	lsls	r3, r3, #12
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a28      	ldr	r2, [pc, #160]	@ (8004600 <TIM_OC4_SetConfig+0x100>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_OC4_SetConfig+0x6c>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a27      	ldr	r2, [pc, #156]	@ (8004604 <TIM_OC4_SetConfig+0x104>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d10d      	bne.n	8004588 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	031b      	lsls	r3, r3, #12
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004586:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a1d      	ldr	r2, [pc, #116]	@ (8004600 <TIM_OC4_SetConfig+0x100>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00f      	beq.n	80045b0 <TIM_OC4_SetConfig+0xb0>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a1c      	ldr	r2, [pc, #112]	@ (8004604 <TIM_OC4_SetConfig+0x104>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00b      	beq.n	80045b0 <TIM_OC4_SetConfig+0xb0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a1b      	ldr	r2, [pc, #108]	@ (8004608 <TIM_OC4_SetConfig+0x108>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d007      	beq.n	80045b0 <TIM_OC4_SetConfig+0xb0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a1a      	ldr	r2, [pc, #104]	@ (800460c <TIM_OC4_SetConfig+0x10c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d003      	beq.n	80045b0 <TIM_OC4_SetConfig+0xb0>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a19      	ldr	r2, [pc, #100]	@ (8004610 <TIM_OC4_SetConfig+0x110>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d113      	bne.n	80045d8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045b6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80045be:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	019b      	lsls	r3, r3, #6
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	019b      	lsls	r3, r3, #6
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	621a      	str	r2, [r3, #32]
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40013400 	.word	0x40013400
 8004608:	40014000 	.word	0x40014000
 800460c:	40014400 	.word	0x40014400
 8004610:	40014800 	.word	0x40014800

08004614 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004658:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	041b      	lsls	r3, r3, #16
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a17      	ldr	r2, [pc, #92]	@ (80046c8 <TIM_OC5_SetConfig+0xb4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00f      	beq.n	800468e <TIM_OC5_SetConfig+0x7a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a16      	ldr	r2, [pc, #88]	@ (80046cc <TIM_OC5_SetConfig+0xb8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00b      	beq.n	800468e <TIM_OC5_SetConfig+0x7a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a15      	ldr	r2, [pc, #84]	@ (80046d0 <TIM_OC5_SetConfig+0xbc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d007      	beq.n	800468e <TIM_OC5_SetConfig+0x7a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a14      	ldr	r2, [pc, #80]	@ (80046d4 <TIM_OC5_SetConfig+0xc0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d003      	beq.n	800468e <TIM_OC5_SetConfig+0x7a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a13      	ldr	r2, [pc, #76]	@ (80046d8 <TIM_OC5_SetConfig+0xc4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d109      	bne.n	80046a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004694:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	621a      	str	r2, [r3, #32]
}
 80046bc:	bf00      	nop
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40013400 	.word	0x40013400
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40014400 	.word	0x40014400
 80046d8:	40014800 	.word	0x40014800

080046dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800470a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800470e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	051b      	lsls	r3, r3, #20
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a18      	ldr	r2, [pc, #96]	@ (8004794 <TIM_OC6_SetConfig+0xb8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00f      	beq.n	8004758 <TIM_OC6_SetConfig+0x7c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a17      	ldr	r2, [pc, #92]	@ (8004798 <TIM_OC6_SetConfig+0xbc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00b      	beq.n	8004758 <TIM_OC6_SetConfig+0x7c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a16      	ldr	r2, [pc, #88]	@ (800479c <TIM_OC6_SetConfig+0xc0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d007      	beq.n	8004758 <TIM_OC6_SetConfig+0x7c>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a15      	ldr	r2, [pc, #84]	@ (80047a0 <TIM_OC6_SetConfig+0xc4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_OC6_SetConfig+0x7c>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a14      	ldr	r2, [pc, #80]	@ (80047a4 <TIM_OC6_SetConfig+0xc8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d109      	bne.n	800476c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800475e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	029b      	lsls	r3, r3, #10
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40013400 	.word	0x40013400
 800479c:	40014000 	.word	0x40014000
 80047a0:	40014400 	.word	0x40014400
 80047a4:	40014800 	.word	0x40014800

080047a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f023 0201 	bic.w	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f023 030a 	bic.w	r3, r3, #10
 80047e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004806:	b480      	push	{r7}
 8004808:	b087      	sub	sp, #28
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f023 0210 	bic.w	r2, r3, #16
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004830:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	031b      	lsls	r3, r3, #12
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004842:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800487c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	f043 0307 	orr.w	r3, r3, #7
 800488c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	609a      	str	r2, [r3, #8]
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	021a      	lsls	r2, r3, #8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	609a      	str	r2, [r3, #8]
}
 80048d4:	bf00      	nop
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e065      	b.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a2c      	ldr	r2, [pc, #176]	@ (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2b      	ldr	r2, [pc, #172]	@ (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d108      	bne.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004932:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004948:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1b      	ldr	r2, [pc, #108]	@ (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d018      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800496e:	d013      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a18      	ldr	r2, [pc, #96]	@ (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00e      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a17      	ldr	r2, [pc, #92]	@ (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d009      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a12      	ldr	r2, [pc, #72]	@ (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a13      	ldr	r2, [pc, #76]	@ (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d10c      	bne.n	80049b2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800499e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40013400 	.word	0x40013400
 80049d8:	40000400 	.word	0x40000400
 80049dc:	40000800 	.word	0x40000800
 80049e0:	40014000 	.word	0x40014000

080049e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e042      	b.n	8004a7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fc fdbd 	bl	8001588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2224      	movs	r2, #36	@ 0x24
 8004a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 ff44 	bl	80058bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fc75 	bl	8005324 <UART_SetConfig>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e01b      	b.n	8004a7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 ffc3 	bl	8005a00 <UART_CheckIdleState>
 8004a7a:	4603      	mov	r3, r0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	@ 0x28
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	4613      	mov	r3, r2
 8004a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d17b      	bne.n	8004b96 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <HAL_UART_Transmit+0x26>
 8004aa4:	88fb      	ldrh	r3, [r7, #6]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e074      	b.n	8004b98 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2221      	movs	r2, #33	@ 0x21
 8004aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004abe:	f7fd fa3f 	bl	8001f40 <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	88fa      	ldrh	r2, [r7, #6]
 8004ad0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004adc:	d108      	bne.n	8004af0 <HAL_UART_Transmit+0x6c>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	e003      	b.n	8004af8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004af8:	e030      	b.n	8004b5c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2200      	movs	r2, #0
 8004b02:	2180      	movs	r1, #128	@ 0x80
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f001 f825 	bl	8005b54 <UART_WaitOnFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e03d      	b.n	8004b98 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10b      	bne.n	8004b3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	3302      	adds	r3, #2
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	e007      	b.n	8004b4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	781a      	ldrb	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	3301      	adds	r3, #1
 8004b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1c8      	bne.n	8004afa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2140      	movs	r1, #64	@ 0x40
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 ffee 	bl	8005b54 <UART_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e006      	b.n	8004b98 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	e000      	b.n	8004b98 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3720      	adds	r7, #32
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08a      	sub	sp, #40	@ 0x28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	4613      	mov	r3, r2
 8004bac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d137      	bne.n	8004c28 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_UART_Receive_DMA+0x24>
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e030      	b.n	8004c2a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a18      	ldr	r2, [pc, #96]	@ (8004c34 <HAL_UART_Receive_DMA+0x94>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d01f      	beq.n	8004c18 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d018      	beq.n	8004c18 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	e853 3f00 	ldrex	r3, [r3]
 8004bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	623b      	str	r3, [r7, #32]
 8004c06:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c08:	69f9      	ldr	r1, [r7, #28]
 8004c0a:	6a3a      	ldr	r2, [r7, #32]
 8004c0c:	e841 2300 	strex	r3, r2, [r1]
 8004c10:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1e6      	bne.n	8004be6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c18:	88fb      	ldrh	r3, [r7, #6]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f001 f806 	bl	8005c30 <UART_Start_Receive_DMA>
 8004c24:	4603      	mov	r3, r0
 8004c26:	e000      	b.n	8004c2a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c28:	2302      	movs	r3, #2
  }
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3728      	adds	r7, #40	@ 0x28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40008000 	.word	0x40008000

08004c38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b0ba      	sub	sp, #232	@ 0xe8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004c62:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004c66:	4013      	ands	r3, r2
 8004c68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004c6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d11b      	bne.n	8004cac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d015      	beq.n	8004cac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d009      	beq.n	8004cac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 8300 	beq.w	80052a2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	4798      	blx	r3
      }
      return;
 8004caa:	e2fa      	b.n	80052a2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004cac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8123 	beq.w	8004efc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004cb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004cba:	4b8d      	ldr	r3, [pc, #564]	@ (8004ef0 <HAL_UART_IRQHandler+0x2b8>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004cc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004cc6:	4b8b      	ldr	r3, [pc, #556]	@ (8004ef4 <HAL_UART_IRQHandler+0x2bc>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 8116 	beq.w	8004efc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d011      	beq.n	8004d00 <HAL_UART_IRQHandler+0xc8>
 8004cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00b      	beq.n	8004d00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2201      	movs	r2, #1
 8004cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf6:	f043 0201 	orr.w	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d011      	beq.n	8004d30 <HAL_UART_IRQHandler+0xf8>
 8004d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00b      	beq.n	8004d30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d26:	f043 0204 	orr.w	r2, r3, #4
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d011      	beq.n	8004d60 <HAL_UART_IRQHandler+0x128>
 8004d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00b      	beq.n	8004d60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d56:	f043 0202 	orr.w	r2, r3, #2
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d017      	beq.n	8004d9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d105      	bne.n	8004d84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004d78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004d7c:	4b5c      	ldr	r3, [pc, #368]	@ (8004ef0 <HAL_UART_IRQHandler+0x2b8>)
 8004d7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00b      	beq.n	8004d9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d92:	f043 0208 	orr.w	r2, r3, #8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d012      	beq.n	8004dce <HAL_UART_IRQHandler+0x196>
 8004da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00c      	beq.n	8004dce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc4:	f043 0220 	orr.w	r2, r3, #32
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8266 	beq.w	80052a6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d013      	beq.n	8004e0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d105      	bne.n	8004dfe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e22:	2b40      	cmp	r3, #64	@ 0x40
 8004e24:	d005      	beq.n	8004e32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d054      	beq.n	8004edc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 ffe3 	bl	8005dfe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e42:	2b40      	cmp	r3, #64	@ 0x40
 8004e44:	d146      	bne.n	8004ed4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1d9      	bne.n	8004e46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d017      	beq.n	8004ecc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ea2:	4a15      	ldr	r2, [pc, #84]	@ (8004ef8 <HAL_UART_IRQHandler+0x2c0>)
 8004ea4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fd fb01 	bl	80024b4 <HAL_DMA_Abort_IT>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d019      	beq.n	8004eec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eca:	e00f      	b.n	8004eec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fa13 	bl	80052f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed2:	e00b      	b.n	8004eec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fa0f 	bl	80052f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eda:	e007      	b.n	8004eec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fa0b 	bl	80052f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004eea:	e1dc      	b.n	80052a6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eec:	bf00      	nop
    return;
 8004eee:	e1da      	b.n	80052a6 <HAL_UART_IRQHandler+0x66e>
 8004ef0:	10000001 	.word	0x10000001
 8004ef4:	04000120 	.word	0x04000120
 8004ef8:	080060b5 	.word	0x080060b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	f040 8170 	bne.w	80051e6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 8169 	beq.w	80051e6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8162 	beq.w	80051e6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2210      	movs	r2, #16
 8004f28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f34:	2b40      	cmp	r3, #64	@ 0x40
 8004f36:	f040 80d8 	bne.w	80050ea <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 80af 	beq.w	80050b0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	f080 80a7 	bcs.w	80050b0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f040 8087 	bne.w	800508e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004faa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004fae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004fb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1da      	bne.n	8004f80 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3308      	adds	r3, #8
 8004fd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004fda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3308      	adds	r3, #8
 8004fea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ff6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005000:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e1      	bne.n	8004fca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3308      	adds	r3, #8
 800500c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800501c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3308      	adds	r3, #8
 8005026:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800502a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800502c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005030:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e3      	bne.n	8005006 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800505a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800505c:	f023 0310 	bic.w	r3, r3, #16
 8005060:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	461a      	mov	r2, r3
 800506a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800506e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005070:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005074:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800507c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e4      	bne.n	800504c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005088:	4618      	mov	r0, r3
 800508a:	f7fd f9ba 	bl	8002402 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	4619      	mov	r1, r3
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f92f 	bl	800530c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80050ae:	e0fc      	b.n	80052aa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050ba:	429a      	cmp	r2, r3
 80050bc:	f040 80f5 	bne.w	80052aa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	f040 80eb 	bne.w	80052aa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050e0:	4619      	mov	r1, r3
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f912 	bl	800530c <HAL_UARTEx_RxEventCallback>
      return;
 80050e8:	e0df      	b.n	80052aa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80d1 	beq.w	80052ae <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800510c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80cc 	beq.w	80052ae <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005126:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800512a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005138:	647b      	str	r3, [r7, #68]	@ 0x44
 800513a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800513e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e4      	bne.n	8005116 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3308      	adds	r3, #8
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	e853 3f00 	ldrex	r3, [r3]
 800515a:	623b      	str	r3, [r7, #32]
   return(result);
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005162:	f023 0301 	bic.w	r3, r3, #1
 8005166:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3308      	adds	r3, #8
 8005170:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005174:	633a      	str	r2, [r7, #48]	@ 0x30
 8005176:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800517a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e1      	bne.n	800514c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	e853 3f00 	ldrex	r3, [r3]
 80051a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f023 0310 	bic.w	r3, r3, #16
 80051b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80051be:	61fb      	str	r3, [r7, #28]
 80051c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	69b9      	ldr	r1, [r7, #24]
 80051c4:	69fa      	ldr	r2, [r7, #28]
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	617b      	str	r3, [r7, #20]
   return(result);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e4      	bne.n	800519c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f894 	bl	800530c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051e4:	e063      	b.n	80052ae <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00e      	beq.n	8005210 <HAL_UART_IRQHandler+0x5d8>
 80051f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005206:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 ff90 	bl	800612e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800520e:	e051      	b.n	80052b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005218:	2b00      	cmp	r3, #0
 800521a:	d014      	beq.n	8005246 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800521c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005224:	2b00      	cmp	r3, #0
 8005226:	d105      	bne.n	8005234 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800522c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005238:	2b00      	cmp	r3, #0
 800523a:	d03a      	beq.n	80052b2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	4798      	blx	r3
    }
    return;
 8005244:	e035      	b.n	80052b2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800524a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800524e:	2b00      	cmp	r3, #0
 8005250:	d009      	beq.n	8005266 <HAL_UART_IRQHandler+0x62e>
 8005252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 ff3a 	bl	80060d8 <UART_EndTransmit_IT>
    return;
 8005264:	e026      	b.n	80052b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800526a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <HAL_UART_IRQHandler+0x64e>
 8005272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005276:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 ff69 	bl	8006156 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005284:	e016      	b.n	80052b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d010      	beq.n	80052b4 <HAL_UART_IRQHandler+0x67c>
 8005292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005296:	2b00      	cmp	r3, #0
 8005298:	da0c      	bge.n	80052b4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 ff51 	bl	8006142 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052a0:	e008      	b.n	80052b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80052a2:	bf00      	nop
 80052a4:	e006      	b.n	80052b4 <HAL_UART_IRQHandler+0x67c>
    return;
 80052a6:	bf00      	nop
 80052a8:	e004      	b.n	80052b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80052aa:	bf00      	nop
 80052ac:	e002      	b.n	80052b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80052ae:	bf00      	nop
 80052b0:	e000      	b.n	80052b4 <HAL_UART_IRQHandler+0x67c>
    return;
 80052b2:	bf00      	nop
  }
}
 80052b4:	37e8      	adds	r7, #232	@ 0xe8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop

080052bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005328:	b08c      	sub	sp, #48	@ 0x30
 800532a:	af00      	add	r7, sp, #0
 800532c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	431a      	orrs	r2, r3
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	431a      	orrs	r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	4313      	orrs	r3, r2
 800534a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4bab      	ldr	r3, [pc, #684]	@ (8005600 <UART_SetConfig+0x2dc>)
 8005354:	4013      	ands	r3, r2
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	6812      	ldr	r2, [r2, #0]
 800535a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800535c:	430b      	orrs	r3, r1
 800535e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4aa0      	ldr	r2, [pc, #640]	@ (8005604 <UART_SetConfig+0x2e0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d004      	beq.n	8005390 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800538c:	4313      	orrs	r3, r2
 800538e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800539a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053a4:	430b      	orrs	r3, r1
 80053a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ae:	f023 010f 	bic.w	r1, r3, #15
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a91      	ldr	r2, [pc, #580]	@ (8005608 <UART_SetConfig+0x2e4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d125      	bne.n	8005414 <UART_SetConfig+0xf0>
 80053c8:	4b90      	ldr	r3, [pc, #576]	@ (800560c <UART_SetConfig+0x2e8>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d81a      	bhi.n	800540c <UART_SetConfig+0xe8>
 80053d6:	a201      	add	r2, pc, #4	@ (adr r2, 80053dc <UART_SetConfig+0xb8>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	080053ed 	.word	0x080053ed
 80053e0:	080053fd 	.word	0x080053fd
 80053e4:	080053f5 	.word	0x080053f5
 80053e8:	08005405 	.word	0x08005405
 80053ec:	2301      	movs	r3, #1
 80053ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053f2:	e0d6      	b.n	80055a2 <UART_SetConfig+0x27e>
 80053f4:	2302      	movs	r3, #2
 80053f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053fa:	e0d2      	b.n	80055a2 <UART_SetConfig+0x27e>
 80053fc:	2304      	movs	r3, #4
 80053fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005402:	e0ce      	b.n	80055a2 <UART_SetConfig+0x27e>
 8005404:	2308      	movs	r3, #8
 8005406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800540a:	e0ca      	b.n	80055a2 <UART_SetConfig+0x27e>
 800540c:	2310      	movs	r3, #16
 800540e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005412:	e0c6      	b.n	80055a2 <UART_SetConfig+0x27e>
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a7d      	ldr	r2, [pc, #500]	@ (8005610 <UART_SetConfig+0x2ec>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d138      	bne.n	8005490 <UART_SetConfig+0x16c>
 800541e:	4b7b      	ldr	r3, [pc, #492]	@ (800560c <UART_SetConfig+0x2e8>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005424:	f003 030c 	and.w	r3, r3, #12
 8005428:	2b0c      	cmp	r3, #12
 800542a:	d82d      	bhi.n	8005488 <UART_SetConfig+0x164>
 800542c:	a201      	add	r2, pc, #4	@ (adr r2, 8005434 <UART_SetConfig+0x110>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005469 	.word	0x08005469
 8005438:	08005489 	.word	0x08005489
 800543c:	08005489 	.word	0x08005489
 8005440:	08005489 	.word	0x08005489
 8005444:	08005479 	.word	0x08005479
 8005448:	08005489 	.word	0x08005489
 800544c:	08005489 	.word	0x08005489
 8005450:	08005489 	.word	0x08005489
 8005454:	08005471 	.word	0x08005471
 8005458:	08005489 	.word	0x08005489
 800545c:	08005489 	.word	0x08005489
 8005460:	08005489 	.word	0x08005489
 8005464:	08005481 	.word	0x08005481
 8005468:	2300      	movs	r3, #0
 800546a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800546e:	e098      	b.n	80055a2 <UART_SetConfig+0x27e>
 8005470:	2302      	movs	r3, #2
 8005472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005476:	e094      	b.n	80055a2 <UART_SetConfig+0x27e>
 8005478:	2304      	movs	r3, #4
 800547a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800547e:	e090      	b.n	80055a2 <UART_SetConfig+0x27e>
 8005480:	2308      	movs	r3, #8
 8005482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005486:	e08c      	b.n	80055a2 <UART_SetConfig+0x27e>
 8005488:	2310      	movs	r3, #16
 800548a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800548e:	e088      	b.n	80055a2 <UART_SetConfig+0x27e>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a5f      	ldr	r2, [pc, #380]	@ (8005614 <UART_SetConfig+0x2f0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d125      	bne.n	80054e6 <UART_SetConfig+0x1c2>
 800549a:	4b5c      	ldr	r3, [pc, #368]	@ (800560c <UART_SetConfig+0x2e8>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80054a4:	2b30      	cmp	r3, #48	@ 0x30
 80054a6:	d016      	beq.n	80054d6 <UART_SetConfig+0x1b2>
 80054a8:	2b30      	cmp	r3, #48	@ 0x30
 80054aa:	d818      	bhi.n	80054de <UART_SetConfig+0x1ba>
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d00a      	beq.n	80054c6 <UART_SetConfig+0x1a2>
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d814      	bhi.n	80054de <UART_SetConfig+0x1ba>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <UART_SetConfig+0x19a>
 80054b8:	2b10      	cmp	r3, #16
 80054ba:	d008      	beq.n	80054ce <UART_SetConfig+0x1aa>
 80054bc:	e00f      	b.n	80054de <UART_SetConfig+0x1ba>
 80054be:	2300      	movs	r3, #0
 80054c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054c4:	e06d      	b.n	80055a2 <UART_SetConfig+0x27e>
 80054c6:	2302      	movs	r3, #2
 80054c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054cc:	e069      	b.n	80055a2 <UART_SetConfig+0x27e>
 80054ce:	2304      	movs	r3, #4
 80054d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d4:	e065      	b.n	80055a2 <UART_SetConfig+0x27e>
 80054d6:	2308      	movs	r3, #8
 80054d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054dc:	e061      	b.n	80055a2 <UART_SetConfig+0x27e>
 80054de:	2310      	movs	r3, #16
 80054e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e4:	e05d      	b.n	80055a2 <UART_SetConfig+0x27e>
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a4b      	ldr	r2, [pc, #300]	@ (8005618 <UART_SetConfig+0x2f4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d125      	bne.n	800553c <UART_SetConfig+0x218>
 80054f0:	4b46      	ldr	r3, [pc, #280]	@ (800560c <UART_SetConfig+0x2e8>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80054fc:	d016      	beq.n	800552c <UART_SetConfig+0x208>
 80054fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005500:	d818      	bhi.n	8005534 <UART_SetConfig+0x210>
 8005502:	2b80      	cmp	r3, #128	@ 0x80
 8005504:	d00a      	beq.n	800551c <UART_SetConfig+0x1f8>
 8005506:	2b80      	cmp	r3, #128	@ 0x80
 8005508:	d814      	bhi.n	8005534 <UART_SetConfig+0x210>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <UART_SetConfig+0x1f0>
 800550e:	2b40      	cmp	r3, #64	@ 0x40
 8005510:	d008      	beq.n	8005524 <UART_SetConfig+0x200>
 8005512:	e00f      	b.n	8005534 <UART_SetConfig+0x210>
 8005514:	2300      	movs	r3, #0
 8005516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800551a:	e042      	b.n	80055a2 <UART_SetConfig+0x27e>
 800551c:	2302      	movs	r3, #2
 800551e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005522:	e03e      	b.n	80055a2 <UART_SetConfig+0x27e>
 8005524:	2304      	movs	r3, #4
 8005526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800552a:	e03a      	b.n	80055a2 <UART_SetConfig+0x27e>
 800552c:	2308      	movs	r3, #8
 800552e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005532:	e036      	b.n	80055a2 <UART_SetConfig+0x27e>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800553a:	e032      	b.n	80055a2 <UART_SetConfig+0x27e>
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a30      	ldr	r2, [pc, #192]	@ (8005604 <UART_SetConfig+0x2e0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d12a      	bne.n	800559c <UART_SetConfig+0x278>
 8005546:	4b31      	ldr	r3, [pc, #196]	@ (800560c <UART_SetConfig+0x2e8>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005550:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005554:	d01a      	beq.n	800558c <UART_SetConfig+0x268>
 8005556:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800555a:	d81b      	bhi.n	8005594 <UART_SetConfig+0x270>
 800555c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005560:	d00c      	beq.n	800557c <UART_SetConfig+0x258>
 8005562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005566:	d815      	bhi.n	8005594 <UART_SetConfig+0x270>
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <UART_SetConfig+0x250>
 800556c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005570:	d008      	beq.n	8005584 <UART_SetConfig+0x260>
 8005572:	e00f      	b.n	8005594 <UART_SetConfig+0x270>
 8005574:	2300      	movs	r3, #0
 8005576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800557a:	e012      	b.n	80055a2 <UART_SetConfig+0x27e>
 800557c:	2302      	movs	r3, #2
 800557e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005582:	e00e      	b.n	80055a2 <UART_SetConfig+0x27e>
 8005584:	2304      	movs	r3, #4
 8005586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800558a:	e00a      	b.n	80055a2 <UART_SetConfig+0x27e>
 800558c:	2308      	movs	r3, #8
 800558e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005592:	e006      	b.n	80055a2 <UART_SetConfig+0x27e>
 8005594:	2310      	movs	r3, #16
 8005596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800559a:	e002      	b.n	80055a2 <UART_SetConfig+0x27e>
 800559c:	2310      	movs	r3, #16
 800559e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a17      	ldr	r2, [pc, #92]	@ (8005604 <UART_SetConfig+0x2e0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	f040 80a8 	bne.w	80056fe <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d834      	bhi.n	8005620 <UART_SetConfig+0x2fc>
 80055b6:	a201      	add	r2, pc, #4	@ (adr r2, 80055bc <UART_SetConfig+0x298>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	08005621 	.word	0x08005621
 80055c4:	080055e9 	.word	0x080055e9
 80055c8:	08005621 	.word	0x08005621
 80055cc:	080055ef 	.word	0x080055ef
 80055d0:	08005621 	.word	0x08005621
 80055d4:	08005621 	.word	0x08005621
 80055d8:	08005621 	.word	0x08005621
 80055dc:	080055f7 	.word	0x080055f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e0:	f7fe f828 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 80055e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055e6:	e021      	b.n	800562c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055e8:	4b0c      	ldr	r3, [pc, #48]	@ (800561c <UART_SetConfig+0x2f8>)
 80055ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055ec:	e01e      	b.n	800562c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ee:	f7fd ffb3 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 80055f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055f4:	e01a      	b.n	800562c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055fc:	e016      	b.n	800562c <UART_SetConfig+0x308>
 80055fe:	bf00      	nop
 8005600:	cfff69f3 	.word	0xcfff69f3
 8005604:	40008000 	.word	0x40008000
 8005608:	40013800 	.word	0x40013800
 800560c:	40021000 	.word	0x40021000
 8005610:	40004400 	.word	0x40004400
 8005614:	40004800 	.word	0x40004800
 8005618:	40004c00 	.word	0x40004c00
 800561c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800562a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 812a 	beq.w	8005888 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	4a9e      	ldr	r2, [pc, #632]	@ (80058b4 <UART_SetConfig+0x590>)
 800563a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800563e:	461a      	mov	r2, r3
 8005640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005642:	fbb3 f3f2 	udiv	r3, r3, r2
 8005646:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	4613      	mov	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	4413      	add	r3, r2
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	429a      	cmp	r2, r3
 8005656:	d305      	bcc.n	8005664 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	429a      	cmp	r2, r3
 8005662:	d903      	bls.n	800566c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800566a:	e10d      	b.n	8005888 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	2200      	movs	r2, #0
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	60fa      	str	r2, [r7, #12]
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005678:	4a8e      	ldr	r2, [pc, #568]	@ (80058b4 <UART_SetConfig+0x590>)
 800567a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800567e:	b29b      	uxth	r3, r3
 8005680:	2200      	movs	r2, #0
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800568a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800568e:	f7fb fae5 	bl	8000c5c <__aeabi_uldivmod>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4610      	mov	r0, r2
 8005698:	4619      	mov	r1, r3
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	020b      	lsls	r3, r1, #8
 80056a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056a8:	0202      	lsls	r2, r0, #8
 80056aa:	6979      	ldr	r1, [r7, #20]
 80056ac:	6849      	ldr	r1, [r1, #4]
 80056ae:	0849      	lsrs	r1, r1, #1
 80056b0:	2000      	movs	r0, #0
 80056b2:	460c      	mov	r4, r1
 80056b4:	4605      	mov	r5, r0
 80056b6:	eb12 0804 	adds.w	r8, r2, r4
 80056ba:	eb43 0905 	adc.w	r9, r3, r5
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	469a      	mov	sl, r3
 80056c6:	4693      	mov	fp, r2
 80056c8:	4652      	mov	r2, sl
 80056ca:	465b      	mov	r3, fp
 80056cc:	4640      	mov	r0, r8
 80056ce:	4649      	mov	r1, r9
 80056d0:	f7fb fac4 	bl	8000c5c <__aeabi_uldivmod>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4613      	mov	r3, r2
 80056da:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056e2:	d308      	bcc.n	80056f6 <UART_SetConfig+0x3d2>
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ea:	d204      	bcs.n	80056f6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6a3a      	ldr	r2, [r7, #32]
 80056f2:	60da      	str	r2, [r3, #12]
 80056f4:	e0c8      	b.n	8005888 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056fc:	e0c4      	b.n	8005888 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005706:	d167      	bne.n	80057d8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005708:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800570c:	2b08      	cmp	r3, #8
 800570e:	d828      	bhi.n	8005762 <UART_SetConfig+0x43e>
 8005710:	a201      	add	r2, pc, #4	@ (adr r2, 8005718 <UART_SetConfig+0x3f4>)
 8005712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005716:	bf00      	nop
 8005718:	0800573d 	.word	0x0800573d
 800571c:	08005745 	.word	0x08005745
 8005720:	0800574d 	.word	0x0800574d
 8005724:	08005763 	.word	0x08005763
 8005728:	08005753 	.word	0x08005753
 800572c:	08005763 	.word	0x08005763
 8005730:	08005763 	.word	0x08005763
 8005734:	08005763 	.word	0x08005763
 8005738:	0800575b 	.word	0x0800575b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800573c:	f7fd ff7a 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8005740:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005742:	e014      	b.n	800576e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005744:	f7fd ff8c 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 8005748:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800574a:	e010      	b.n	800576e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800574c:	4b5a      	ldr	r3, [pc, #360]	@ (80058b8 <UART_SetConfig+0x594>)
 800574e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005750:	e00d      	b.n	800576e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005752:	f7fd ff01 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8005756:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005758:	e009      	b.n	800576e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800575a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800575e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005760:	e005      	b.n	800576e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800576c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8089 	beq.w	8005888 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577a:	4a4e      	ldr	r2, [pc, #312]	@ (80058b4 <UART_SetConfig+0x590>)
 800577c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005780:	461a      	mov	r2, r3
 8005782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005784:	fbb3 f3f2 	udiv	r3, r3, r2
 8005788:	005a      	lsls	r2, r3, #1
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	085b      	lsrs	r3, r3, #1
 8005790:	441a      	add	r2, r3
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	fbb2 f3f3 	udiv	r3, r2, r3
 800579a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	2b0f      	cmp	r3, #15
 80057a0:	d916      	bls.n	80057d0 <UART_SetConfig+0x4ac>
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a8:	d212      	bcs.n	80057d0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f023 030f 	bic.w	r3, r3, #15
 80057b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	b29a      	uxth	r2, r3
 80057c0:	8bfb      	ldrh	r3, [r7, #30]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	8bfa      	ldrh	r2, [r7, #30]
 80057cc:	60da      	str	r2, [r3, #12]
 80057ce:	e05b      	b.n	8005888 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057d6:	e057      	b.n	8005888 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d828      	bhi.n	8005832 <UART_SetConfig+0x50e>
 80057e0:	a201      	add	r2, pc, #4	@ (adr r2, 80057e8 <UART_SetConfig+0x4c4>)
 80057e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e6:	bf00      	nop
 80057e8:	0800580d 	.word	0x0800580d
 80057ec:	08005815 	.word	0x08005815
 80057f0:	0800581d 	.word	0x0800581d
 80057f4:	08005833 	.word	0x08005833
 80057f8:	08005823 	.word	0x08005823
 80057fc:	08005833 	.word	0x08005833
 8005800:	08005833 	.word	0x08005833
 8005804:	08005833 	.word	0x08005833
 8005808:	0800582b 	.word	0x0800582b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800580c:	f7fd ff12 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8005810:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005812:	e014      	b.n	800583e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005814:	f7fd ff24 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 8005818:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800581a:	e010      	b.n	800583e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800581c:	4b26      	ldr	r3, [pc, #152]	@ (80058b8 <UART_SetConfig+0x594>)
 800581e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005820:	e00d      	b.n	800583e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005822:	f7fd fe99 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8005826:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005828:	e009      	b.n	800583e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800582a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005830:	e005      	b.n	800583e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800583c:	bf00      	nop
    }

    if (pclk != 0U)
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	2b00      	cmp	r3, #0
 8005842:	d021      	beq.n	8005888 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005848:	4a1a      	ldr	r2, [pc, #104]	@ (80058b4 <UART_SetConfig+0x590>)
 800584a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800584e:	461a      	mov	r2, r3
 8005850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005852:	fbb3 f2f2 	udiv	r2, r3, r2
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	441a      	add	r2, r3
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	fbb2 f3f3 	udiv	r3, r2, r3
 8005866:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	2b0f      	cmp	r3, #15
 800586c:	d909      	bls.n	8005882 <UART_SetConfig+0x55e>
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005874:	d205      	bcs.n	8005882 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	b29a      	uxth	r2, r3
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60da      	str	r2, [r3, #12]
 8005880:	e002      	b.n	8005888 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2201      	movs	r2, #1
 800588c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2201      	movs	r2, #1
 8005894:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2200      	movs	r2, #0
 800589c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2200      	movs	r2, #0
 80058a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80058a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3730      	adds	r7, #48	@ 0x30
 80058ac:	46bd      	mov	sp, r7
 80058ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058b2:	bf00      	nop
 80058b4:	080076fc 	.word	0x080076fc
 80058b8:	00f42400 	.word	0x00f42400

080058bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01a      	beq.n	80059d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ba:	d10a      	bne.n	80059d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	605a      	str	r2, [r3, #4]
  }
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b098      	sub	sp, #96	@ 0x60
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a10:	f7fc fa96 	bl	8001f40 <HAL_GetTick>
 8005a14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d12f      	bne.n	8005a84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f88e 	bl	8005b54 <UART_WaitOnFlagUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d022      	beq.n	8005a84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a52:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e6      	bne.n	8005a3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e063      	b.n	8005b4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d149      	bne.n	8005b26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f857 	bl	8005b54 <UART_WaitOnFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d03c      	beq.n	8005b26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aca:	633b      	str	r3, [r7, #48]	@ 0x30
 8005acc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e6      	bne.n	8005aac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005afe:	61fa      	str	r2, [r7, #28]
 8005b00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	69b9      	ldr	r1, [r7, #24]
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e5      	bne.n	8005ade <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e012      	b.n	8005b4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3758      	adds	r7, #88	@ 0x58
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	4613      	mov	r3, r2
 8005b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b64:	e04f      	b.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6c:	d04b      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b6e:	f7fc f9e7 	bl	8001f40 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d302      	bcc.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e04e      	b.n	8005c26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d037      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b80      	cmp	r3, #128	@ 0x80
 8005b9a:	d034      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ba0:	d031      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d110      	bne.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2208      	movs	r2, #8
 8005bb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f920 	bl	8005dfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e029      	b.n	8005c26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005be0:	d111      	bne.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f906 	bl	8005dfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e00f      	b.n	8005c26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	bf0c      	ite	eq
 8005c16:	2301      	moveq	r3, #1
 8005c18:	2300      	movne	r3, #0
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d0a0      	beq.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b096      	sub	sp, #88	@ 0x58
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	88fa      	ldrh	r2, [r7, #6]
 8005c48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2222      	movs	r2, #34	@ 0x22
 8005c58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d02d      	beq.n	8005cc2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c6c:	4a40      	ldr	r2, [pc, #256]	@ (8005d70 <UART_Start_Receive_DMA+0x140>)
 8005c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c76:	4a3f      	ldr	r2, [pc, #252]	@ (8005d74 <UART_Start_Receive_DMA+0x144>)
 8005c78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c80:	4a3d      	ldr	r2, [pc, #244]	@ (8005d78 <UART_Start_Receive_DMA+0x148>)
 8005c82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3324      	adds	r3, #36	@ 0x24
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	f7fc fb32 	bl	800230c <HAL_DMA_Start_IT>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2210      	movs	r2, #16
 8005cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e051      	b.n	8005d66 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d018      	beq.n	8005cfc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cde:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e6      	bne.n	8005cca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3308      	adds	r3, #8
 8005d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d1c:	637a      	str	r2, [r7, #52]	@ 0x34
 8005d1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e5      	bne.n	8005cfc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3308      	adds	r3, #8
 8005d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d50:	623a      	str	r2, [r7, #32]
 8005d52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	69f9      	ldr	r1, [r7, #28]
 8005d56:	6a3a      	ldr	r2, [r7, #32]
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e5      	bne.n	8005d30 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3758      	adds	r7, #88	@ 0x58
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	08005ecb 	.word	0x08005ecb
 8005d74:	08005ff7 	.word	0x08005ff7
 8005d78:	08006035 	.word	0x08006035

08005d7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b08f      	sub	sp, #60	@ 0x3c
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005da4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e6      	bne.n	8005d84 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3308      	adds	r3, #8
 8005dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005dcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dd6:	61ba      	str	r2, [r7, #24]
 8005dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6979      	ldr	r1, [r7, #20]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	613b      	str	r3, [r7, #16]
   return(result);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e5      	bne.n	8005db6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005df2:	bf00      	nop
 8005df4:	373c      	adds	r7, #60	@ 0x3c
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b095      	sub	sp, #84	@ 0x54
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e24:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e6      	bne.n	8005e06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	e853 3f00 	ldrex	r3, [r3]
 8005e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e4e:	f023 0301 	bic.w	r3, r3, #1
 8005e52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e3      	bne.n	8005e38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d118      	bne.n	8005eaa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f023 0310 	bic.w	r3, r3, #16
 8005e8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e96:	61bb      	str	r3, [r7, #24]
 8005e98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	6979      	ldr	r1, [r7, #20]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	e841 2300 	strex	r3, r2, [r1]
 8005ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e6      	bne.n	8005e78 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ebe:	bf00      	nop
 8005ec0:	3754      	adds	r7, #84	@ 0x54
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b09c      	sub	sp, #112	@ 0x70
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d171      	bne.n	8005fca <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005efc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005efe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f0e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e6      	bne.n	8005eee <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3308      	adds	r3, #8
 8005f26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f40:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f42:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e5      	bne.n	8005f20 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3308      	adds	r3, #8
 8005f5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	e853 3f00 	ldrex	r3, [r3]
 8005f62:	623b      	str	r3, [r7, #32]
   return(result);
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3308      	adds	r3, #8
 8005f72:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f74:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e5      	bne.n	8005f54 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d118      	bne.n	8005fca <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f023 0310 	bic.w	r3, r3, #16
 8005fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fb6:	61fb      	str	r3, [r7, #28]
 8005fb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	69b9      	ldr	r1, [r7, #24]
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	617b      	str	r3, [r7, #20]
   return(result);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e6      	bne.n	8005f98 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fcc:	2200      	movs	r2, #0
 8005fce:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d107      	bne.n	8005fe8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fe2:	f7ff f993 	bl	800530c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fe6:	e002      	b.n	8005fee <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005fe8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fea:	f7ff f971 	bl	80052d0 <HAL_UART_RxCpltCallback>
}
 8005fee:	bf00      	nop
 8005ff0:	3770      	adds	r7, #112	@ 0x70
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006002:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800600e:	2b01      	cmp	r3, #1
 8006010:	d109      	bne.n	8006026 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006018:	085b      	lsrs	r3, r3, #1
 800601a:	b29b      	uxth	r3, r3
 800601c:	4619      	mov	r1, r3
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f7ff f974 	bl	800530c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006024:	e002      	b.n	800602c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7ff f95c 	bl	80052e4 <HAL_UART_RxHalfCpltCallback>
}
 800602c:	bf00      	nop
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006040:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006048:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006050:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605c:	2b80      	cmp	r3, #128	@ 0x80
 800605e:	d109      	bne.n	8006074 <UART_DMAError+0x40>
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b21      	cmp	r3, #33	@ 0x21
 8006064:	d106      	bne.n	8006074 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2200      	movs	r2, #0
 800606a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800606e:	6978      	ldr	r0, [r7, #20]
 8006070:	f7ff fe84 	bl	8005d7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800607e:	2b40      	cmp	r3, #64	@ 0x40
 8006080:	d109      	bne.n	8006096 <UART_DMAError+0x62>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b22      	cmp	r3, #34	@ 0x22
 8006086:	d106      	bne.n	8006096 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2200      	movs	r2, #0
 800608c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006090:	6978      	ldr	r0, [r7, #20]
 8006092:	f7ff feb4 	bl	8005dfe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800609c:	f043 0210 	orr.w	r2, r3, #16
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060a6:	6978      	ldr	r0, [r7, #20]
 80060a8:	f7ff f926 	bl	80052f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ac:	bf00      	nop
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7ff f914 	bl	80052f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060f4:	61fb      	str	r3, [r7, #28]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6979      	ldr	r1, [r7, #20]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	613b      	str	r3, [r7, #16]
   return(result);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e6      	bne.n	80060e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff f8cb 	bl	80052bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006126:	bf00      	nop
 8006128:	3720      	adds	r7, #32
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_UARTEx_DisableFifoMode+0x16>
 800617c:	2302      	movs	r3, #2
 800617e:	e027      	b.n	80061d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2224      	movs	r2, #36	@ 0x24
 800618c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80061ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e02d      	b.n	8006250 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2224      	movs	r2, #36	@ 0x24
 8006200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0201 	bic.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f84f 	bl	80062d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800626c:	2302      	movs	r3, #2
 800626e:	e02d      	b.n	80062cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2224      	movs	r2, #36	@ 0x24
 800627c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f811 	bl	80062d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d108      	bne.n	80062f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062f4:	e031      	b.n	800635a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062f6:	2308      	movs	r3, #8
 80062f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062fa:	2308      	movs	r3, #8
 80062fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	0e5b      	lsrs	r3, r3, #25
 8006306:	b2db      	uxtb	r3, r3
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	0f5b      	lsrs	r3, r3, #29
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800631e:	7bbb      	ldrb	r3, [r7, #14]
 8006320:	7b3a      	ldrb	r2, [r7, #12]
 8006322:	4911      	ldr	r1, [pc, #68]	@ (8006368 <UARTEx_SetNbDataToProcess+0x94>)
 8006324:	5c8a      	ldrb	r2, [r1, r2]
 8006326:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800632a:	7b3a      	ldrb	r2, [r7, #12]
 800632c:	490f      	ldr	r1, [pc, #60]	@ (800636c <UARTEx_SetNbDataToProcess+0x98>)
 800632e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006330:	fb93 f3f2 	sdiv	r3, r3, r2
 8006334:	b29a      	uxth	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	7b7a      	ldrb	r2, [r7, #13]
 8006340:	4909      	ldr	r1, [pc, #36]	@ (8006368 <UARTEx_SetNbDataToProcess+0x94>)
 8006342:	5c8a      	ldrb	r2, [r1, r2]
 8006344:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006348:	7b7a      	ldrb	r2, [r7, #13]
 800634a:	4908      	ldr	r1, [pc, #32]	@ (800636c <UARTEx_SetNbDataToProcess+0x98>)
 800634c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800634e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006352:	b29a      	uxth	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	08007714 	.word	0x08007714
 800636c:	0800771c 	.word	0x0800771c

08006370 <std>:
 8006370:	2300      	movs	r3, #0
 8006372:	b510      	push	{r4, lr}
 8006374:	4604      	mov	r4, r0
 8006376:	e9c0 3300 	strd	r3, r3, [r0]
 800637a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800637e:	6083      	str	r3, [r0, #8]
 8006380:	8181      	strh	r1, [r0, #12]
 8006382:	6643      	str	r3, [r0, #100]	@ 0x64
 8006384:	81c2      	strh	r2, [r0, #14]
 8006386:	6183      	str	r3, [r0, #24]
 8006388:	4619      	mov	r1, r3
 800638a:	2208      	movs	r2, #8
 800638c:	305c      	adds	r0, #92	@ 0x5c
 800638e:	f000 f9f9 	bl	8006784 <memset>
 8006392:	4b0d      	ldr	r3, [pc, #52]	@ (80063c8 <std+0x58>)
 8006394:	6263      	str	r3, [r4, #36]	@ 0x24
 8006396:	4b0d      	ldr	r3, [pc, #52]	@ (80063cc <std+0x5c>)
 8006398:	62a3      	str	r3, [r4, #40]	@ 0x28
 800639a:	4b0d      	ldr	r3, [pc, #52]	@ (80063d0 <std+0x60>)
 800639c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800639e:	4b0d      	ldr	r3, [pc, #52]	@ (80063d4 <std+0x64>)
 80063a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80063a2:	4b0d      	ldr	r3, [pc, #52]	@ (80063d8 <std+0x68>)
 80063a4:	6224      	str	r4, [r4, #32]
 80063a6:	429c      	cmp	r4, r3
 80063a8:	d006      	beq.n	80063b8 <std+0x48>
 80063aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063ae:	4294      	cmp	r4, r2
 80063b0:	d002      	beq.n	80063b8 <std+0x48>
 80063b2:	33d0      	adds	r3, #208	@ 0xd0
 80063b4:	429c      	cmp	r4, r3
 80063b6:	d105      	bne.n	80063c4 <std+0x54>
 80063b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c0:	f000 ba58 	b.w	8006874 <__retarget_lock_init_recursive>
 80063c4:	bd10      	pop	{r4, pc}
 80063c6:	bf00      	nop
 80063c8:	080065d5 	.word	0x080065d5
 80063cc:	080065f7 	.word	0x080065f7
 80063d0:	0800662f 	.word	0x0800662f
 80063d4:	08006653 	.word	0x08006653
 80063d8:	20001ac0 	.word	0x20001ac0

080063dc <stdio_exit_handler>:
 80063dc:	4a02      	ldr	r2, [pc, #8]	@ (80063e8 <stdio_exit_handler+0xc>)
 80063de:	4903      	ldr	r1, [pc, #12]	@ (80063ec <stdio_exit_handler+0x10>)
 80063e0:	4803      	ldr	r0, [pc, #12]	@ (80063f0 <stdio_exit_handler+0x14>)
 80063e2:	f000 b869 	b.w	80064b8 <_fwalk_sglue>
 80063e6:	bf00      	nop
 80063e8:	2000000c 	.word	0x2000000c
 80063ec:	08007115 	.word	0x08007115
 80063f0:	2000001c 	.word	0x2000001c

080063f4 <cleanup_stdio>:
 80063f4:	6841      	ldr	r1, [r0, #4]
 80063f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006428 <cleanup_stdio+0x34>)
 80063f8:	4299      	cmp	r1, r3
 80063fa:	b510      	push	{r4, lr}
 80063fc:	4604      	mov	r4, r0
 80063fe:	d001      	beq.n	8006404 <cleanup_stdio+0x10>
 8006400:	f000 fe88 	bl	8007114 <_fflush_r>
 8006404:	68a1      	ldr	r1, [r4, #8]
 8006406:	4b09      	ldr	r3, [pc, #36]	@ (800642c <cleanup_stdio+0x38>)
 8006408:	4299      	cmp	r1, r3
 800640a:	d002      	beq.n	8006412 <cleanup_stdio+0x1e>
 800640c:	4620      	mov	r0, r4
 800640e:	f000 fe81 	bl	8007114 <_fflush_r>
 8006412:	68e1      	ldr	r1, [r4, #12]
 8006414:	4b06      	ldr	r3, [pc, #24]	@ (8006430 <cleanup_stdio+0x3c>)
 8006416:	4299      	cmp	r1, r3
 8006418:	d004      	beq.n	8006424 <cleanup_stdio+0x30>
 800641a:	4620      	mov	r0, r4
 800641c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006420:	f000 be78 	b.w	8007114 <_fflush_r>
 8006424:	bd10      	pop	{r4, pc}
 8006426:	bf00      	nop
 8006428:	20001ac0 	.word	0x20001ac0
 800642c:	20001b28 	.word	0x20001b28
 8006430:	20001b90 	.word	0x20001b90

08006434 <global_stdio_init.part.0>:
 8006434:	b510      	push	{r4, lr}
 8006436:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <global_stdio_init.part.0+0x30>)
 8006438:	4c0b      	ldr	r4, [pc, #44]	@ (8006468 <global_stdio_init.part.0+0x34>)
 800643a:	4a0c      	ldr	r2, [pc, #48]	@ (800646c <global_stdio_init.part.0+0x38>)
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	4620      	mov	r0, r4
 8006440:	2200      	movs	r2, #0
 8006442:	2104      	movs	r1, #4
 8006444:	f7ff ff94 	bl	8006370 <std>
 8006448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800644c:	2201      	movs	r2, #1
 800644e:	2109      	movs	r1, #9
 8006450:	f7ff ff8e 	bl	8006370 <std>
 8006454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006458:	2202      	movs	r2, #2
 800645a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800645e:	2112      	movs	r1, #18
 8006460:	f7ff bf86 	b.w	8006370 <std>
 8006464:	20001bf8 	.word	0x20001bf8
 8006468:	20001ac0 	.word	0x20001ac0
 800646c:	080063dd 	.word	0x080063dd

08006470 <__sfp_lock_acquire>:
 8006470:	4801      	ldr	r0, [pc, #4]	@ (8006478 <__sfp_lock_acquire+0x8>)
 8006472:	f000 ba00 	b.w	8006876 <__retarget_lock_acquire_recursive>
 8006476:	bf00      	nop
 8006478:	20001c01 	.word	0x20001c01

0800647c <__sfp_lock_release>:
 800647c:	4801      	ldr	r0, [pc, #4]	@ (8006484 <__sfp_lock_release+0x8>)
 800647e:	f000 b9fb 	b.w	8006878 <__retarget_lock_release_recursive>
 8006482:	bf00      	nop
 8006484:	20001c01 	.word	0x20001c01

08006488 <__sinit>:
 8006488:	b510      	push	{r4, lr}
 800648a:	4604      	mov	r4, r0
 800648c:	f7ff fff0 	bl	8006470 <__sfp_lock_acquire>
 8006490:	6a23      	ldr	r3, [r4, #32]
 8006492:	b11b      	cbz	r3, 800649c <__sinit+0x14>
 8006494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006498:	f7ff bff0 	b.w	800647c <__sfp_lock_release>
 800649c:	4b04      	ldr	r3, [pc, #16]	@ (80064b0 <__sinit+0x28>)
 800649e:	6223      	str	r3, [r4, #32]
 80064a0:	4b04      	ldr	r3, [pc, #16]	@ (80064b4 <__sinit+0x2c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1f5      	bne.n	8006494 <__sinit+0xc>
 80064a8:	f7ff ffc4 	bl	8006434 <global_stdio_init.part.0>
 80064ac:	e7f2      	b.n	8006494 <__sinit+0xc>
 80064ae:	bf00      	nop
 80064b0:	080063f5 	.word	0x080063f5
 80064b4:	20001bf8 	.word	0x20001bf8

080064b8 <_fwalk_sglue>:
 80064b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064bc:	4607      	mov	r7, r0
 80064be:	4688      	mov	r8, r1
 80064c0:	4614      	mov	r4, r2
 80064c2:	2600      	movs	r6, #0
 80064c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064c8:	f1b9 0901 	subs.w	r9, r9, #1
 80064cc:	d505      	bpl.n	80064da <_fwalk_sglue+0x22>
 80064ce:	6824      	ldr	r4, [r4, #0]
 80064d0:	2c00      	cmp	r4, #0
 80064d2:	d1f7      	bne.n	80064c4 <_fwalk_sglue+0xc>
 80064d4:	4630      	mov	r0, r6
 80064d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064da:	89ab      	ldrh	r3, [r5, #12]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d907      	bls.n	80064f0 <_fwalk_sglue+0x38>
 80064e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064e4:	3301      	adds	r3, #1
 80064e6:	d003      	beq.n	80064f0 <_fwalk_sglue+0x38>
 80064e8:	4629      	mov	r1, r5
 80064ea:	4638      	mov	r0, r7
 80064ec:	47c0      	blx	r8
 80064ee:	4306      	orrs	r6, r0
 80064f0:	3568      	adds	r5, #104	@ 0x68
 80064f2:	e7e9      	b.n	80064c8 <_fwalk_sglue+0x10>

080064f4 <iprintf>:
 80064f4:	b40f      	push	{r0, r1, r2, r3}
 80064f6:	b507      	push	{r0, r1, r2, lr}
 80064f8:	4906      	ldr	r1, [pc, #24]	@ (8006514 <iprintf+0x20>)
 80064fa:	ab04      	add	r3, sp, #16
 80064fc:	6808      	ldr	r0, [r1, #0]
 80064fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006502:	6881      	ldr	r1, [r0, #8]
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	f000 fadb 	bl	8006ac0 <_vfiprintf_r>
 800650a:	b003      	add	sp, #12
 800650c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006510:	b004      	add	sp, #16
 8006512:	4770      	bx	lr
 8006514:	20000018 	.word	0x20000018

08006518 <_puts_r>:
 8006518:	6a03      	ldr	r3, [r0, #32]
 800651a:	b570      	push	{r4, r5, r6, lr}
 800651c:	6884      	ldr	r4, [r0, #8]
 800651e:	4605      	mov	r5, r0
 8006520:	460e      	mov	r6, r1
 8006522:	b90b      	cbnz	r3, 8006528 <_puts_r+0x10>
 8006524:	f7ff ffb0 	bl	8006488 <__sinit>
 8006528:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800652a:	07db      	lsls	r3, r3, #31
 800652c:	d405      	bmi.n	800653a <_puts_r+0x22>
 800652e:	89a3      	ldrh	r3, [r4, #12]
 8006530:	0598      	lsls	r0, r3, #22
 8006532:	d402      	bmi.n	800653a <_puts_r+0x22>
 8006534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006536:	f000 f99e 	bl	8006876 <__retarget_lock_acquire_recursive>
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	0719      	lsls	r1, r3, #28
 800653e:	d502      	bpl.n	8006546 <_puts_r+0x2e>
 8006540:	6923      	ldr	r3, [r4, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d135      	bne.n	80065b2 <_puts_r+0x9a>
 8006546:	4621      	mov	r1, r4
 8006548:	4628      	mov	r0, r5
 800654a:	f000 f8c5 	bl	80066d8 <__swsetup_r>
 800654e:	b380      	cbz	r0, 80065b2 <_puts_r+0x9a>
 8006550:	f04f 35ff 	mov.w	r5, #4294967295
 8006554:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006556:	07da      	lsls	r2, r3, #31
 8006558:	d405      	bmi.n	8006566 <_puts_r+0x4e>
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	059b      	lsls	r3, r3, #22
 800655e:	d402      	bmi.n	8006566 <_puts_r+0x4e>
 8006560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006562:	f000 f989 	bl	8006878 <__retarget_lock_release_recursive>
 8006566:	4628      	mov	r0, r5
 8006568:	bd70      	pop	{r4, r5, r6, pc}
 800656a:	2b00      	cmp	r3, #0
 800656c:	da04      	bge.n	8006578 <_puts_r+0x60>
 800656e:	69a2      	ldr	r2, [r4, #24]
 8006570:	429a      	cmp	r2, r3
 8006572:	dc17      	bgt.n	80065a4 <_puts_r+0x8c>
 8006574:	290a      	cmp	r1, #10
 8006576:	d015      	beq.n	80065a4 <_puts_r+0x8c>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	6022      	str	r2, [r4, #0]
 800657e:	7019      	strb	r1, [r3, #0]
 8006580:	68a3      	ldr	r3, [r4, #8]
 8006582:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006586:	3b01      	subs	r3, #1
 8006588:	60a3      	str	r3, [r4, #8]
 800658a:	2900      	cmp	r1, #0
 800658c:	d1ed      	bne.n	800656a <_puts_r+0x52>
 800658e:	2b00      	cmp	r3, #0
 8006590:	da11      	bge.n	80065b6 <_puts_r+0x9e>
 8006592:	4622      	mov	r2, r4
 8006594:	210a      	movs	r1, #10
 8006596:	4628      	mov	r0, r5
 8006598:	f000 f85f 	bl	800665a <__swbuf_r>
 800659c:	3001      	adds	r0, #1
 800659e:	d0d7      	beq.n	8006550 <_puts_r+0x38>
 80065a0:	250a      	movs	r5, #10
 80065a2:	e7d7      	b.n	8006554 <_puts_r+0x3c>
 80065a4:	4622      	mov	r2, r4
 80065a6:	4628      	mov	r0, r5
 80065a8:	f000 f857 	bl	800665a <__swbuf_r>
 80065ac:	3001      	adds	r0, #1
 80065ae:	d1e7      	bne.n	8006580 <_puts_r+0x68>
 80065b0:	e7ce      	b.n	8006550 <_puts_r+0x38>
 80065b2:	3e01      	subs	r6, #1
 80065b4:	e7e4      	b.n	8006580 <_puts_r+0x68>
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	6022      	str	r2, [r4, #0]
 80065bc:	220a      	movs	r2, #10
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	e7ee      	b.n	80065a0 <_puts_r+0x88>
	...

080065c4 <puts>:
 80065c4:	4b02      	ldr	r3, [pc, #8]	@ (80065d0 <puts+0xc>)
 80065c6:	4601      	mov	r1, r0
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	f7ff bfa5 	b.w	8006518 <_puts_r>
 80065ce:	bf00      	nop
 80065d0:	20000018 	.word	0x20000018

080065d4 <__sread>:
 80065d4:	b510      	push	{r4, lr}
 80065d6:	460c      	mov	r4, r1
 80065d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065dc:	f000 f8fc 	bl	80067d8 <_read_r>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	bfab      	itete	ge
 80065e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80065e6:	89a3      	ldrhlt	r3, [r4, #12]
 80065e8:	181b      	addge	r3, r3, r0
 80065ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065ee:	bfac      	ite	ge
 80065f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80065f2:	81a3      	strhlt	r3, [r4, #12]
 80065f4:	bd10      	pop	{r4, pc}

080065f6 <__swrite>:
 80065f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065fa:	461f      	mov	r7, r3
 80065fc:	898b      	ldrh	r3, [r1, #12]
 80065fe:	05db      	lsls	r3, r3, #23
 8006600:	4605      	mov	r5, r0
 8006602:	460c      	mov	r4, r1
 8006604:	4616      	mov	r6, r2
 8006606:	d505      	bpl.n	8006614 <__swrite+0x1e>
 8006608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800660c:	2302      	movs	r3, #2
 800660e:	2200      	movs	r2, #0
 8006610:	f000 f8d0 	bl	80067b4 <_lseek_r>
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800661a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800661e:	81a3      	strh	r3, [r4, #12]
 8006620:	4632      	mov	r2, r6
 8006622:	463b      	mov	r3, r7
 8006624:	4628      	mov	r0, r5
 8006626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800662a:	f000 b8e7 	b.w	80067fc <_write_r>

0800662e <__sseek>:
 800662e:	b510      	push	{r4, lr}
 8006630:	460c      	mov	r4, r1
 8006632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006636:	f000 f8bd 	bl	80067b4 <_lseek_r>
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	bf15      	itete	ne
 8006640:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006642:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006646:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800664a:	81a3      	strheq	r3, [r4, #12]
 800664c:	bf18      	it	ne
 800664e:	81a3      	strhne	r3, [r4, #12]
 8006650:	bd10      	pop	{r4, pc}

08006652 <__sclose>:
 8006652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006656:	f000 b89d 	b.w	8006794 <_close_r>

0800665a <__swbuf_r>:
 800665a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665c:	460e      	mov	r6, r1
 800665e:	4614      	mov	r4, r2
 8006660:	4605      	mov	r5, r0
 8006662:	b118      	cbz	r0, 800666c <__swbuf_r+0x12>
 8006664:	6a03      	ldr	r3, [r0, #32]
 8006666:	b90b      	cbnz	r3, 800666c <__swbuf_r+0x12>
 8006668:	f7ff ff0e 	bl	8006488 <__sinit>
 800666c:	69a3      	ldr	r3, [r4, #24]
 800666e:	60a3      	str	r3, [r4, #8]
 8006670:	89a3      	ldrh	r3, [r4, #12]
 8006672:	071a      	lsls	r2, r3, #28
 8006674:	d501      	bpl.n	800667a <__swbuf_r+0x20>
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	b943      	cbnz	r3, 800668c <__swbuf_r+0x32>
 800667a:	4621      	mov	r1, r4
 800667c:	4628      	mov	r0, r5
 800667e:	f000 f82b 	bl	80066d8 <__swsetup_r>
 8006682:	b118      	cbz	r0, 800668c <__swbuf_r+0x32>
 8006684:	f04f 37ff 	mov.w	r7, #4294967295
 8006688:	4638      	mov	r0, r7
 800668a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	6922      	ldr	r2, [r4, #16]
 8006690:	1a98      	subs	r0, r3, r2
 8006692:	6963      	ldr	r3, [r4, #20]
 8006694:	b2f6      	uxtb	r6, r6
 8006696:	4283      	cmp	r3, r0
 8006698:	4637      	mov	r7, r6
 800669a:	dc05      	bgt.n	80066a8 <__swbuf_r+0x4e>
 800669c:	4621      	mov	r1, r4
 800669e:	4628      	mov	r0, r5
 80066a0:	f000 fd38 	bl	8007114 <_fflush_r>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d1ed      	bne.n	8006684 <__swbuf_r+0x2a>
 80066a8:	68a3      	ldr	r3, [r4, #8]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	60a3      	str	r3, [r4, #8]
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	6022      	str	r2, [r4, #0]
 80066b4:	701e      	strb	r6, [r3, #0]
 80066b6:	6962      	ldr	r2, [r4, #20]
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d004      	beq.n	80066c8 <__swbuf_r+0x6e>
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	07db      	lsls	r3, r3, #31
 80066c2:	d5e1      	bpl.n	8006688 <__swbuf_r+0x2e>
 80066c4:	2e0a      	cmp	r6, #10
 80066c6:	d1df      	bne.n	8006688 <__swbuf_r+0x2e>
 80066c8:	4621      	mov	r1, r4
 80066ca:	4628      	mov	r0, r5
 80066cc:	f000 fd22 	bl	8007114 <_fflush_r>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d0d9      	beq.n	8006688 <__swbuf_r+0x2e>
 80066d4:	e7d6      	b.n	8006684 <__swbuf_r+0x2a>
	...

080066d8 <__swsetup_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	4b29      	ldr	r3, [pc, #164]	@ (8006780 <__swsetup_r+0xa8>)
 80066dc:	4605      	mov	r5, r0
 80066de:	6818      	ldr	r0, [r3, #0]
 80066e0:	460c      	mov	r4, r1
 80066e2:	b118      	cbz	r0, 80066ec <__swsetup_r+0x14>
 80066e4:	6a03      	ldr	r3, [r0, #32]
 80066e6:	b90b      	cbnz	r3, 80066ec <__swsetup_r+0x14>
 80066e8:	f7ff fece 	bl	8006488 <__sinit>
 80066ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066f0:	0719      	lsls	r1, r3, #28
 80066f2:	d422      	bmi.n	800673a <__swsetup_r+0x62>
 80066f4:	06da      	lsls	r2, r3, #27
 80066f6:	d407      	bmi.n	8006708 <__swsetup_r+0x30>
 80066f8:	2209      	movs	r2, #9
 80066fa:	602a      	str	r2, [r5, #0]
 80066fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006700:	81a3      	strh	r3, [r4, #12]
 8006702:	f04f 30ff 	mov.w	r0, #4294967295
 8006706:	e033      	b.n	8006770 <__swsetup_r+0x98>
 8006708:	0758      	lsls	r0, r3, #29
 800670a:	d512      	bpl.n	8006732 <__swsetup_r+0x5a>
 800670c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800670e:	b141      	cbz	r1, 8006722 <__swsetup_r+0x4a>
 8006710:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006714:	4299      	cmp	r1, r3
 8006716:	d002      	beq.n	800671e <__swsetup_r+0x46>
 8006718:	4628      	mov	r0, r5
 800671a:	f000 f8af 	bl	800687c <_free_r>
 800671e:	2300      	movs	r3, #0
 8006720:	6363      	str	r3, [r4, #52]	@ 0x34
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006728:	81a3      	strh	r3, [r4, #12]
 800672a:	2300      	movs	r3, #0
 800672c:	6063      	str	r3, [r4, #4]
 800672e:	6923      	ldr	r3, [r4, #16]
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	f043 0308 	orr.w	r3, r3, #8
 8006738:	81a3      	strh	r3, [r4, #12]
 800673a:	6923      	ldr	r3, [r4, #16]
 800673c:	b94b      	cbnz	r3, 8006752 <__swsetup_r+0x7a>
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006748:	d003      	beq.n	8006752 <__swsetup_r+0x7a>
 800674a:	4621      	mov	r1, r4
 800674c:	4628      	mov	r0, r5
 800674e:	f000 fd2f 	bl	80071b0 <__smakebuf_r>
 8006752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006756:	f013 0201 	ands.w	r2, r3, #1
 800675a:	d00a      	beq.n	8006772 <__swsetup_r+0x9a>
 800675c:	2200      	movs	r2, #0
 800675e:	60a2      	str	r2, [r4, #8]
 8006760:	6962      	ldr	r2, [r4, #20]
 8006762:	4252      	negs	r2, r2
 8006764:	61a2      	str	r2, [r4, #24]
 8006766:	6922      	ldr	r2, [r4, #16]
 8006768:	b942      	cbnz	r2, 800677c <__swsetup_r+0xa4>
 800676a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800676e:	d1c5      	bne.n	80066fc <__swsetup_r+0x24>
 8006770:	bd38      	pop	{r3, r4, r5, pc}
 8006772:	0799      	lsls	r1, r3, #30
 8006774:	bf58      	it	pl
 8006776:	6962      	ldrpl	r2, [r4, #20]
 8006778:	60a2      	str	r2, [r4, #8]
 800677a:	e7f4      	b.n	8006766 <__swsetup_r+0x8e>
 800677c:	2000      	movs	r0, #0
 800677e:	e7f7      	b.n	8006770 <__swsetup_r+0x98>
 8006780:	20000018 	.word	0x20000018

08006784 <memset>:
 8006784:	4402      	add	r2, r0
 8006786:	4603      	mov	r3, r0
 8006788:	4293      	cmp	r3, r2
 800678a:	d100      	bne.n	800678e <memset+0xa>
 800678c:	4770      	bx	lr
 800678e:	f803 1b01 	strb.w	r1, [r3], #1
 8006792:	e7f9      	b.n	8006788 <memset+0x4>

08006794 <_close_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d06      	ldr	r5, [pc, #24]	@ (80067b0 <_close_r+0x1c>)
 8006798:	2300      	movs	r3, #0
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	602b      	str	r3, [r5, #0]
 80067a0:	f7fb f859 	bl	8001856 <_close>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	d102      	bne.n	80067ae <_close_r+0x1a>
 80067a8:	682b      	ldr	r3, [r5, #0]
 80067aa:	b103      	cbz	r3, 80067ae <_close_r+0x1a>
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	bd38      	pop	{r3, r4, r5, pc}
 80067b0:	20001bfc 	.word	0x20001bfc

080067b4 <_lseek_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	4d07      	ldr	r5, [pc, #28]	@ (80067d4 <_lseek_r+0x20>)
 80067b8:	4604      	mov	r4, r0
 80067ba:	4608      	mov	r0, r1
 80067bc:	4611      	mov	r1, r2
 80067be:	2200      	movs	r2, #0
 80067c0:	602a      	str	r2, [r5, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	f7fb f86e 	bl	80018a4 <_lseek>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d102      	bne.n	80067d2 <_lseek_r+0x1e>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	b103      	cbz	r3, 80067d2 <_lseek_r+0x1e>
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	20001bfc 	.word	0x20001bfc

080067d8 <_read_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d07      	ldr	r5, [pc, #28]	@ (80067f8 <_read_r+0x20>)
 80067dc:	4604      	mov	r4, r0
 80067de:	4608      	mov	r0, r1
 80067e0:	4611      	mov	r1, r2
 80067e2:	2200      	movs	r2, #0
 80067e4:	602a      	str	r2, [r5, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f7fa fffc 	bl	80017e4 <_read>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_read_r+0x1e>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_read_r+0x1e>
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	20001bfc 	.word	0x20001bfc

080067fc <_write_r>:
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	4d07      	ldr	r5, [pc, #28]	@ (800681c <_write_r+0x20>)
 8006800:	4604      	mov	r4, r0
 8006802:	4608      	mov	r0, r1
 8006804:	4611      	mov	r1, r2
 8006806:	2200      	movs	r2, #0
 8006808:	602a      	str	r2, [r5, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	f7fb f807 	bl	800181e <_write>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d102      	bne.n	800681a <_write_r+0x1e>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	b103      	cbz	r3, 800681a <_write_r+0x1e>
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	20001bfc 	.word	0x20001bfc

08006820 <__errno>:
 8006820:	4b01      	ldr	r3, [pc, #4]	@ (8006828 <__errno+0x8>)
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20000018 	.word	0x20000018

0800682c <__libc_init_array>:
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	4d0d      	ldr	r5, [pc, #52]	@ (8006864 <__libc_init_array+0x38>)
 8006830:	4c0d      	ldr	r4, [pc, #52]	@ (8006868 <__libc_init_array+0x3c>)
 8006832:	1b64      	subs	r4, r4, r5
 8006834:	10a4      	asrs	r4, r4, #2
 8006836:	2600      	movs	r6, #0
 8006838:	42a6      	cmp	r6, r4
 800683a:	d109      	bne.n	8006850 <__libc_init_array+0x24>
 800683c:	4d0b      	ldr	r5, [pc, #44]	@ (800686c <__libc_init_array+0x40>)
 800683e:	4c0c      	ldr	r4, [pc, #48]	@ (8006870 <__libc_init_array+0x44>)
 8006840:	f000 ff0c 	bl	800765c <_init>
 8006844:	1b64      	subs	r4, r4, r5
 8006846:	10a4      	asrs	r4, r4, #2
 8006848:	2600      	movs	r6, #0
 800684a:	42a6      	cmp	r6, r4
 800684c:	d105      	bne.n	800685a <__libc_init_array+0x2e>
 800684e:	bd70      	pop	{r4, r5, r6, pc}
 8006850:	f855 3b04 	ldr.w	r3, [r5], #4
 8006854:	4798      	blx	r3
 8006856:	3601      	adds	r6, #1
 8006858:	e7ee      	b.n	8006838 <__libc_init_array+0xc>
 800685a:	f855 3b04 	ldr.w	r3, [r5], #4
 800685e:	4798      	blx	r3
 8006860:	3601      	adds	r6, #1
 8006862:	e7f2      	b.n	800684a <__libc_init_array+0x1e>
 8006864:	080077a0 	.word	0x080077a0
 8006868:	080077a0 	.word	0x080077a0
 800686c:	080077a0 	.word	0x080077a0
 8006870:	080077a4 	.word	0x080077a4

08006874 <__retarget_lock_init_recursive>:
 8006874:	4770      	bx	lr

08006876 <__retarget_lock_acquire_recursive>:
 8006876:	4770      	bx	lr

08006878 <__retarget_lock_release_recursive>:
 8006878:	4770      	bx	lr
	...

0800687c <_free_r>:
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	4605      	mov	r5, r0
 8006880:	2900      	cmp	r1, #0
 8006882:	d041      	beq.n	8006908 <_free_r+0x8c>
 8006884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006888:	1f0c      	subs	r4, r1, #4
 800688a:	2b00      	cmp	r3, #0
 800688c:	bfb8      	it	lt
 800688e:	18e4      	addlt	r4, r4, r3
 8006890:	f000 f8e0 	bl	8006a54 <__malloc_lock>
 8006894:	4a1d      	ldr	r2, [pc, #116]	@ (800690c <_free_r+0x90>)
 8006896:	6813      	ldr	r3, [r2, #0]
 8006898:	b933      	cbnz	r3, 80068a8 <_free_r+0x2c>
 800689a:	6063      	str	r3, [r4, #4]
 800689c:	6014      	str	r4, [r2, #0]
 800689e:	4628      	mov	r0, r5
 80068a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068a4:	f000 b8dc 	b.w	8006a60 <__malloc_unlock>
 80068a8:	42a3      	cmp	r3, r4
 80068aa:	d908      	bls.n	80068be <_free_r+0x42>
 80068ac:	6820      	ldr	r0, [r4, #0]
 80068ae:	1821      	adds	r1, r4, r0
 80068b0:	428b      	cmp	r3, r1
 80068b2:	bf01      	itttt	eq
 80068b4:	6819      	ldreq	r1, [r3, #0]
 80068b6:	685b      	ldreq	r3, [r3, #4]
 80068b8:	1809      	addeq	r1, r1, r0
 80068ba:	6021      	streq	r1, [r4, #0]
 80068bc:	e7ed      	b.n	800689a <_free_r+0x1e>
 80068be:	461a      	mov	r2, r3
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	b10b      	cbz	r3, 80068c8 <_free_r+0x4c>
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	d9fa      	bls.n	80068be <_free_r+0x42>
 80068c8:	6811      	ldr	r1, [r2, #0]
 80068ca:	1850      	adds	r0, r2, r1
 80068cc:	42a0      	cmp	r0, r4
 80068ce:	d10b      	bne.n	80068e8 <_free_r+0x6c>
 80068d0:	6820      	ldr	r0, [r4, #0]
 80068d2:	4401      	add	r1, r0
 80068d4:	1850      	adds	r0, r2, r1
 80068d6:	4283      	cmp	r3, r0
 80068d8:	6011      	str	r1, [r2, #0]
 80068da:	d1e0      	bne.n	800689e <_free_r+0x22>
 80068dc:	6818      	ldr	r0, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	6053      	str	r3, [r2, #4]
 80068e2:	4408      	add	r0, r1
 80068e4:	6010      	str	r0, [r2, #0]
 80068e6:	e7da      	b.n	800689e <_free_r+0x22>
 80068e8:	d902      	bls.n	80068f0 <_free_r+0x74>
 80068ea:	230c      	movs	r3, #12
 80068ec:	602b      	str	r3, [r5, #0]
 80068ee:	e7d6      	b.n	800689e <_free_r+0x22>
 80068f0:	6820      	ldr	r0, [r4, #0]
 80068f2:	1821      	adds	r1, r4, r0
 80068f4:	428b      	cmp	r3, r1
 80068f6:	bf04      	itt	eq
 80068f8:	6819      	ldreq	r1, [r3, #0]
 80068fa:	685b      	ldreq	r3, [r3, #4]
 80068fc:	6063      	str	r3, [r4, #4]
 80068fe:	bf04      	itt	eq
 8006900:	1809      	addeq	r1, r1, r0
 8006902:	6021      	streq	r1, [r4, #0]
 8006904:	6054      	str	r4, [r2, #4]
 8006906:	e7ca      	b.n	800689e <_free_r+0x22>
 8006908:	bd38      	pop	{r3, r4, r5, pc}
 800690a:	bf00      	nop
 800690c:	20001c08 	.word	0x20001c08

08006910 <sbrk_aligned>:
 8006910:	b570      	push	{r4, r5, r6, lr}
 8006912:	4e0f      	ldr	r6, [pc, #60]	@ (8006950 <sbrk_aligned+0x40>)
 8006914:	460c      	mov	r4, r1
 8006916:	6831      	ldr	r1, [r6, #0]
 8006918:	4605      	mov	r5, r0
 800691a:	b911      	cbnz	r1, 8006922 <sbrk_aligned+0x12>
 800691c:	f000 fca6 	bl	800726c <_sbrk_r>
 8006920:	6030      	str	r0, [r6, #0]
 8006922:	4621      	mov	r1, r4
 8006924:	4628      	mov	r0, r5
 8006926:	f000 fca1 	bl	800726c <_sbrk_r>
 800692a:	1c43      	adds	r3, r0, #1
 800692c:	d103      	bne.n	8006936 <sbrk_aligned+0x26>
 800692e:	f04f 34ff 	mov.w	r4, #4294967295
 8006932:	4620      	mov	r0, r4
 8006934:	bd70      	pop	{r4, r5, r6, pc}
 8006936:	1cc4      	adds	r4, r0, #3
 8006938:	f024 0403 	bic.w	r4, r4, #3
 800693c:	42a0      	cmp	r0, r4
 800693e:	d0f8      	beq.n	8006932 <sbrk_aligned+0x22>
 8006940:	1a21      	subs	r1, r4, r0
 8006942:	4628      	mov	r0, r5
 8006944:	f000 fc92 	bl	800726c <_sbrk_r>
 8006948:	3001      	adds	r0, #1
 800694a:	d1f2      	bne.n	8006932 <sbrk_aligned+0x22>
 800694c:	e7ef      	b.n	800692e <sbrk_aligned+0x1e>
 800694e:	bf00      	nop
 8006950:	20001c04 	.word	0x20001c04

08006954 <_malloc_r>:
 8006954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006958:	1ccd      	adds	r5, r1, #3
 800695a:	f025 0503 	bic.w	r5, r5, #3
 800695e:	3508      	adds	r5, #8
 8006960:	2d0c      	cmp	r5, #12
 8006962:	bf38      	it	cc
 8006964:	250c      	movcc	r5, #12
 8006966:	2d00      	cmp	r5, #0
 8006968:	4606      	mov	r6, r0
 800696a:	db01      	blt.n	8006970 <_malloc_r+0x1c>
 800696c:	42a9      	cmp	r1, r5
 800696e:	d904      	bls.n	800697a <_malloc_r+0x26>
 8006970:	230c      	movs	r3, #12
 8006972:	6033      	str	r3, [r6, #0]
 8006974:	2000      	movs	r0, #0
 8006976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800697a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a50 <_malloc_r+0xfc>
 800697e:	f000 f869 	bl	8006a54 <__malloc_lock>
 8006982:	f8d8 3000 	ldr.w	r3, [r8]
 8006986:	461c      	mov	r4, r3
 8006988:	bb44      	cbnz	r4, 80069dc <_malloc_r+0x88>
 800698a:	4629      	mov	r1, r5
 800698c:	4630      	mov	r0, r6
 800698e:	f7ff ffbf 	bl	8006910 <sbrk_aligned>
 8006992:	1c43      	adds	r3, r0, #1
 8006994:	4604      	mov	r4, r0
 8006996:	d158      	bne.n	8006a4a <_malloc_r+0xf6>
 8006998:	f8d8 4000 	ldr.w	r4, [r8]
 800699c:	4627      	mov	r7, r4
 800699e:	2f00      	cmp	r7, #0
 80069a0:	d143      	bne.n	8006a2a <_malloc_r+0xd6>
 80069a2:	2c00      	cmp	r4, #0
 80069a4:	d04b      	beq.n	8006a3e <_malloc_r+0xea>
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	4639      	mov	r1, r7
 80069aa:	4630      	mov	r0, r6
 80069ac:	eb04 0903 	add.w	r9, r4, r3
 80069b0:	f000 fc5c 	bl	800726c <_sbrk_r>
 80069b4:	4581      	cmp	r9, r0
 80069b6:	d142      	bne.n	8006a3e <_malloc_r+0xea>
 80069b8:	6821      	ldr	r1, [r4, #0]
 80069ba:	1a6d      	subs	r5, r5, r1
 80069bc:	4629      	mov	r1, r5
 80069be:	4630      	mov	r0, r6
 80069c0:	f7ff ffa6 	bl	8006910 <sbrk_aligned>
 80069c4:	3001      	adds	r0, #1
 80069c6:	d03a      	beq.n	8006a3e <_malloc_r+0xea>
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	442b      	add	r3, r5
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	f8d8 3000 	ldr.w	r3, [r8]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	bb62      	cbnz	r2, 8006a30 <_malloc_r+0xdc>
 80069d6:	f8c8 7000 	str.w	r7, [r8]
 80069da:	e00f      	b.n	80069fc <_malloc_r+0xa8>
 80069dc:	6822      	ldr	r2, [r4, #0]
 80069de:	1b52      	subs	r2, r2, r5
 80069e0:	d420      	bmi.n	8006a24 <_malloc_r+0xd0>
 80069e2:	2a0b      	cmp	r2, #11
 80069e4:	d917      	bls.n	8006a16 <_malloc_r+0xc2>
 80069e6:	1961      	adds	r1, r4, r5
 80069e8:	42a3      	cmp	r3, r4
 80069ea:	6025      	str	r5, [r4, #0]
 80069ec:	bf18      	it	ne
 80069ee:	6059      	strne	r1, [r3, #4]
 80069f0:	6863      	ldr	r3, [r4, #4]
 80069f2:	bf08      	it	eq
 80069f4:	f8c8 1000 	streq.w	r1, [r8]
 80069f8:	5162      	str	r2, [r4, r5]
 80069fa:	604b      	str	r3, [r1, #4]
 80069fc:	4630      	mov	r0, r6
 80069fe:	f000 f82f 	bl	8006a60 <__malloc_unlock>
 8006a02:	f104 000b 	add.w	r0, r4, #11
 8006a06:	1d23      	adds	r3, r4, #4
 8006a08:	f020 0007 	bic.w	r0, r0, #7
 8006a0c:	1ac2      	subs	r2, r0, r3
 8006a0e:	bf1c      	itt	ne
 8006a10:	1a1b      	subne	r3, r3, r0
 8006a12:	50a3      	strne	r3, [r4, r2]
 8006a14:	e7af      	b.n	8006976 <_malloc_r+0x22>
 8006a16:	6862      	ldr	r2, [r4, #4]
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	bf0c      	ite	eq
 8006a1c:	f8c8 2000 	streq.w	r2, [r8]
 8006a20:	605a      	strne	r2, [r3, #4]
 8006a22:	e7eb      	b.n	80069fc <_malloc_r+0xa8>
 8006a24:	4623      	mov	r3, r4
 8006a26:	6864      	ldr	r4, [r4, #4]
 8006a28:	e7ae      	b.n	8006988 <_malloc_r+0x34>
 8006a2a:	463c      	mov	r4, r7
 8006a2c:	687f      	ldr	r7, [r7, #4]
 8006a2e:	e7b6      	b.n	800699e <_malloc_r+0x4a>
 8006a30:	461a      	mov	r2, r3
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	42a3      	cmp	r3, r4
 8006a36:	d1fb      	bne.n	8006a30 <_malloc_r+0xdc>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	6053      	str	r3, [r2, #4]
 8006a3c:	e7de      	b.n	80069fc <_malloc_r+0xa8>
 8006a3e:	230c      	movs	r3, #12
 8006a40:	6033      	str	r3, [r6, #0]
 8006a42:	4630      	mov	r0, r6
 8006a44:	f000 f80c 	bl	8006a60 <__malloc_unlock>
 8006a48:	e794      	b.n	8006974 <_malloc_r+0x20>
 8006a4a:	6005      	str	r5, [r0, #0]
 8006a4c:	e7d6      	b.n	80069fc <_malloc_r+0xa8>
 8006a4e:	bf00      	nop
 8006a50:	20001c08 	.word	0x20001c08

08006a54 <__malloc_lock>:
 8006a54:	4801      	ldr	r0, [pc, #4]	@ (8006a5c <__malloc_lock+0x8>)
 8006a56:	f7ff bf0e 	b.w	8006876 <__retarget_lock_acquire_recursive>
 8006a5a:	bf00      	nop
 8006a5c:	20001c00 	.word	0x20001c00

08006a60 <__malloc_unlock>:
 8006a60:	4801      	ldr	r0, [pc, #4]	@ (8006a68 <__malloc_unlock+0x8>)
 8006a62:	f7ff bf09 	b.w	8006878 <__retarget_lock_release_recursive>
 8006a66:	bf00      	nop
 8006a68:	20001c00 	.word	0x20001c00

08006a6c <__sfputc_r>:
 8006a6c:	6893      	ldr	r3, [r2, #8]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	b410      	push	{r4}
 8006a74:	6093      	str	r3, [r2, #8]
 8006a76:	da08      	bge.n	8006a8a <__sfputc_r+0x1e>
 8006a78:	6994      	ldr	r4, [r2, #24]
 8006a7a:	42a3      	cmp	r3, r4
 8006a7c:	db01      	blt.n	8006a82 <__sfputc_r+0x16>
 8006a7e:	290a      	cmp	r1, #10
 8006a80:	d103      	bne.n	8006a8a <__sfputc_r+0x1e>
 8006a82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a86:	f7ff bde8 	b.w	800665a <__swbuf_r>
 8006a8a:	6813      	ldr	r3, [r2, #0]
 8006a8c:	1c58      	adds	r0, r3, #1
 8006a8e:	6010      	str	r0, [r2, #0]
 8006a90:	7019      	strb	r1, [r3, #0]
 8006a92:	4608      	mov	r0, r1
 8006a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <__sfputs_r>:
 8006a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9c:	4606      	mov	r6, r0
 8006a9e:	460f      	mov	r7, r1
 8006aa0:	4614      	mov	r4, r2
 8006aa2:	18d5      	adds	r5, r2, r3
 8006aa4:	42ac      	cmp	r4, r5
 8006aa6:	d101      	bne.n	8006aac <__sfputs_r+0x12>
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	e007      	b.n	8006abc <__sfputs_r+0x22>
 8006aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab0:	463a      	mov	r2, r7
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f7ff ffda 	bl	8006a6c <__sfputc_r>
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	d1f3      	bne.n	8006aa4 <__sfputs_r+0xa>
 8006abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ac0 <_vfiprintf_r>:
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	460d      	mov	r5, r1
 8006ac6:	b09d      	sub	sp, #116	@ 0x74
 8006ac8:	4614      	mov	r4, r2
 8006aca:	4698      	mov	r8, r3
 8006acc:	4606      	mov	r6, r0
 8006ace:	b118      	cbz	r0, 8006ad8 <_vfiprintf_r+0x18>
 8006ad0:	6a03      	ldr	r3, [r0, #32]
 8006ad2:	b90b      	cbnz	r3, 8006ad8 <_vfiprintf_r+0x18>
 8006ad4:	f7ff fcd8 	bl	8006488 <__sinit>
 8006ad8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ada:	07d9      	lsls	r1, r3, #31
 8006adc:	d405      	bmi.n	8006aea <_vfiprintf_r+0x2a>
 8006ade:	89ab      	ldrh	r3, [r5, #12]
 8006ae0:	059a      	lsls	r2, r3, #22
 8006ae2:	d402      	bmi.n	8006aea <_vfiprintf_r+0x2a>
 8006ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ae6:	f7ff fec6 	bl	8006876 <__retarget_lock_acquire_recursive>
 8006aea:	89ab      	ldrh	r3, [r5, #12]
 8006aec:	071b      	lsls	r3, r3, #28
 8006aee:	d501      	bpl.n	8006af4 <_vfiprintf_r+0x34>
 8006af0:	692b      	ldr	r3, [r5, #16]
 8006af2:	b99b      	cbnz	r3, 8006b1c <_vfiprintf_r+0x5c>
 8006af4:	4629      	mov	r1, r5
 8006af6:	4630      	mov	r0, r6
 8006af8:	f7ff fdee 	bl	80066d8 <__swsetup_r>
 8006afc:	b170      	cbz	r0, 8006b1c <_vfiprintf_r+0x5c>
 8006afe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b00:	07dc      	lsls	r4, r3, #31
 8006b02:	d504      	bpl.n	8006b0e <_vfiprintf_r+0x4e>
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	b01d      	add	sp, #116	@ 0x74
 8006b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0e:	89ab      	ldrh	r3, [r5, #12]
 8006b10:	0598      	lsls	r0, r3, #22
 8006b12:	d4f7      	bmi.n	8006b04 <_vfiprintf_r+0x44>
 8006b14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b16:	f7ff feaf 	bl	8006878 <__retarget_lock_release_recursive>
 8006b1a:	e7f3      	b.n	8006b04 <_vfiprintf_r+0x44>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b20:	2320      	movs	r3, #32
 8006b22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b26:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b2a:	2330      	movs	r3, #48	@ 0x30
 8006b2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006cdc <_vfiprintf_r+0x21c>
 8006b30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b34:	f04f 0901 	mov.w	r9, #1
 8006b38:	4623      	mov	r3, r4
 8006b3a:	469a      	mov	sl, r3
 8006b3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b40:	b10a      	cbz	r2, 8006b46 <_vfiprintf_r+0x86>
 8006b42:	2a25      	cmp	r2, #37	@ 0x25
 8006b44:	d1f9      	bne.n	8006b3a <_vfiprintf_r+0x7a>
 8006b46:	ebba 0b04 	subs.w	fp, sl, r4
 8006b4a:	d00b      	beq.n	8006b64 <_vfiprintf_r+0xa4>
 8006b4c:	465b      	mov	r3, fp
 8006b4e:	4622      	mov	r2, r4
 8006b50:	4629      	mov	r1, r5
 8006b52:	4630      	mov	r0, r6
 8006b54:	f7ff ffa1 	bl	8006a9a <__sfputs_r>
 8006b58:	3001      	adds	r0, #1
 8006b5a:	f000 80a7 	beq.w	8006cac <_vfiprintf_r+0x1ec>
 8006b5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b60:	445a      	add	r2, fp
 8006b62:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b64:	f89a 3000 	ldrb.w	r3, [sl]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 809f 	beq.w	8006cac <_vfiprintf_r+0x1ec>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f04f 32ff 	mov.w	r2, #4294967295
 8006b74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b78:	f10a 0a01 	add.w	sl, sl, #1
 8006b7c:	9304      	str	r3, [sp, #16]
 8006b7e:	9307      	str	r3, [sp, #28]
 8006b80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b84:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b86:	4654      	mov	r4, sl
 8006b88:	2205      	movs	r2, #5
 8006b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b8e:	4853      	ldr	r0, [pc, #332]	@ (8006cdc <_vfiprintf_r+0x21c>)
 8006b90:	f7f9 fb46 	bl	8000220 <memchr>
 8006b94:	9a04      	ldr	r2, [sp, #16]
 8006b96:	b9d8      	cbnz	r0, 8006bd0 <_vfiprintf_r+0x110>
 8006b98:	06d1      	lsls	r1, r2, #27
 8006b9a:	bf44      	itt	mi
 8006b9c:	2320      	movmi	r3, #32
 8006b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ba2:	0713      	lsls	r3, r2, #28
 8006ba4:	bf44      	itt	mi
 8006ba6:	232b      	movmi	r3, #43	@ 0x2b
 8006ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bac:	f89a 3000 	ldrb.w	r3, [sl]
 8006bb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bb2:	d015      	beq.n	8006be0 <_vfiprintf_r+0x120>
 8006bb4:	9a07      	ldr	r2, [sp, #28]
 8006bb6:	4654      	mov	r4, sl
 8006bb8:	2000      	movs	r0, #0
 8006bba:	f04f 0c0a 	mov.w	ip, #10
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bc4:	3b30      	subs	r3, #48	@ 0x30
 8006bc6:	2b09      	cmp	r3, #9
 8006bc8:	d94b      	bls.n	8006c62 <_vfiprintf_r+0x1a2>
 8006bca:	b1b0      	cbz	r0, 8006bfa <_vfiprintf_r+0x13a>
 8006bcc:	9207      	str	r2, [sp, #28]
 8006bce:	e014      	b.n	8006bfa <_vfiprintf_r+0x13a>
 8006bd0:	eba0 0308 	sub.w	r3, r0, r8
 8006bd4:	fa09 f303 	lsl.w	r3, r9, r3
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	9304      	str	r3, [sp, #16]
 8006bdc:	46a2      	mov	sl, r4
 8006bde:	e7d2      	b.n	8006b86 <_vfiprintf_r+0xc6>
 8006be0:	9b03      	ldr	r3, [sp, #12]
 8006be2:	1d19      	adds	r1, r3, #4
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	9103      	str	r1, [sp, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	bfbb      	ittet	lt
 8006bec:	425b      	neglt	r3, r3
 8006bee:	f042 0202 	orrlt.w	r2, r2, #2
 8006bf2:	9307      	strge	r3, [sp, #28]
 8006bf4:	9307      	strlt	r3, [sp, #28]
 8006bf6:	bfb8      	it	lt
 8006bf8:	9204      	strlt	r2, [sp, #16]
 8006bfa:	7823      	ldrb	r3, [r4, #0]
 8006bfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bfe:	d10a      	bne.n	8006c16 <_vfiprintf_r+0x156>
 8006c00:	7863      	ldrb	r3, [r4, #1]
 8006c02:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c04:	d132      	bne.n	8006c6c <_vfiprintf_r+0x1ac>
 8006c06:	9b03      	ldr	r3, [sp, #12]
 8006c08:	1d1a      	adds	r2, r3, #4
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	9203      	str	r2, [sp, #12]
 8006c0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c12:	3402      	adds	r4, #2
 8006c14:	9305      	str	r3, [sp, #20]
 8006c16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006cec <_vfiprintf_r+0x22c>
 8006c1a:	7821      	ldrb	r1, [r4, #0]
 8006c1c:	2203      	movs	r2, #3
 8006c1e:	4650      	mov	r0, sl
 8006c20:	f7f9 fafe 	bl	8000220 <memchr>
 8006c24:	b138      	cbz	r0, 8006c36 <_vfiprintf_r+0x176>
 8006c26:	9b04      	ldr	r3, [sp, #16]
 8006c28:	eba0 000a 	sub.w	r0, r0, sl
 8006c2c:	2240      	movs	r2, #64	@ 0x40
 8006c2e:	4082      	lsls	r2, r0
 8006c30:	4313      	orrs	r3, r2
 8006c32:	3401      	adds	r4, #1
 8006c34:	9304      	str	r3, [sp, #16]
 8006c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c3a:	4829      	ldr	r0, [pc, #164]	@ (8006ce0 <_vfiprintf_r+0x220>)
 8006c3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c40:	2206      	movs	r2, #6
 8006c42:	f7f9 faed 	bl	8000220 <memchr>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d03f      	beq.n	8006cca <_vfiprintf_r+0x20a>
 8006c4a:	4b26      	ldr	r3, [pc, #152]	@ (8006ce4 <_vfiprintf_r+0x224>)
 8006c4c:	bb1b      	cbnz	r3, 8006c96 <_vfiprintf_r+0x1d6>
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	3307      	adds	r3, #7
 8006c52:	f023 0307 	bic.w	r3, r3, #7
 8006c56:	3308      	adds	r3, #8
 8006c58:	9303      	str	r3, [sp, #12]
 8006c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c5c:	443b      	add	r3, r7
 8006c5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c60:	e76a      	b.n	8006b38 <_vfiprintf_r+0x78>
 8006c62:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c66:	460c      	mov	r4, r1
 8006c68:	2001      	movs	r0, #1
 8006c6a:	e7a8      	b.n	8006bbe <_vfiprintf_r+0xfe>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	3401      	adds	r4, #1
 8006c70:	9305      	str	r3, [sp, #20]
 8006c72:	4619      	mov	r1, r3
 8006c74:	f04f 0c0a 	mov.w	ip, #10
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c7e:	3a30      	subs	r2, #48	@ 0x30
 8006c80:	2a09      	cmp	r2, #9
 8006c82:	d903      	bls.n	8006c8c <_vfiprintf_r+0x1cc>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0c6      	beq.n	8006c16 <_vfiprintf_r+0x156>
 8006c88:	9105      	str	r1, [sp, #20]
 8006c8a:	e7c4      	b.n	8006c16 <_vfiprintf_r+0x156>
 8006c8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c90:	4604      	mov	r4, r0
 8006c92:	2301      	movs	r3, #1
 8006c94:	e7f0      	b.n	8006c78 <_vfiprintf_r+0x1b8>
 8006c96:	ab03      	add	r3, sp, #12
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	462a      	mov	r2, r5
 8006c9c:	4b12      	ldr	r3, [pc, #72]	@ (8006ce8 <_vfiprintf_r+0x228>)
 8006c9e:	a904      	add	r1, sp, #16
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	f3af 8000 	nop.w
 8006ca6:	4607      	mov	r7, r0
 8006ca8:	1c78      	adds	r0, r7, #1
 8006caa:	d1d6      	bne.n	8006c5a <_vfiprintf_r+0x19a>
 8006cac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cae:	07d9      	lsls	r1, r3, #31
 8006cb0:	d405      	bmi.n	8006cbe <_vfiprintf_r+0x1fe>
 8006cb2:	89ab      	ldrh	r3, [r5, #12]
 8006cb4:	059a      	lsls	r2, r3, #22
 8006cb6:	d402      	bmi.n	8006cbe <_vfiprintf_r+0x1fe>
 8006cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cba:	f7ff fddd 	bl	8006878 <__retarget_lock_release_recursive>
 8006cbe:	89ab      	ldrh	r3, [r5, #12]
 8006cc0:	065b      	lsls	r3, r3, #25
 8006cc2:	f53f af1f 	bmi.w	8006b04 <_vfiprintf_r+0x44>
 8006cc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cc8:	e71e      	b.n	8006b08 <_vfiprintf_r+0x48>
 8006cca:	ab03      	add	r3, sp, #12
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	462a      	mov	r2, r5
 8006cd0:	4b05      	ldr	r3, [pc, #20]	@ (8006ce8 <_vfiprintf_r+0x228>)
 8006cd2:	a904      	add	r1, sp, #16
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f000 f879 	bl	8006dcc <_printf_i>
 8006cda:	e7e4      	b.n	8006ca6 <_vfiprintf_r+0x1e6>
 8006cdc:	08007724 	.word	0x08007724
 8006ce0:	0800772e 	.word	0x0800772e
 8006ce4:	00000000 	.word	0x00000000
 8006ce8:	08006a9b 	.word	0x08006a9b
 8006cec:	0800772a 	.word	0x0800772a

08006cf0 <_printf_common>:
 8006cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf4:	4616      	mov	r6, r2
 8006cf6:	4698      	mov	r8, r3
 8006cf8:	688a      	ldr	r2, [r1, #8]
 8006cfa:	690b      	ldr	r3, [r1, #16]
 8006cfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d00:	4293      	cmp	r3, r2
 8006d02:	bfb8      	it	lt
 8006d04:	4613      	movlt	r3, r2
 8006d06:	6033      	str	r3, [r6, #0]
 8006d08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	460c      	mov	r4, r1
 8006d10:	b10a      	cbz	r2, 8006d16 <_printf_common+0x26>
 8006d12:	3301      	adds	r3, #1
 8006d14:	6033      	str	r3, [r6, #0]
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	0699      	lsls	r1, r3, #26
 8006d1a:	bf42      	ittt	mi
 8006d1c:	6833      	ldrmi	r3, [r6, #0]
 8006d1e:	3302      	addmi	r3, #2
 8006d20:	6033      	strmi	r3, [r6, #0]
 8006d22:	6825      	ldr	r5, [r4, #0]
 8006d24:	f015 0506 	ands.w	r5, r5, #6
 8006d28:	d106      	bne.n	8006d38 <_printf_common+0x48>
 8006d2a:	f104 0a19 	add.w	sl, r4, #25
 8006d2e:	68e3      	ldr	r3, [r4, #12]
 8006d30:	6832      	ldr	r2, [r6, #0]
 8006d32:	1a9b      	subs	r3, r3, r2
 8006d34:	42ab      	cmp	r3, r5
 8006d36:	dc26      	bgt.n	8006d86 <_printf_common+0x96>
 8006d38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d3c:	6822      	ldr	r2, [r4, #0]
 8006d3e:	3b00      	subs	r3, #0
 8006d40:	bf18      	it	ne
 8006d42:	2301      	movne	r3, #1
 8006d44:	0692      	lsls	r2, r2, #26
 8006d46:	d42b      	bmi.n	8006da0 <_printf_common+0xb0>
 8006d48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d4c:	4641      	mov	r1, r8
 8006d4e:	4638      	mov	r0, r7
 8006d50:	47c8      	blx	r9
 8006d52:	3001      	adds	r0, #1
 8006d54:	d01e      	beq.n	8006d94 <_printf_common+0xa4>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	6922      	ldr	r2, [r4, #16]
 8006d5a:	f003 0306 	and.w	r3, r3, #6
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	bf02      	ittt	eq
 8006d62:	68e5      	ldreq	r5, [r4, #12]
 8006d64:	6833      	ldreq	r3, [r6, #0]
 8006d66:	1aed      	subeq	r5, r5, r3
 8006d68:	68a3      	ldr	r3, [r4, #8]
 8006d6a:	bf0c      	ite	eq
 8006d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d70:	2500      	movne	r5, #0
 8006d72:	4293      	cmp	r3, r2
 8006d74:	bfc4      	itt	gt
 8006d76:	1a9b      	subgt	r3, r3, r2
 8006d78:	18ed      	addgt	r5, r5, r3
 8006d7a:	2600      	movs	r6, #0
 8006d7c:	341a      	adds	r4, #26
 8006d7e:	42b5      	cmp	r5, r6
 8006d80:	d11a      	bne.n	8006db8 <_printf_common+0xc8>
 8006d82:	2000      	movs	r0, #0
 8006d84:	e008      	b.n	8006d98 <_printf_common+0xa8>
 8006d86:	2301      	movs	r3, #1
 8006d88:	4652      	mov	r2, sl
 8006d8a:	4641      	mov	r1, r8
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	47c8      	blx	r9
 8006d90:	3001      	adds	r0, #1
 8006d92:	d103      	bne.n	8006d9c <_printf_common+0xac>
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295
 8006d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d9c:	3501      	adds	r5, #1
 8006d9e:	e7c6      	b.n	8006d2e <_printf_common+0x3e>
 8006da0:	18e1      	adds	r1, r4, r3
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	2030      	movs	r0, #48	@ 0x30
 8006da6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006daa:	4422      	add	r2, r4
 8006dac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006db0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006db4:	3302      	adds	r3, #2
 8006db6:	e7c7      	b.n	8006d48 <_printf_common+0x58>
 8006db8:	2301      	movs	r3, #1
 8006dba:	4622      	mov	r2, r4
 8006dbc:	4641      	mov	r1, r8
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	47c8      	blx	r9
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	d0e6      	beq.n	8006d94 <_printf_common+0xa4>
 8006dc6:	3601      	adds	r6, #1
 8006dc8:	e7d9      	b.n	8006d7e <_printf_common+0x8e>
	...

08006dcc <_printf_i>:
 8006dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd0:	7e0f      	ldrb	r7, [r1, #24]
 8006dd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006dd4:	2f78      	cmp	r7, #120	@ 0x78
 8006dd6:	4691      	mov	r9, r2
 8006dd8:	4680      	mov	r8, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	469a      	mov	sl, r3
 8006dde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006de2:	d807      	bhi.n	8006df4 <_printf_i+0x28>
 8006de4:	2f62      	cmp	r7, #98	@ 0x62
 8006de6:	d80a      	bhi.n	8006dfe <_printf_i+0x32>
 8006de8:	2f00      	cmp	r7, #0
 8006dea:	f000 80d2 	beq.w	8006f92 <_printf_i+0x1c6>
 8006dee:	2f58      	cmp	r7, #88	@ 0x58
 8006df0:	f000 80b9 	beq.w	8006f66 <_printf_i+0x19a>
 8006df4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006df8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006dfc:	e03a      	b.n	8006e74 <_printf_i+0xa8>
 8006dfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e02:	2b15      	cmp	r3, #21
 8006e04:	d8f6      	bhi.n	8006df4 <_printf_i+0x28>
 8006e06:	a101      	add	r1, pc, #4	@ (adr r1, 8006e0c <_printf_i+0x40>)
 8006e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e0c:	08006e65 	.word	0x08006e65
 8006e10:	08006e79 	.word	0x08006e79
 8006e14:	08006df5 	.word	0x08006df5
 8006e18:	08006df5 	.word	0x08006df5
 8006e1c:	08006df5 	.word	0x08006df5
 8006e20:	08006df5 	.word	0x08006df5
 8006e24:	08006e79 	.word	0x08006e79
 8006e28:	08006df5 	.word	0x08006df5
 8006e2c:	08006df5 	.word	0x08006df5
 8006e30:	08006df5 	.word	0x08006df5
 8006e34:	08006df5 	.word	0x08006df5
 8006e38:	08006f79 	.word	0x08006f79
 8006e3c:	08006ea3 	.word	0x08006ea3
 8006e40:	08006f33 	.word	0x08006f33
 8006e44:	08006df5 	.word	0x08006df5
 8006e48:	08006df5 	.word	0x08006df5
 8006e4c:	08006f9b 	.word	0x08006f9b
 8006e50:	08006df5 	.word	0x08006df5
 8006e54:	08006ea3 	.word	0x08006ea3
 8006e58:	08006df5 	.word	0x08006df5
 8006e5c:	08006df5 	.word	0x08006df5
 8006e60:	08006f3b 	.word	0x08006f3b
 8006e64:	6833      	ldr	r3, [r6, #0]
 8006e66:	1d1a      	adds	r2, r3, #4
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6032      	str	r2, [r6, #0]
 8006e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e74:	2301      	movs	r3, #1
 8006e76:	e09d      	b.n	8006fb4 <_printf_i+0x1e8>
 8006e78:	6833      	ldr	r3, [r6, #0]
 8006e7a:	6820      	ldr	r0, [r4, #0]
 8006e7c:	1d19      	adds	r1, r3, #4
 8006e7e:	6031      	str	r1, [r6, #0]
 8006e80:	0606      	lsls	r6, r0, #24
 8006e82:	d501      	bpl.n	8006e88 <_printf_i+0xbc>
 8006e84:	681d      	ldr	r5, [r3, #0]
 8006e86:	e003      	b.n	8006e90 <_printf_i+0xc4>
 8006e88:	0645      	lsls	r5, r0, #25
 8006e8a:	d5fb      	bpl.n	8006e84 <_printf_i+0xb8>
 8006e8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e90:	2d00      	cmp	r5, #0
 8006e92:	da03      	bge.n	8006e9c <_printf_i+0xd0>
 8006e94:	232d      	movs	r3, #45	@ 0x2d
 8006e96:	426d      	negs	r5, r5
 8006e98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e9c:	4859      	ldr	r0, [pc, #356]	@ (8007004 <_printf_i+0x238>)
 8006e9e:	230a      	movs	r3, #10
 8006ea0:	e011      	b.n	8006ec6 <_printf_i+0xfa>
 8006ea2:	6821      	ldr	r1, [r4, #0]
 8006ea4:	6833      	ldr	r3, [r6, #0]
 8006ea6:	0608      	lsls	r0, r1, #24
 8006ea8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006eac:	d402      	bmi.n	8006eb4 <_printf_i+0xe8>
 8006eae:	0649      	lsls	r1, r1, #25
 8006eb0:	bf48      	it	mi
 8006eb2:	b2ad      	uxthmi	r5, r5
 8006eb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006eb6:	4853      	ldr	r0, [pc, #332]	@ (8007004 <_printf_i+0x238>)
 8006eb8:	6033      	str	r3, [r6, #0]
 8006eba:	bf14      	ite	ne
 8006ebc:	230a      	movne	r3, #10
 8006ebe:	2308      	moveq	r3, #8
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ec6:	6866      	ldr	r6, [r4, #4]
 8006ec8:	60a6      	str	r6, [r4, #8]
 8006eca:	2e00      	cmp	r6, #0
 8006ecc:	bfa2      	ittt	ge
 8006ece:	6821      	ldrge	r1, [r4, #0]
 8006ed0:	f021 0104 	bicge.w	r1, r1, #4
 8006ed4:	6021      	strge	r1, [r4, #0]
 8006ed6:	b90d      	cbnz	r5, 8006edc <_printf_i+0x110>
 8006ed8:	2e00      	cmp	r6, #0
 8006eda:	d04b      	beq.n	8006f74 <_printf_i+0x1a8>
 8006edc:	4616      	mov	r6, r2
 8006ede:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ee2:	fb03 5711 	mls	r7, r3, r1, r5
 8006ee6:	5dc7      	ldrb	r7, [r0, r7]
 8006ee8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006eec:	462f      	mov	r7, r5
 8006eee:	42bb      	cmp	r3, r7
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	d9f4      	bls.n	8006ede <_printf_i+0x112>
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d10b      	bne.n	8006f10 <_printf_i+0x144>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	07df      	lsls	r7, r3, #31
 8006efc:	d508      	bpl.n	8006f10 <_printf_i+0x144>
 8006efe:	6923      	ldr	r3, [r4, #16]
 8006f00:	6861      	ldr	r1, [r4, #4]
 8006f02:	4299      	cmp	r1, r3
 8006f04:	bfde      	ittt	le
 8006f06:	2330      	movle	r3, #48	@ 0x30
 8006f08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f10:	1b92      	subs	r2, r2, r6
 8006f12:	6122      	str	r2, [r4, #16]
 8006f14:	f8cd a000 	str.w	sl, [sp]
 8006f18:	464b      	mov	r3, r9
 8006f1a:	aa03      	add	r2, sp, #12
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	4640      	mov	r0, r8
 8006f20:	f7ff fee6 	bl	8006cf0 <_printf_common>
 8006f24:	3001      	adds	r0, #1
 8006f26:	d14a      	bne.n	8006fbe <_printf_i+0x1f2>
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	b004      	add	sp, #16
 8006f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	f043 0320 	orr.w	r3, r3, #32
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	4833      	ldr	r0, [pc, #204]	@ (8007008 <_printf_i+0x23c>)
 8006f3c:	2778      	movs	r7, #120	@ 0x78
 8006f3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	6831      	ldr	r1, [r6, #0]
 8006f46:	061f      	lsls	r7, r3, #24
 8006f48:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f4c:	d402      	bmi.n	8006f54 <_printf_i+0x188>
 8006f4e:	065f      	lsls	r7, r3, #25
 8006f50:	bf48      	it	mi
 8006f52:	b2ad      	uxthmi	r5, r5
 8006f54:	6031      	str	r1, [r6, #0]
 8006f56:	07d9      	lsls	r1, r3, #31
 8006f58:	bf44      	itt	mi
 8006f5a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f5e:	6023      	strmi	r3, [r4, #0]
 8006f60:	b11d      	cbz	r5, 8006f6a <_printf_i+0x19e>
 8006f62:	2310      	movs	r3, #16
 8006f64:	e7ac      	b.n	8006ec0 <_printf_i+0xf4>
 8006f66:	4827      	ldr	r0, [pc, #156]	@ (8007004 <_printf_i+0x238>)
 8006f68:	e7e9      	b.n	8006f3e <_printf_i+0x172>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	f023 0320 	bic.w	r3, r3, #32
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	e7f6      	b.n	8006f62 <_printf_i+0x196>
 8006f74:	4616      	mov	r6, r2
 8006f76:	e7bd      	b.n	8006ef4 <_printf_i+0x128>
 8006f78:	6833      	ldr	r3, [r6, #0]
 8006f7a:	6825      	ldr	r5, [r4, #0]
 8006f7c:	6961      	ldr	r1, [r4, #20]
 8006f7e:	1d18      	adds	r0, r3, #4
 8006f80:	6030      	str	r0, [r6, #0]
 8006f82:	062e      	lsls	r6, r5, #24
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	d501      	bpl.n	8006f8c <_printf_i+0x1c0>
 8006f88:	6019      	str	r1, [r3, #0]
 8006f8a:	e002      	b.n	8006f92 <_printf_i+0x1c6>
 8006f8c:	0668      	lsls	r0, r5, #25
 8006f8e:	d5fb      	bpl.n	8006f88 <_printf_i+0x1bc>
 8006f90:	8019      	strh	r1, [r3, #0]
 8006f92:	2300      	movs	r3, #0
 8006f94:	6123      	str	r3, [r4, #16]
 8006f96:	4616      	mov	r6, r2
 8006f98:	e7bc      	b.n	8006f14 <_printf_i+0x148>
 8006f9a:	6833      	ldr	r3, [r6, #0]
 8006f9c:	1d1a      	adds	r2, r3, #4
 8006f9e:	6032      	str	r2, [r6, #0]
 8006fa0:	681e      	ldr	r6, [r3, #0]
 8006fa2:	6862      	ldr	r2, [r4, #4]
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	f7f9 f93a 	bl	8000220 <memchr>
 8006fac:	b108      	cbz	r0, 8006fb2 <_printf_i+0x1e6>
 8006fae:	1b80      	subs	r0, r0, r6
 8006fb0:	6060      	str	r0, [r4, #4]
 8006fb2:	6863      	ldr	r3, [r4, #4]
 8006fb4:	6123      	str	r3, [r4, #16]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fbc:	e7aa      	b.n	8006f14 <_printf_i+0x148>
 8006fbe:	6923      	ldr	r3, [r4, #16]
 8006fc0:	4632      	mov	r2, r6
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	4640      	mov	r0, r8
 8006fc6:	47d0      	blx	sl
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d0ad      	beq.n	8006f28 <_printf_i+0x15c>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	079b      	lsls	r3, r3, #30
 8006fd0:	d413      	bmi.n	8006ffa <_printf_i+0x22e>
 8006fd2:	68e0      	ldr	r0, [r4, #12]
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	4298      	cmp	r0, r3
 8006fd8:	bfb8      	it	lt
 8006fda:	4618      	movlt	r0, r3
 8006fdc:	e7a6      	b.n	8006f2c <_printf_i+0x160>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	4632      	mov	r2, r6
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	4640      	mov	r0, r8
 8006fe6:	47d0      	blx	sl
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d09d      	beq.n	8006f28 <_printf_i+0x15c>
 8006fec:	3501      	adds	r5, #1
 8006fee:	68e3      	ldr	r3, [r4, #12]
 8006ff0:	9903      	ldr	r1, [sp, #12]
 8006ff2:	1a5b      	subs	r3, r3, r1
 8006ff4:	42ab      	cmp	r3, r5
 8006ff6:	dcf2      	bgt.n	8006fde <_printf_i+0x212>
 8006ff8:	e7eb      	b.n	8006fd2 <_printf_i+0x206>
 8006ffa:	2500      	movs	r5, #0
 8006ffc:	f104 0619 	add.w	r6, r4, #25
 8007000:	e7f5      	b.n	8006fee <_printf_i+0x222>
 8007002:	bf00      	nop
 8007004:	08007735 	.word	0x08007735
 8007008:	08007746 	.word	0x08007746

0800700c <__sflush_r>:
 800700c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007014:	0716      	lsls	r6, r2, #28
 8007016:	4605      	mov	r5, r0
 8007018:	460c      	mov	r4, r1
 800701a:	d454      	bmi.n	80070c6 <__sflush_r+0xba>
 800701c:	684b      	ldr	r3, [r1, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	dc02      	bgt.n	8007028 <__sflush_r+0x1c>
 8007022:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	dd48      	ble.n	80070ba <__sflush_r+0xae>
 8007028:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800702a:	2e00      	cmp	r6, #0
 800702c:	d045      	beq.n	80070ba <__sflush_r+0xae>
 800702e:	2300      	movs	r3, #0
 8007030:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007034:	682f      	ldr	r7, [r5, #0]
 8007036:	6a21      	ldr	r1, [r4, #32]
 8007038:	602b      	str	r3, [r5, #0]
 800703a:	d030      	beq.n	800709e <__sflush_r+0x92>
 800703c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	0759      	lsls	r1, r3, #29
 8007042:	d505      	bpl.n	8007050 <__sflush_r+0x44>
 8007044:	6863      	ldr	r3, [r4, #4]
 8007046:	1ad2      	subs	r2, r2, r3
 8007048:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800704a:	b10b      	cbz	r3, 8007050 <__sflush_r+0x44>
 800704c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800704e:	1ad2      	subs	r2, r2, r3
 8007050:	2300      	movs	r3, #0
 8007052:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007054:	6a21      	ldr	r1, [r4, #32]
 8007056:	4628      	mov	r0, r5
 8007058:	47b0      	blx	r6
 800705a:	1c43      	adds	r3, r0, #1
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	d106      	bne.n	800706e <__sflush_r+0x62>
 8007060:	6829      	ldr	r1, [r5, #0]
 8007062:	291d      	cmp	r1, #29
 8007064:	d82b      	bhi.n	80070be <__sflush_r+0xb2>
 8007066:	4a2a      	ldr	r2, [pc, #168]	@ (8007110 <__sflush_r+0x104>)
 8007068:	410a      	asrs	r2, r1
 800706a:	07d6      	lsls	r6, r2, #31
 800706c:	d427      	bmi.n	80070be <__sflush_r+0xb2>
 800706e:	2200      	movs	r2, #0
 8007070:	6062      	str	r2, [r4, #4]
 8007072:	04d9      	lsls	r1, r3, #19
 8007074:	6922      	ldr	r2, [r4, #16]
 8007076:	6022      	str	r2, [r4, #0]
 8007078:	d504      	bpl.n	8007084 <__sflush_r+0x78>
 800707a:	1c42      	adds	r2, r0, #1
 800707c:	d101      	bne.n	8007082 <__sflush_r+0x76>
 800707e:	682b      	ldr	r3, [r5, #0]
 8007080:	b903      	cbnz	r3, 8007084 <__sflush_r+0x78>
 8007082:	6560      	str	r0, [r4, #84]	@ 0x54
 8007084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007086:	602f      	str	r7, [r5, #0]
 8007088:	b1b9      	cbz	r1, 80070ba <__sflush_r+0xae>
 800708a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800708e:	4299      	cmp	r1, r3
 8007090:	d002      	beq.n	8007098 <__sflush_r+0x8c>
 8007092:	4628      	mov	r0, r5
 8007094:	f7ff fbf2 	bl	800687c <_free_r>
 8007098:	2300      	movs	r3, #0
 800709a:	6363      	str	r3, [r4, #52]	@ 0x34
 800709c:	e00d      	b.n	80070ba <__sflush_r+0xae>
 800709e:	2301      	movs	r3, #1
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b0      	blx	r6
 80070a4:	4602      	mov	r2, r0
 80070a6:	1c50      	adds	r0, r2, #1
 80070a8:	d1c9      	bne.n	800703e <__sflush_r+0x32>
 80070aa:	682b      	ldr	r3, [r5, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0c6      	beq.n	800703e <__sflush_r+0x32>
 80070b0:	2b1d      	cmp	r3, #29
 80070b2:	d001      	beq.n	80070b8 <__sflush_r+0xac>
 80070b4:	2b16      	cmp	r3, #22
 80070b6:	d11e      	bne.n	80070f6 <__sflush_r+0xea>
 80070b8:	602f      	str	r7, [r5, #0]
 80070ba:	2000      	movs	r0, #0
 80070bc:	e022      	b.n	8007104 <__sflush_r+0xf8>
 80070be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070c2:	b21b      	sxth	r3, r3
 80070c4:	e01b      	b.n	80070fe <__sflush_r+0xf2>
 80070c6:	690f      	ldr	r7, [r1, #16]
 80070c8:	2f00      	cmp	r7, #0
 80070ca:	d0f6      	beq.n	80070ba <__sflush_r+0xae>
 80070cc:	0793      	lsls	r3, r2, #30
 80070ce:	680e      	ldr	r6, [r1, #0]
 80070d0:	bf08      	it	eq
 80070d2:	694b      	ldreq	r3, [r1, #20]
 80070d4:	600f      	str	r7, [r1, #0]
 80070d6:	bf18      	it	ne
 80070d8:	2300      	movne	r3, #0
 80070da:	eba6 0807 	sub.w	r8, r6, r7
 80070de:	608b      	str	r3, [r1, #8]
 80070e0:	f1b8 0f00 	cmp.w	r8, #0
 80070e4:	dde9      	ble.n	80070ba <__sflush_r+0xae>
 80070e6:	6a21      	ldr	r1, [r4, #32]
 80070e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070ea:	4643      	mov	r3, r8
 80070ec:	463a      	mov	r2, r7
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b0      	blx	r6
 80070f2:	2800      	cmp	r0, #0
 80070f4:	dc08      	bgt.n	8007108 <__sflush_r+0xfc>
 80070f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070fe:	81a3      	strh	r3, [r4, #12]
 8007100:	f04f 30ff 	mov.w	r0, #4294967295
 8007104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007108:	4407      	add	r7, r0
 800710a:	eba8 0800 	sub.w	r8, r8, r0
 800710e:	e7e7      	b.n	80070e0 <__sflush_r+0xd4>
 8007110:	dfbffffe 	.word	0xdfbffffe

08007114 <_fflush_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	690b      	ldr	r3, [r1, #16]
 8007118:	4605      	mov	r5, r0
 800711a:	460c      	mov	r4, r1
 800711c:	b913      	cbnz	r3, 8007124 <_fflush_r+0x10>
 800711e:	2500      	movs	r5, #0
 8007120:	4628      	mov	r0, r5
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	b118      	cbz	r0, 800712e <_fflush_r+0x1a>
 8007126:	6a03      	ldr	r3, [r0, #32]
 8007128:	b90b      	cbnz	r3, 800712e <_fflush_r+0x1a>
 800712a:	f7ff f9ad 	bl	8006488 <__sinit>
 800712e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0f3      	beq.n	800711e <_fflush_r+0xa>
 8007136:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007138:	07d0      	lsls	r0, r2, #31
 800713a:	d404      	bmi.n	8007146 <_fflush_r+0x32>
 800713c:	0599      	lsls	r1, r3, #22
 800713e:	d402      	bmi.n	8007146 <_fflush_r+0x32>
 8007140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007142:	f7ff fb98 	bl	8006876 <__retarget_lock_acquire_recursive>
 8007146:	4628      	mov	r0, r5
 8007148:	4621      	mov	r1, r4
 800714a:	f7ff ff5f 	bl	800700c <__sflush_r>
 800714e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007150:	07da      	lsls	r2, r3, #31
 8007152:	4605      	mov	r5, r0
 8007154:	d4e4      	bmi.n	8007120 <_fflush_r+0xc>
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	059b      	lsls	r3, r3, #22
 800715a:	d4e1      	bmi.n	8007120 <_fflush_r+0xc>
 800715c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800715e:	f7ff fb8b 	bl	8006878 <__retarget_lock_release_recursive>
 8007162:	e7dd      	b.n	8007120 <_fflush_r+0xc>

08007164 <__swhatbuf_r>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	460c      	mov	r4, r1
 8007168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800716c:	2900      	cmp	r1, #0
 800716e:	b096      	sub	sp, #88	@ 0x58
 8007170:	4615      	mov	r5, r2
 8007172:	461e      	mov	r6, r3
 8007174:	da0d      	bge.n	8007192 <__swhatbuf_r+0x2e>
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800717c:	f04f 0100 	mov.w	r1, #0
 8007180:	bf14      	ite	ne
 8007182:	2340      	movne	r3, #64	@ 0x40
 8007184:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007188:	2000      	movs	r0, #0
 800718a:	6031      	str	r1, [r6, #0]
 800718c:	602b      	str	r3, [r5, #0]
 800718e:	b016      	add	sp, #88	@ 0x58
 8007190:	bd70      	pop	{r4, r5, r6, pc}
 8007192:	466a      	mov	r2, sp
 8007194:	f000 f848 	bl	8007228 <_fstat_r>
 8007198:	2800      	cmp	r0, #0
 800719a:	dbec      	blt.n	8007176 <__swhatbuf_r+0x12>
 800719c:	9901      	ldr	r1, [sp, #4]
 800719e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071a6:	4259      	negs	r1, r3
 80071a8:	4159      	adcs	r1, r3
 80071aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071ae:	e7eb      	b.n	8007188 <__swhatbuf_r+0x24>

080071b0 <__smakebuf_r>:
 80071b0:	898b      	ldrh	r3, [r1, #12]
 80071b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071b4:	079d      	lsls	r5, r3, #30
 80071b6:	4606      	mov	r6, r0
 80071b8:	460c      	mov	r4, r1
 80071ba:	d507      	bpl.n	80071cc <__smakebuf_r+0x1c>
 80071bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	6123      	str	r3, [r4, #16]
 80071c4:	2301      	movs	r3, #1
 80071c6:	6163      	str	r3, [r4, #20]
 80071c8:	b003      	add	sp, #12
 80071ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071cc:	ab01      	add	r3, sp, #4
 80071ce:	466a      	mov	r2, sp
 80071d0:	f7ff ffc8 	bl	8007164 <__swhatbuf_r>
 80071d4:	9f00      	ldr	r7, [sp, #0]
 80071d6:	4605      	mov	r5, r0
 80071d8:	4639      	mov	r1, r7
 80071da:	4630      	mov	r0, r6
 80071dc:	f7ff fbba 	bl	8006954 <_malloc_r>
 80071e0:	b948      	cbnz	r0, 80071f6 <__smakebuf_r+0x46>
 80071e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071e6:	059a      	lsls	r2, r3, #22
 80071e8:	d4ee      	bmi.n	80071c8 <__smakebuf_r+0x18>
 80071ea:	f023 0303 	bic.w	r3, r3, #3
 80071ee:	f043 0302 	orr.w	r3, r3, #2
 80071f2:	81a3      	strh	r3, [r4, #12]
 80071f4:	e7e2      	b.n	80071bc <__smakebuf_r+0xc>
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	6020      	str	r0, [r4, #0]
 80071fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	9b01      	ldr	r3, [sp, #4]
 8007202:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007206:	b15b      	cbz	r3, 8007220 <__smakebuf_r+0x70>
 8007208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800720c:	4630      	mov	r0, r6
 800720e:	f000 f81d 	bl	800724c <_isatty_r>
 8007212:	b128      	cbz	r0, 8007220 <__smakebuf_r+0x70>
 8007214:	89a3      	ldrh	r3, [r4, #12]
 8007216:	f023 0303 	bic.w	r3, r3, #3
 800721a:	f043 0301 	orr.w	r3, r3, #1
 800721e:	81a3      	strh	r3, [r4, #12]
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	431d      	orrs	r5, r3
 8007224:	81a5      	strh	r5, [r4, #12]
 8007226:	e7cf      	b.n	80071c8 <__smakebuf_r+0x18>

08007228 <_fstat_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4d07      	ldr	r5, [pc, #28]	@ (8007248 <_fstat_r+0x20>)
 800722c:	2300      	movs	r3, #0
 800722e:	4604      	mov	r4, r0
 8007230:	4608      	mov	r0, r1
 8007232:	4611      	mov	r1, r2
 8007234:	602b      	str	r3, [r5, #0]
 8007236:	f7fa fb1a 	bl	800186e <_fstat>
 800723a:	1c43      	adds	r3, r0, #1
 800723c:	d102      	bne.n	8007244 <_fstat_r+0x1c>
 800723e:	682b      	ldr	r3, [r5, #0]
 8007240:	b103      	cbz	r3, 8007244 <_fstat_r+0x1c>
 8007242:	6023      	str	r3, [r4, #0]
 8007244:	bd38      	pop	{r3, r4, r5, pc}
 8007246:	bf00      	nop
 8007248:	20001bfc 	.word	0x20001bfc

0800724c <_isatty_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4d06      	ldr	r5, [pc, #24]	@ (8007268 <_isatty_r+0x1c>)
 8007250:	2300      	movs	r3, #0
 8007252:	4604      	mov	r4, r0
 8007254:	4608      	mov	r0, r1
 8007256:	602b      	str	r3, [r5, #0]
 8007258:	f7fa fb19 	bl	800188e <_isatty>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <_isatty_r+0x1a>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	b103      	cbz	r3, 8007266 <_isatty_r+0x1a>
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	20001bfc 	.word	0x20001bfc

0800726c <_sbrk_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	4d06      	ldr	r5, [pc, #24]	@ (8007288 <_sbrk_r+0x1c>)
 8007270:	2300      	movs	r3, #0
 8007272:	4604      	mov	r4, r0
 8007274:	4608      	mov	r0, r1
 8007276:	602b      	str	r3, [r5, #0]
 8007278:	f7fa fb22 	bl	80018c0 <_sbrk>
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	d102      	bne.n	8007286 <_sbrk_r+0x1a>
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	b103      	cbz	r3, 8007286 <_sbrk_r+0x1a>
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	bd38      	pop	{r3, r4, r5, pc}
 8007288:	20001bfc 	.word	0x20001bfc
 800728c:	00000000 	.word	0x00000000

08007290 <atan>:
 8007290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	ec55 4b10 	vmov	r4, r5, d0
 8007298:	4bbf      	ldr	r3, [pc, #764]	@ (8007598 <atan+0x308>)
 800729a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800729e:	429e      	cmp	r6, r3
 80072a0:	46ab      	mov	fp, r5
 80072a2:	d918      	bls.n	80072d6 <atan+0x46>
 80072a4:	4bbd      	ldr	r3, [pc, #756]	@ (800759c <atan+0x30c>)
 80072a6:	429e      	cmp	r6, r3
 80072a8:	d801      	bhi.n	80072ae <atan+0x1e>
 80072aa:	d109      	bne.n	80072c0 <atan+0x30>
 80072ac:	b144      	cbz	r4, 80072c0 <atan+0x30>
 80072ae:	4622      	mov	r2, r4
 80072b0:	462b      	mov	r3, r5
 80072b2:	4620      	mov	r0, r4
 80072b4:	4629      	mov	r1, r5
 80072b6:	f7f9 f809 	bl	80002cc <__adddf3>
 80072ba:	4604      	mov	r4, r0
 80072bc:	460d      	mov	r5, r1
 80072be:	e006      	b.n	80072ce <atan+0x3e>
 80072c0:	f1bb 0f00 	cmp.w	fp, #0
 80072c4:	f340 812b 	ble.w	800751e <atan+0x28e>
 80072c8:	a597      	add	r5, pc, #604	@ (adr r5, 8007528 <atan+0x298>)
 80072ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80072ce:	ec45 4b10 	vmov	d0, r4, r5
 80072d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d6:	4bb2      	ldr	r3, [pc, #712]	@ (80075a0 <atan+0x310>)
 80072d8:	429e      	cmp	r6, r3
 80072da:	d813      	bhi.n	8007304 <atan+0x74>
 80072dc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80072e0:	429e      	cmp	r6, r3
 80072e2:	d80c      	bhi.n	80072fe <atan+0x6e>
 80072e4:	a392      	add	r3, pc, #584	@ (adr r3, 8007530 <atan+0x2a0>)
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	4620      	mov	r0, r4
 80072ec:	4629      	mov	r1, r5
 80072ee:	f7f8 ffed 	bl	80002cc <__adddf3>
 80072f2:	4bac      	ldr	r3, [pc, #688]	@ (80075a4 <atan+0x314>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	f7f9 fc2f 	bl	8000b58 <__aeabi_dcmpgt>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d1e7      	bne.n	80072ce <atan+0x3e>
 80072fe:	f04f 3aff 	mov.w	sl, #4294967295
 8007302:	e029      	b.n	8007358 <atan+0xc8>
 8007304:	f000 f95c 	bl	80075c0 <fabs>
 8007308:	4ba7      	ldr	r3, [pc, #668]	@ (80075a8 <atan+0x318>)
 800730a:	429e      	cmp	r6, r3
 800730c:	ec55 4b10 	vmov	r4, r5, d0
 8007310:	f200 80bc 	bhi.w	800748c <atan+0x1fc>
 8007314:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007318:	429e      	cmp	r6, r3
 800731a:	f200 809e 	bhi.w	800745a <atan+0x1ca>
 800731e:	4622      	mov	r2, r4
 8007320:	462b      	mov	r3, r5
 8007322:	4620      	mov	r0, r4
 8007324:	4629      	mov	r1, r5
 8007326:	f7f8 ffd1 	bl	80002cc <__adddf3>
 800732a:	4b9e      	ldr	r3, [pc, #632]	@ (80075a4 <atan+0x314>)
 800732c:	2200      	movs	r2, #0
 800732e:	f7f8 ffcb 	bl	80002c8 <__aeabi_dsub>
 8007332:	2200      	movs	r2, #0
 8007334:	4606      	mov	r6, r0
 8007336:	460f      	mov	r7, r1
 8007338:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800733c:	4620      	mov	r0, r4
 800733e:	4629      	mov	r1, r5
 8007340:	f7f8 ffc4 	bl	80002cc <__adddf3>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4630      	mov	r0, r6
 800734a:	4639      	mov	r1, r7
 800734c:	f7f9 fa9e 	bl	800088c <__aeabi_ddiv>
 8007350:	f04f 0a00 	mov.w	sl, #0
 8007354:	4604      	mov	r4, r0
 8007356:	460d      	mov	r5, r1
 8007358:	4622      	mov	r2, r4
 800735a:	462b      	mov	r3, r5
 800735c:	4620      	mov	r0, r4
 800735e:	4629      	mov	r1, r5
 8007360:	f7f9 f96a 	bl	8000638 <__aeabi_dmul>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4680      	mov	r8, r0
 800736a:	4689      	mov	r9, r1
 800736c:	f7f9 f964 	bl	8000638 <__aeabi_dmul>
 8007370:	a371      	add	r3, pc, #452	@ (adr r3, 8007538 <atan+0x2a8>)
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	4606      	mov	r6, r0
 8007378:	460f      	mov	r7, r1
 800737a:	f7f9 f95d 	bl	8000638 <__aeabi_dmul>
 800737e:	a370      	add	r3, pc, #448	@ (adr r3, 8007540 <atan+0x2b0>)
 8007380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007384:	f7f8 ffa2 	bl	80002cc <__adddf3>
 8007388:	4632      	mov	r2, r6
 800738a:	463b      	mov	r3, r7
 800738c:	f7f9 f954 	bl	8000638 <__aeabi_dmul>
 8007390:	a36d      	add	r3, pc, #436	@ (adr r3, 8007548 <atan+0x2b8>)
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f7f8 ff99 	bl	80002cc <__adddf3>
 800739a:	4632      	mov	r2, r6
 800739c:	463b      	mov	r3, r7
 800739e:	f7f9 f94b 	bl	8000638 <__aeabi_dmul>
 80073a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007550 <atan+0x2c0>)
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f7f8 ff90 	bl	80002cc <__adddf3>
 80073ac:	4632      	mov	r2, r6
 80073ae:	463b      	mov	r3, r7
 80073b0:	f7f9 f942 	bl	8000638 <__aeabi_dmul>
 80073b4:	a368      	add	r3, pc, #416	@ (adr r3, 8007558 <atan+0x2c8>)
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	f7f8 ff87 	bl	80002cc <__adddf3>
 80073be:	4632      	mov	r2, r6
 80073c0:	463b      	mov	r3, r7
 80073c2:	f7f9 f939 	bl	8000638 <__aeabi_dmul>
 80073c6:	a366      	add	r3, pc, #408	@ (adr r3, 8007560 <atan+0x2d0>)
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	f7f8 ff7e 	bl	80002cc <__adddf3>
 80073d0:	4642      	mov	r2, r8
 80073d2:	464b      	mov	r3, r9
 80073d4:	f7f9 f930 	bl	8000638 <__aeabi_dmul>
 80073d8:	a363      	add	r3, pc, #396	@ (adr r3, 8007568 <atan+0x2d8>)
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	4680      	mov	r8, r0
 80073e0:	4689      	mov	r9, r1
 80073e2:	4630      	mov	r0, r6
 80073e4:	4639      	mov	r1, r7
 80073e6:	f7f9 f927 	bl	8000638 <__aeabi_dmul>
 80073ea:	a361      	add	r3, pc, #388	@ (adr r3, 8007570 <atan+0x2e0>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f7f8 ff6a 	bl	80002c8 <__aeabi_dsub>
 80073f4:	4632      	mov	r2, r6
 80073f6:	463b      	mov	r3, r7
 80073f8:	f7f9 f91e 	bl	8000638 <__aeabi_dmul>
 80073fc:	a35e      	add	r3, pc, #376	@ (adr r3, 8007578 <atan+0x2e8>)
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f7f8 ff61 	bl	80002c8 <__aeabi_dsub>
 8007406:	4632      	mov	r2, r6
 8007408:	463b      	mov	r3, r7
 800740a:	f7f9 f915 	bl	8000638 <__aeabi_dmul>
 800740e:	a35c      	add	r3, pc, #368	@ (adr r3, 8007580 <atan+0x2f0>)
 8007410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007414:	f7f8 ff58 	bl	80002c8 <__aeabi_dsub>
 8007418:	4632      	mov	r2, r6
 800741a:	463b      	mov	r3, r7
 800741c:	f7f9 f90c 	bl	8000638 <__aeabi_dmul>
 8007420:	a359      	add	r3, pc, #356	@ (adr r3, 8007588 <atan+0x2f8>)
 8007422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007426:	f7f8 ff4f 	bl	80002c8 <__aeabi_dsub>
 800742a:	4632      	mov	r2, r6
 800742c:	463b      	mov	r3, r7
 800742e:	f7f9 f903 	bl	8000638 <__aeabi_dmul>
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	4640      	mov	r0, r8
 8007438:	4649      	mov	r1, r9
 800743a:	f7f8 ff47 	bl	80002cc <__adddf3>
 800743e:	4622      	mov	r2, r4
 8007440:	462b      	mov	r3, r5
 8007442:	f7f9 f8f9 	bl	8000638 <__aeabi_dmul>
 8007446:	f1ba 3fff 	cmp.w	sl, #4294967295
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	d148      	bne.n	80074e2 <atan+0x252>
 8007450:	4620      	mov	r0, r4
 8007452:	4629      	mov	r1, r5
 8007454:	f7f8 ff38 	bl	80002c8 <__aeabi_dsub>
 8007458:	e72f      	b.n	80072ba <atan+0x2a>
 800745a:	4b52      	ldr	r3, [pc, #328]	@ (80075a4 <atan+0x314>)
 800745c:	2200      	movs	r2, #0
 800745e:	4620      	mov	r0, r4
 8007460:	4629      	mov	r1, r5
 8007462:	f7f8 ff31 	bl	80002c8 <__aeabi_dsub>
 8007466:	4b4f      	ldr	r3, [pc, #316]	@ (80075a4 <atan+0x314>)
 8007468:	4606      	mov	r6, r0
 800746a:	460f      	mov	r7, r1
 800746c:	2200      	movs	r2, #0
 800746e:	4620      	mov	r0, r4
 8007470:	4629      	mov	r1, r5
 8007472:	f7f8 ff2b 	bl	80002cc <__adddf3>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4630      	mov	r0, r6
 800747c:	4639      	mov	r1, r7
 800747e:	f7f9 fa05 	bl	800088c <__aeabi_ddiv>
 8007482:	f04f 0a01 	mov.w	sl, #1
 8007486:	4604      	mov	r4, r0
 8007488:	460d      	mov	r5, r1
 800748a:	e765      	b.n	8007358 <atan+0xc8>
 800748c:	4b47      	ldr	r3, [pc, #284]	@ (80075ac <atan+0x31c>)
 800748e:	429e      	cmp	r6, r3
 8007490:	d21c      	bcs.n	80074cc <atan+0x23c>
 8007492:	4b47      	ldr	r3, [pc, #284]	@ (80075b0 <atan+0x320>)
 8007494:	2200      	movs	r2, #0
 8007496:	4620      	mov	r0, r4
 8007498:	4629      	mov	r1, r5
 800749a:	f7f8 ff15 	bl	80002c8 <__aeabi_dsub>
 800749e:	4b44      	ldr	r3, [pc, #272]	@ (80075b0 <atan+0x320>)
 80074a0:	4606      	mov	r6, r0
 80074a2:	460f      	mov	r7, r1
 80074a4:	2200      	movs	r2, #0
 80074a6:	4620      	mov	r0, r4
 80074a8:	4629      	mov	r1, r5
 80074aa:	f7f9 f8c5 	bl	8000638 <__aeabi_dmul>
 80074ae:	4b3d      	ldr	r3, [pc, #244]	@ (80075a4 <atan+0x314>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	f7f8 ff0b 	bl	80002cc <__adddf3>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	4630      	mov	r0, r6
 80074bc:	4639      	mov	r1, r7
 80074be:	f7f9 f9e5 	bl	800088c <__aeabi_ddiv>
 80074c2:	f04f 0a02 	mov.w	sl, #2
 80074c6:	4604      	mov	r4, r0
 80074c8:	460d      	mov	r5, r1
 80074ca:	e745      	b.n	8007358 <atan+0xc8>
 80074cc:	4622      	mov	r2, r4
 80074ce:	462b      	mov	r3, r5
 80074d0:	4938      	ldr	r1, [pc, #224]	@ (80075b4 <atan+0x324>)
 80074d2:	2000      	movs	r0, #0
 80074d4:	f7f9 f9da 	bl	800088c <__aeabi_ddiv>
 80074d8:	f04f 0a03 	mov.w	sl, #3
 80074dc:	4604      	mov	r4, r0
 80074de:	460d      	mov	r5, r1
 80074e0:	e73a      	b.n	8007358 <atan+0xc8>
 80074e2:	4b35      	ldr	r3, [pc, #212]	@ (80075b8 <atan+0x328>)
 80074e4:	4e35      	ldr	r6, [pc, #212]	@ (80075bc <atan+0x32c>)
 80074e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f7f8 feeb 	bl	80002c8 <__aeabi_dsub>
 80074f2:	4622      	mov	r2, r4
 80074f4:	462b      	mov	r3, r5
 80074f6:	f7f8 fee7 	bl	80002c8 <__aeabi_dsub>
 80074fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007506:	f7f8 fedf 	bl	80002c8 <__aeabi_dsub>
 800750a:	f1bb 0f00 	cmp.w	fp, #0
 800750e:	4604      	mov	r4, r0
 8007510:	460d      	mov	r5, r1
 8007512:	f6bf aedc 	bge.w	80072ce <atan+0x3e>
 8007516:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800751a:	461d      	mov	r5, r3
 800751c:	e6d7      	b.n	80072ce <atan+0x3e>
 800751e:	a51c      	add	r5, pc, #112	@ (adr r5, 8007590 <atan+0x300>)
 8007520:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007524:	e6d3      	b.n	80072ce <atan+0x3e>
 8007526:	bf00      	nop
 8007528:	54442d18 	.word	0x54442d18
 800752c:	3ff921fb 	.word	0x3ff921fb
 8007530:	8800759c 	.word	0x8800759c
 8007534:	7e37e43c 	.word	0x7e37e43c
 8007538:	e322da11 	.word	0xe322da11
 800753c:	3f90ad3a 	.word	0x3f90ad3a
 8007540:	24760deb 	.word	0x24760deb
 8007544:	3fa97b4b 	.word	0x3fa97b4b
 8007548:	a0d03d51 	.word	0xa0d03d51
 800754c:	3fb10d66 	.word	0x3fb10d66
 8007550:	c54c206e 	.word	0xc54c206e
 8007554:	3fb745cd 	.word	0x3fb745cd
 8007558:	920083ff 	.word	0x920083ff
 800755c:	3fc24924 	.word	0x3fc24924
 8007560:	5555550d 	.word	0x5555550d
 8007564:	3fd55555 	.word	0x3fd55555
 8007568:	2c6a6c2f 	.word	0x2c6a6c2f
 800756c:	bfa2b444 	.word	0xbfa2b444
 8007570:	52defd9a 	.word	0x52defd9a
 8007574:	3fadde2d 	.word	0x3fadde2d
 8007578:	af749a6d 	.word	0xaf749a6d
 800757c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007580:	fe231671 	.word	0xfe231671
 8007584:	3fbc71c6 	.word	0x3fbc71c6
 8007588:	9998ebc4 	.word	0x9998ebc4
 800758c:	3fc99999 	.word	0x3fc99999
 8007590:	54442d18 	.word	0x54442d18
 8007594:	bff921fb 	.word	0xbff921fb
 8007598:	440fffff 	.word	0x440fffff
 800759c:	7ff00000 	.word	0x7ff00000
 80075a0:	3fdbffff 	.word	0x3fdbffff
 80075a4:	3ff00000 	.word	0x3ff00000
 80075a8:	3ff2ffff 	.word	0x3ff2ffff
 80075ac:	40038000 	.word	0x40038000
 80075b0:	3ff80000 	.word	0x3ff80000
 80075b4:	bff00000 	.word	0xbff00000
 80075b8:	08007758 	.word	0x08007758
 80075bc:	08007778 	.word	0x08007778

080075c0 <fabs>:
 80075c0:	ec51 0b10 	vmov	r0, r1, d0
 80075c4:	4602      	mov	r2, r0
 80075c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80075ca:	ec43 2b10 	vmov	d0, r2, r3
 80075ce:	4770      	bx	lr

080075d0 <round>:
 80075d0:	ec51 0b10 	vmov	r0, r1, d0
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80075da:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 80075de:	2a13      	cmp	r2, #19
 80075e0:	460b      	mov	r3, r1
 80075e2:	4605      	mov	r5, r0
 80075e4:	dc1b      	bgt.n	800761e <round+0x4e>
 80075e6:	2a00      	cmp	r2, #0
 80075e8:	da0b      	bge.n	8007602 <round+0x32>
 80075ea:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80075ee:	3201      	adds	r2, #1
 80075f0:	bf04      	itt	eq
 80075f2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80075f6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80075fa:	2200      	movs	r2, #0
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	e015      	b.n	800762e <round+0x5e>
 8007602:	4c15      	ldr	r4, [pc, #84]	@ (8007658 <round+0x88>)
 8007604:	4114      	asrs	r4, r2
 8007606:	ea04 0601 	and.w	r6, r4, r1
 800760a:	4306      	orrs	r6, r0
 800760c:	d00f      	beq.n	800762e <round+0x5e>
 800760e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8007612:	fa41 f202 	asr.w	r2, r1, r2
 8007616:	4413      	add	r3, r2
 8007618:	ea23 0304 	bic.w	r3, r3, r4
 800761c:	e7ed      	b.n	80075fa <round+0x2a>
 800761e:	2a33      	cmp	r2, #51	@ 0x33
 8007620:	dd08      	ble.n	8007634 <round+0x64>
 8007622:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8007626:	d102      	bne.n	800762e <round+0x5e>
 8007628:	4602      	mov	r2, r0
 800762a:	f7f8 fe4f 	bl	80002cc <__adddf3>
 800762e:	ec41 0b10 	vmov	d0, r0, r1
 8007632:	bd70      	pop	{r4, r5, r6, pc}
 8007634:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8007638:	f04f 34ff 	mov.w	r4, #4294967295
 800763c:	40f4      	lsrs	r4, r6
 800763e:	4204      	tst	r4, r0
 8007640:	d0f5      	beq.n	800762e <round+0x5e>
 8007642:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8007646:	2201      	movs	r2, #1
 8007648:	408a      	lsls	r2, r1
 800764a:	1952      	adds	r2, r2, r5
 800764c:	bf28      	it	cs
 800764e:	3301      	addcs	r3, #1
 8007650:	ea22 0204 	bic.w	r2, r2, r4
 8007654:	e7d2      	b.n	80075fc <round+0x2c>
 8007656:	bf00      	nop
 8007658:	000fffff 	.word	0x000fffff

0800765c <_init>:
 800765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765e:	bf00      	nop
 8007660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007662:	bc08      	pop	{r3}
 8007664:	469e      	mov	lr, r3
 8007666:	4770      	bx	lr

08007668 <_fini>:
 8007668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766a:	bf00      	nop
 800766c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766e:	bc08      	pop	{r3}
 8007670:	469e      	mov	lr, r3
 8007672:	4770      	bx	lr
